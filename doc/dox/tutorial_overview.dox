/*!
\page page_tutorial_overview Overview on the SmartSoft Approach

\section tutorial_overview_00 Abstract

Vital functions of robots are provided by software and software dominance is 
still growing. Mastering the software complexity is not only a demanding but
also indispensable task towards an operational robot. Component based software
approaches provide suitable means to master the complexity issue. Nevertheless
shareable, distributable and reusable off-the-shelf software components for
robotics are still a great dream. One of the reasons is the lack of a software
component model taking into account robotics needs. The challenge of component
based software approaches for robotic systems is to assist in building a system
and to provide a software architecture without enforcing a particular robot
architecture.

This tutorial explains the communication primitives of SmartSoft which
are the core of a robotics component model. Dynamic wiring of components at runtime
is explicitly supported by a separate pattern which tightly interacts with the 
communication primitives. This makes one of the major differences to other
approaches.




\section tutorial_overview_01 Motivation

SmartSoft is a component based software framework to implement sensorimotor
systems based on communication patterns as central mean to achieve decoupling at
various levels. Decoupling is the key to master the overall complexity of software
of sensorimotor systems.

SmartSoft has been developed in the domain of sensorimotor systems but is
not restricted to applications in that domain. The general approach is also useful
in other domains.

SmartSoft addresses the complexity issue by providing templates for
standardized communication patterns. These provide a clear semantic of services
and enforce consistent component interfaces.

Component interfaces based on predefined communication patterns allow a clear
distinction between the external behavior of a component and its internal
implementation. This is of vital importance for complex systems consisting
of many components which are developed concurrently and even at different
sites. It is also the key to component reuse avoiding starting from scratch
again and again.



\section tutorial_overview_02 Introduction

For a long time <i>integration</i> has been considered to require only a
minor effort once the needed algorithms are all available. The difficulties
to overcome have been vastly underestimated.

An important step from laboratory prototypes towards everyday robots is increased
reliability and robustness. This requires to master the inherent complexity of
robotic systems. Component based approaches address the complexity issue by
splitting a complex system into several independent units with well-formed
interfaces. Fitting of components is ensured by standards for their external
behavior. This allows to compose systems of approved components and to focus
on a single component when going into details without bothering with internals
of other components.

A component based approach is not only useful for robotics hardware but is also
advantageous at the software level. This is in particular true with regard to the
still growing dominance of software in robotics. So far, there is hardly a chance
to share software components between labs or reuse them on another platform even
for the most often needed skills. The lack of standard specifications for robotic
software requires error-prone and tedious reimplementations wasting valuable
resources.



\section tutorial_overview_03 Requirements

Several categories of users are distinguished which all put a different focus on 
complexity management for integration in robotics.

<b>End users</b> operate an application based on the provided user interface.
  They focus on the functionality of their application and use a readily
  provided system with a given functionality to fulfill the required tasks.
  They do not care on how the application has been built by the application
  builder and mainly expect reliable operation.

<b>Application builders</b> assemble applications based on suitable and 
  reusable components. They customize them by adjusting parameters and
  sometimes even fill in application dependent parts called <i>hot spots</i>.
  They expect the framework to ensure clearly structured and consistent
  component interfaces for easy assembling of approved off-the-shelf
  components.

<b>Component builders</b> focus on the specification and implementation of
  a single component. They expect the framework to provide the infrastructure
  which supports their implementation effort in such a way that it is compatible
  with other components without being restricted too much with regard to component
  internals. They want to focus on algorithms and component functionality without
  bothering with integration issues.

<b>Framework builders</b> design and implement the framework such that it matches
  the manifold requirements at its best and that the above types of users can focus
  on their role.

Important features required in the robotics domain which go beyond standard
component based software are the following ones:

<b>Dynamic wiring</b> can be considered as <i>the</i> pattern of robotics. The
  dynamic wiring pattern allows dynamic configuration of connections between
  services of components at runtime. Making both the control flow and the data
  flow configurable from outside a component is for example the key to situated
  skill compositions and is required in nearly any robotic architecture. The
  dynamic wiring pattern tightly interacts with the communication primitives
  and makes one of the major differences to other approaches.

<b>Asynchronicity</b> is a powerful concept to decouple activities and to
  reduce latencies by exploiting concurrency as far as possible. Decoupling
  is in particular important at the component level to avoid passing on tight
  timing dependencies between components. A robotics framework has to exploit
  asynchronicity whereever possible without involving the framework user.

<b>Component internal structures</b> can follow completely different designs
  and component builders therefore ask for as less restrictions as possible.
  A framework therefore has to allow for different component internal
  architectures. It however has to ensure interoperability by assisting
  in structuring and implementing a component.

<b>Easy usage</b> allows focusing on robotics and makes up-to-date software
  technology available without requiring a robotics expert to become a
  software engineering expert. Challenging topics which have to be addressed
  are for example location transparency of components and their services
  and concepts of concurrency including synchronization and thread safety.




\section tutorial_overview_04 Approach

Mastering the intercomponent communication is considered as key to master
component dependencies and to ensure uniform component interfaces. The developed
approach therefore selects intercomponent communication as a suitable starting
point. The basic idea is to provide a small set of communication patterns which
can transmit objects between components and then squeeze every component
interaction into those predefined patterns. As shown in figure 1, components
interact solely via those patterns.


\image html tutorial_overview_approach.png "Figure 1:&nbsp; Overview on the approach."


<b>Components</b> are technically implemented as processes. A component can
  contain several threads and interacts with other components via predefined
  communication patterns. Components can be wired dynamically at runtime.

<b>Communication Patterns</b> assist the component builder and the application
  builder in building and using distributed components in such a way that the 
  semantics of the interface is predefined by the patterns, irrespective of
  where they are applied. A communication pattern defines the communication
  mode, provides predefined access methods and hides all the communication
  and synchronization issues. It always consists of two complementary parts
  named <i>service requestor</i> and <i>service provider</i> representing
  a <i>client/server</i>, <i>master/slave</i> or <i>publisher/subscriber</i>
  relationship.

<b>Communication Objects</b> parameterize the communication pattern templates.
  They represent the content to be transmitted via a communication pattern.
  They are always transmitted <i>by value</i> to avoid fine grained intercomponent
  communication when accessing an attribute. Furthermore, object responsibilities
  are much simpler with locally maintained objects than with remote objects. 
  Communication objects are ordinary objects decorated with additional member
  functions for use by the framework.

<b>Service</b> Each instantiation of a communication pattern provides a service.
  A service comprises the communication mode as defined by the communication
  pattern and the content as defined by the communication objects.



<table WIDTH="100%">
<caption>Table 1: The set of communication patterns</caption>
<tr><td> Pattern     <td> Relationship         <td> Communication               <td> Templates
<tr><td> send        <td> client/server        <td> one-way                     <td> @ref CHS::SendClient, @ref CHS::SendServer, @ref CHS::SendServerHandler
<tr><td> query       <td> client/server        <td> two-way                     <td> @ref CHS::QueryClient, @ref CHS::QueryServer, @ref CHS::QueryServerHandler
<tr><td> push newest <td> publisher/subscriber <td> 1-to-n distribution         <td> @ref CHS::PushNewestClient, @ref CHS::PushNewestServer
<tr><td> push timed  <td> publisher/subscriber <td> 1-to-n distribution         <td> @ref CHS::PushTimedClient, @ref CHS::PushTimedServer
<tr><td> event       <td> client/server        <td> asynchronous notification   <td> @ref CHS::EventClient, @ref CHS::EventHandler, @ref CHS::EventServer, @ref CHS::EventTestHandler
<tr><td> <td> <td> <td>
<tr><td> wiring      <td> master/slave         <td>  dynamic wiring             <td> @ref CHS::WiringMaster, @ref CHS::WiringSlave
<tr><td> <td> <td> <td>
<tr><td> state       <td> master/slave         <td>  state management (utility) <td> @ref CHS::SmartStateClient, @ref CHS::SmartStateServer
</table>


The set of communication patterns is summarized in table 1. The communication
patterns make several communication modes explicit like <i>oneway</i> or
<i>request/response</i> interaction. Push services are provided by the
<i>push newest</i> and the <i>push timed</i> pattern. Whereas the
<i>push newest</i> can be used to irregularly distribute data to
subscribed clients whenever updates are available, the latter triggers
calculation and distribution of updates on a regularly basis. The <i>event</i>
pattern is used for asynchronous notification if an event condition becomes
true under the activation parameters. The <i>wiring</i> pattern covers
dynamic wiring of components and is described in more detail in the
following sections. 

The <i>state</i> pattern provides a very basic mechanism for state based 
activity coordination including cancelling of blocking calls of communication
patterns if a state change is enforced. The state pattern is only one possible
mechanism and already belongs to the set of patterns working on top of the
basic primitives.

The set of communication patterns is not the smallest possible one since a
oneway communication is already sufficient to implement any other communication
mode. It however is a reasonable trade-off between usability and minimality.


Predefined member functions of the patterns provide access modes like synchronous
and asynchronous service invocation or provide a handler based request handling.
This no longer leaves it to the component builder to decide on whether to invoke
a remote service synchronously or asynchronously but already defines an easy to
use and fixed set of access modes with every communication pattern. In particular
this provides the opportunity to fully handle concurrency and asynchronicity
inside the communication patterns hidden from the user instead of dealing with
those issues again and again in every single user defined object visible at a
component interface. Communication patterns hide the underlying middleware and
do not expect the framework user to for example deal with CORBA details like
AMI and valuetypes. Compared to distributed objects, one can neither expose
arbitrary member functions as component interface nor can one dilute the precise
interface semantic. Both avoids puzzling over the semantic of component interfaces.
Individual access methods are moved from the externally visible component interface
to communication objects. Since communication objects are always transmitted by
communication patterns and since member functions of communication objects are
not exposed outside a component, usage of communication objects and implementing
user member functions is completely free from cumbersome and demanding details
of intercomponent communication and distributed object mechanisms. Communication
patterns ensure decoupling of components since both parts always interact
asynchronously irrespective of the access mode used by the user. Arbitrary
communication objects provide diversity and ensure genericity even with a
very small set of communication patterns. Figure 2 illustrates the key concept.

\image html tutorial_overview_decoupling.png "Figure 2:&nbsp; All components only interact via services based on predefined communication patterns. These not only decouple components but also handle concurrent access inside a component. Each component can provide and use any number of services. The example shows the query pattern."




\section tutorial_overview_05 Implementation


\subsection tutorial_overview_05_01 The User API



Figure 3 shows the user API common to all service requestors. The service requestor
always provides several constructors including immediate wiring with a service provider
and exposing the service requestor as port wireable from outside. Connections can always
be changed using the <i>connect/disconnect</i> methods. A service requestor can decide
on being wireable from outside the component using the <i>add/remove</i> methods. These
constructors and member functions are part of all service requestors listed in table 1
except the wiring pattern. 



\image html tutorial_overview_api.png "Figure 3:&nbsp; Common user API of all service requestors."



Client side management of blocking calls decouples blocking access modes from the
service provider and supports client side canceling of blocking member functions
calls. The <i>blocking</i> member function sets whether blocking is allowed or not.
This feature is for example needed by the state pattern to rush through blocking
calls to reach a forced state as fast as possible and still in an ordered way. 
Setting blocking to <i>false</i> aborts all blocking member function calls with
an appropriate return code as well as new blocking method invocations.



\subsection tutorial_overview_05_02 Dynamic Wiring

As shown in figure 4, the <i>wiring</i> pattern makes service requestors visible as
ports and wireable at runtime from outside the component. All service requestors listed
in table 1 except the wiring pattern itself can expose themself as wireable ports. Wiring
of services is based on names. Services are denoted by <i>{component name, service name}</i>
and ports by <i>{component name, port name}</i>.


\image html tutorial_overview_wiring.png "Figure 4:&nbsp; Making service requestors visible as ports and wireable from outside the component."



The user API of the wiring pattern is shown in figure 4. Calling <i>connect("motion","pose",
"robotBase","odometry")</i> for example connects the port <i>pose</i> of the component <i>motion</i>
with the service <i>odometry</i> of the robot base component <i>(e.g. smartPioneerBaseServer)</i>. Service requestor and service
provider are compatible if both the communication pattern and the communication object
types match.

A broker service is implemented as standalone component. Service providers can register
their services at the broker. A service is described by the communication pattern and its
communication object types. The broker returns tuples <i>{component name, service name}</i>
describing all compatible service providers. The returned tuples can be used directly by
the service requestor to connect to a service provider.


\section tutorial_overview_06 Example

The following example illustrates the simple usage of the proposed patterns. As
component builder, one normally first checks the availability of standardized and
reusable communication objects. Otherwise one has to define a new communication
object type. This requires to describe the data structure to be transmitted in
CORBA IDL and to add the appropriate additional member functions for use by the
framework as shown in figure 5. This is the only place where one gets in touch
with the underlying middleware used. When using predefined communication objects,
one does even not see those details. Normally, there is already a huge set of
agreed communication objects available which can be reused and which ensure
interoperability of components. It is important to note that no middleware
specific CORBA types are exposed at the user interface of the communication
objects. One can for example use well-known STL classes irrespective of the IDL
described data structure used for transmission inside the communication object.


\image html tutorial_overview_commobject.png "Figure 5:&nbsp; Defining a communication object."


The example consists of the service requesting component named <i>first</i> shown
in figure 6. Its service requestor is visible as port named <i>timedPort</i>. 


\image html tutorial_overview_client.png "Figure 6:&nbsp; The service requesting component."


The service providing component shown in figure 7 is named <i>second</i> and provides
a service named <i>time</i>. The service consists of a <i>query</i> pattern with
both communication objects being of type <i>CommExampleTime</i>. A time stamp is
provided as request and is answered by another time stamp. The server component
uses a handler object to process incoming requests.


\image html tutorial_overview_server.png "Figure 7:&nbsp; The service providing component."



\section tutorial_overview_07 Conclusion

Using communication patterns as core of a component approach ensures clearly
structured component interfaces ad avoids dubious interface behaviors while
still not restricting the component internal architecture. Moving access modes
from the user domain into the communication patterns ensures decoupling of
components by only using asynchronous interactions at the intercomponent
level inside the patterns. Communication objects prevent the component
from being poluted with middleware data types. Standard communication
objects for maps, laser range scans, ultrasonic sensor values etc. support
uniform representations at the component level. Using inheritance one can
individually extend a communication object with individual member functions
without affecting other components. Applying the communication patterns does
not require additional software expertise beyong the standard knowledge. Due
to its simple usage, it might boost the component based development of
robotics software.


*/

