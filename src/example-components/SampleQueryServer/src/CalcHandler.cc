//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.8.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//--------------------------------------------------------------------------



//--------------------------------------------------------------------------
//
//  Copyright (C) 2009 Andreas Steck, Dennis Stampfer
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//        stampfer@hs-ulm.de
//
//        ZAFH Servicerobotic Ulm
//        Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This file is part of the SmartSoft MDSD Toolchain demonstration workspace.
//  It is based on the collection of smartExampleComponents included in the
//  SmartSoft distribution.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//--------------------------------------------------------------------------

#include "CalcHandler.hh"
#include "gen/SampleQueryServer.hh"

#include <iostream>

void CalcHandler::handleQuery(CHS::QueryServer<
		CommSampleObjects::CommSampleValues,
		CommSampleObjects::CommSampleResult> & server, const CHS::QueryId id,
		const CommSampleObjects::CommSampleValues & request) throw ()
{
	// change this code to your needs !!!
	CommSampleObjects::CommSampleResult answer;
    std::list<int>         list;
    int                    result;

    std::cout << "calc service " << id << std::endl;

    request.get(list);
    result = 0;
    for (std::list<int>::iterator i=list.begin();i!=list.end();++i) {
    	result += *i;
    }
    answer.set(result);

    std::cout << "calc service " << id << " sent answer " << result << std::endl;

	//answer.set(result);
	server.answer(id, answer);
}
