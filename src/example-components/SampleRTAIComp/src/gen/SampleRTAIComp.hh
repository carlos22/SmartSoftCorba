//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _SAMPLERTAICOMP_HH
#define _SAMPLERTAICOMP_HH

#include <iostream>
#include "smartSoft.hh"
#include "../SampleRTAICompCore.hh"
// include communication objects
// include tasks	

#include "../RtTask1.hh"
#include "../RtTask2.hh"
#include "../RtTask3.hh"
#include "../Task1.hh"
#include "../Task2.hh"
// include handler
#include "../CompHandler.hh"
#include "Task1Timer.hh"
#include "Task2Timer.hh"

#define COMP SampleRTAIComp::instance()

class SampleRTAIComp: public SampleRTAICompCore
{
private:
	static SampleRTAIComp _sampleRTAIComp;

	// constructor
	SampleRTAIComp();

	// copy-constructor
	SampleRTAIComp(const SampleRTAIComp& cc);

	// destructor
	~SampleRTAIComp()
	{
	}
	;

	// load parameter from ini file
	void loadParameter(int argc, char *argv[]);

	// instantiate handler
	CompHandler compHandler;
	Task1Timer task1Timer;
	Task2Timer task2Timer;

	// ThreadQueueHandler 

public:
	// component
	CHS::SmartComponent *component;

	// create mutex
	CHS::SmartMutex Task1Mutex;
	CHS::SmartMutex Task2Mutex;

	// create condition mutex
	CHS::SmartConditionMutex Task1CondMutex;//(Task1Mutex);
	CHS::SmartConditionMutex Task2CondMutex;//(Task2Mutex);


	// instantiate tasks

	RtTask1 rtTask1;
	RtTask2 rtTask2;
	RtTask3 rtTask3;
	Task1 task1;
	Task2 task2;

	// ports

	void init(int argc, char *argv[]);
	void run();

	// return singleton instance
	static SampleRTAIComp* instance()
	{
		return (SampleRTAIComp*) &_sampleRTAIComp;
	}

	// ini parameter
	struct ini_ini
	{

		// component struct
		struct ini_component
		{
			// the name of the component
			std::string name;
		} component;

	} ini;

};
#endif
