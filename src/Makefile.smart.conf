# --------------------------------------------------------------------------
#
#  Copyright (C) 2002/2004 Christian Schlegel
#
#        schlegel@fh-ulm.de
#
#        Prof. Dr. Christian Schlegel
#        University of Applied Sciences
#        Prittwitzstr. 10
#        D-89075 Ulm
#        Germany
#
#        Previous affiliation:
#
#        FAW Ulm
#        Research Institute for Applied Knowledge Processing
#        Helmholtzstr. 16
#        D-89081 Ulm
#        Germany
#
#  This file is part of the "SmartSoft Communication Library".
#  It provides standardized patterns for communication between
#  different components.
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License, or (at your option) any later version.
#
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public
#  License along with this library; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#
#  (partly based on joint work with Robert Wörz)
#
# --------------------------------------------------------------------------

.KEEP_STATE:

##
## This is the system configuration file that is used by all 
## packages.  It is presently generated by hand.  It should
## be generated by a GNU Autoconf script.
##

##
## Executables (indirect)
##

SHELL         = bash
RM            = rm -rf
ETAGS         = etags
CC            = gcc
CXX           = g++
CPP           = gcc -E 
AR            = ar r
RANLIB        = ranlib
MKDIR         = install -d
INSTALL_TEXT  = install -m 664
INSTALL_EXEC  = install -m 775 $(STRIP)
INSTALL_LIB   = install -m 664
INSTALL_H     = $(SILENT) ln -s -f
INSTALL_ETC   = $(SILENT) ln -s
CP            = cp
ECHO          = @echo
SUDO          = echo "* SUDO DID NOT DO:"
LEX           = flex -i
YACC          = yacc -dv
PERL          = perl
AWK           = awk

IDL           = $(TAO_ROOT)/TAO_IDL/tao_idl
MOC           = $(QTDIR)/bin/moc

##
## Architecture independence
## This section will need much work to make the system truely portable
##

OS_NAME      = $(shell uname -s)
OS_VER       = $(shell uname -r | $(AWK) '{print substr($$1,0,1)}' )
OS_MINOR_VER = $(shell uname -r | $(AWK) '{print substr($$1,3,1)}' )
CPU_TYPE     = $(shell uname -m)

##
## arch options
##

ifeq ($(OS_NAME),Linux)
OS_TAG =
else
ifeq ($(OS_VER), 5)
OS_TAG = _solaris
else
OS_TAG = _sun
endif
endif

DEPEND      = Makefile.depend$(OS_TAG)
OBJ_DIR     = obj$(OS_TAG)

##
## local macros
##
ifndef TAO_ROOT
  TAO_ROOT = $(ACE_ROOT)/TAO
endif

##
## Install directories
##

PREFIX    = ../../..
PREFIX_2  = ..
POSTFIX   = 

SRC_DIR   = $(PREFIX)/src$(POSTFIX)
INC_DIR   = $(PREFIX)/include$(POSTFIX)
LIB_DIR   = $(PREFIX)/lib$(OS_TAG)$(POSTFIX)
BIN_DIR   = $(PREFIX)/bin$(OS_TAG)$(POSTFIX)
ETC_DIR   = $(PREFIX)/etc$(POSTFIX)
LOG_DIR   = $(PREFIX)/log$(POSTFIX)
DOC_DIR   = $(PREFIX)/doc$(POSTFIX)

##
## Official release (permits users to work with incomplete code)
##
OFFICIAL_ROOT_DIR  =  $(SMART_ROOT)

OFFICIAL_INC_DIR   = $(OFFICIAL_ROOT_DIR)/include
OFFICIAL_SRC_DIR   = $(OFFICIAL_ROOT_DIR)/src
OFFICIAL_ETC_DIR   = $(OFFICIAL_ROOT_DIR)/etc
OFFICIAL_LIB_DIR   = $(OFFICIAL_ROOT_DIR)/lib$(OS_TAG)
OFFICIAL_DOC_DIR   = $(OFFICIAL_ROOT_DIR)/doc
OFFICIAL_DAT_DIR   = $(OFFICIAL_ROOT_DIR)/data
OFFICIAL_BIN_DIR   = $(OFFICIAL_ROOT_DIR)/bin$(OS_TAG)

##
## Compilation options
##

INCLUDES   += -I. \
              -I$(INC_DIR) \
              -I$(OFFICIAL_INC_DIR) \
              -I$(ACE_ROOT) \
              -I$(TAO_ROOT) \
              -I$(SMART_ROOT)/src/utility/armadillo \
              -I$(SMART_ROOT)/src/utility/transformationMatrices \
	      -I/usr/X11R6/include

LIB_DIRS   += -L. \
              -L$(OBJ_DIR) \
              -L$(LIB_DIR) \
              -L$(OFFICIAL_LIB_DIR) \
              -L$(ACE_ROOT)/lib \
	      -L/usr/X11R6/lib

CFLAGS     += $(OPT_FLAGS) $(USER_DEFINES) 
CFLAGS     += -Wall
CFLAGS     += -Wno-pmf-conversions
CFLAGS     += -D_REENTRANT
CFLAGS     += -D_POSIX_THREADS
CFLAGS     += -D_POSIX_THREAD_SAFE_FUNCTIONS
#CFLAGS     += -DACE_HAS_LINUX_NPTL
CFLAGS     += -DACE_HAS_VALGRIND
CFLAGS     += -D__ACE_INLINE__

##
## Either "@" for quiet or "" for verbose
##

SILENT = 

##
## Compiler optimization/debugging flags (-g -O2 can be combined)
##

OPT_FLAGS   = -g -O4

##
## uncomment to strip executables during installation
##

#STRIP = -s

##
## OS-specific libraries
##





LINUX_MAKEFILE = /usr/src/linux/Makefile

VERSION = $(shell head -10 $(LINUX_MAKEFILE) | fgrep VERSION \
	| fgrep = | fgrep -v "\#" | cut -d "=" -f 2 | tr -d ' ' )

PATCHLEVEL = $(shell head -10 $(LINUX_MAKEFILE) | fgrep PATCHLEVEL \
	| fgrep = | fgrep -v "\#" | cut -d "=" -f 2 | tr -d ' ' )

SUBLEVEL = $(shell head -10 $(LINUX_MAKEFILE) | fgrep SUBLEVEL \
	| fgrep = | fgrep -v "\#" | cut -d "=" -f 2 | tr -d ' ' )

LINUX_VERSION_CODE = $(shell echo `expr $(VERSION) \\* 65536 + \
	$(PATCHLEVEL) \\* 256 + $(SUBLEVEL)` )

SMP = $(shell head -20 $(LINUX_MAKEFILE) | fgrep SMP | fgrep -v "_PROF" \
	| fgrep = | fgrep -v "\#" | cut -d "=" -f 2 | tr -d ' ' )

SMP_PROF = $(shell head -20 $(LINUX_MAKEFILE) | fgrep SMP_PROF \
	| fgrep = | fgrep -v "\#" | cut -d "=" -f 2 | tr -d ' ' )
