// --------------------------------------------------------------------------
//
//  Copyright (C) 2002/2004 Christian Schlegel
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Library".
//  It provides standardized patterns for communication between
//  different components.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//
//  (partly based on joint work with Robert Wörz)
//
// --------------------------------------------------------------------------

/////////////////////////////////////////////////////////////////////////
//
// client part of push newest template
//
/////////////////////////////////////////////////////////////////////////

//
// static handle method called by CORBA object
//
template<class T> void CHS::PushNewestClient<T>::hndUpdate(void* ptr,const CORBA::Any& user)
{
  PushNewestClient<T> *lthis = (PushNewestClient<T> *)ptr;

  lthis->mutexConnection.acquire();

  lthis->data.set(user);
  lthis->dataAvailable = 1;

  lthis->cond.signal();

  lthis->mutexConnection.release();
}

//
// static handle method called by CORBA object
//
template<class T> void CHS::PushNewestClient<T>::hndServDisc(void* ptr)
{
  PushNewestClient<T> *lthis = (PushNewestClient<T> *)ptr;

  lthis->disconnect();
}

//
// static internal interface methods used by wiring service
//
template<class T> CHS::StatusCode CHS::PushNewestClient<T>::internalConnect(void *ptr,const std::string & srv, const std::string & svc)
{
  PushNewestClient<T>* lthis = (PushNewestClient<T> *)ptr;

  return lthis->connect(srv,svc);
}

template<class T> CHS::StatusCode CHS::PushNewestClient<T>::internalDisconnect(void *ptr)
{
  PushNewestClient<T>* lthis = (PushNewestClient<T> *)ptr;

  return lthis->disconnect();
}


//
// default constructor
//
template<class T> inline CHS::PushNewestClient<T>::PushNewestClient(void) throw(CHS::SmartError)
{
  std::cerr << "CommPattern (push newest): ERROR: Entered default constructor PushNewestClient" << std::endl;

  throw(CHS::SmartError(CHS::SMART_ERROR,"CommPattern (pushNewestClient): ERROR: Entered default constructor PushNewestClient"));
}

//
// standard constructor port
//
template<class T> inline CHS::PushNewestClient<T>::PushNewestClient(SmartComponent* m,const std::string& port, WiringSlave* slave) throw(CHS::SmartError)
{
  CHS::StatusCode status;

  // set the configuration flags appropriately
  statusConnected   = 0;
  statusManagedPort = 0;
  portname          = port;
  component         = m;
  wiringslave       = slave;
  statusSubscribed  = 0;
  dataAvailable     = 0;

  cond.blockingUser(true);
  cond.blockingPattern(false);
  component->addCV(&cond);

  // Create the CORBA client object
  corbaClient = new PushNewestClient_impl((void *)this,&PushNewestClient<T>::hndUpdate,&PushNewestClient<T>::hndServDisc);

  // activate object to obtain the object reference, need not be registered at name service
  // since object reference is sent to server with every subscribe
  h = corbaClient->_this();

  status = this->add(slave,port);

  if (status == CHS::SMART_PORTALREADYUSED) {
    //
    // port name already in use therefore throw exception
    //
    throw(CHS::SmartError(CHS::SMART_PORTALREADYUSED,"CommPattern (pushNewestClient): ERROR: port name already in use"));
  } else if (status != CHS::SMART_OK) {
    //
    // throw exception since something went wrong
    //
    throw(CHS::SmartError(CHS::SMART_ERROR,"CommPattern (pushNewestClient): ERROR: something went wrong"));
  }
}

//
// standard constructor
//
template<class T> inline CHS::PushNewestClient<T>::PushNewestClient(SmartComponent* m) throw(CHS::SmartError)
{
  // set the configuration flag appropriately
  statusConnected   = 0;
  statusManagedPort = 0;
  portname          = "";
  component         = m;
  wiringslave       = 0;
  statusSubscribed  = 0;
  dataAvailable     = 0;

  cond.blockingUser(true);
  cond.blockingPattern(false);
  component->addCV(&cond);

  // Create the CORBA client object
  corbaClient = new PushNewestClient_impl((void *)this,&PushNewestClient<T>::hndUpdate,&PushNewestClient<T>::hndServDisc);

  // activate object to obtain the object reference, need not be registered at name service
  // since object reference is sent to server with every subscribe
  h = corbaClient->_this();
}

//
// standard constructor already wired
//
template<class T> inline CHS::PushNewestClient<T>::PushNewestClient(SmartComponent* m,const std::string& srv,const std::string& svc) throw(CHS::SmartError)
{
  CHS::StatusCode status;
  int flag;

  // set the configuration flags appropriately
  statusConnected   = 0;
  statusManagedPort = 0;
  portname          = "";
  component         = m;
  wiringslave       = 0;
  statusSubscribed  = 0;
  dataAvailable     = 0;

  cond.blockingUser(true);
  cond.blockingPattern(false);
  component->addCV(&cond);

  // Create the CORBA client object
  corbaClient = new PushNewestClient_impl((void *)this,&PushNewestClient<T>::hndUpdate,&PushNewestClient<T>::hndServDisc);

  // activate object to obtain the object reference, need not be registered at name service
  // since object reference is sent to server with every subscribe
  h  = corbaClient->_this();

  // Now connect to the server side of the push newest pattern
  std::cout << "Try to connect to (" << srv << ":pushNewest<" << T::identifier() << ">:" << svc << ") ..." << std::endl;

  do {
    status = this->connect(srv,svc);

    if (status == CHS::SMART_OK) {
      flag = 1;
      std::cout << "... connected to (" << srv << ":pushNewest<" << T::identifier() << ">:" << svc << ")" << std::endl;
    } else if (status == CHS::SMART_SERVICEUNAVAILABLE) {
      std::cout << "CommPattern (pushNewestClient): INFO: not yet found in naming service ..." << std::endl;
      sleep(1);
      flag = 0;
    } else if (status == CHS::SMART_INCOMPATIBLESERVICE) {
      std::cout << "CommPattern (pushNewestClient): ERROR: incompatible service ..." << std::endl;
      flag = 1;
      throw(CHS::SmartError(status,"CommPattern (pushNewestClient): ERROR: incompatible service"));
    } else {
      std::cout << "CommPattern (pushNewestClient): ERROR: something went wrong ..." << std::endl;
      flag = 1;
      throw(CHS::SmartError(status,"CommPattern (pushNewestClient): ERROR: something went wrong"));
    };
  } while (flag == 0);
}

//
// destructor
//
template<class T> inline CHS::PushNewestClient<T>::~PushNewestClient(void) throw()
{
  //
  // remove port from managed set of ports and disconnect from server even if not
  // exposed as port or connected to a server since this is handled correctly inside
  // remove() and disconnect(). Disconnect automatically unsubscribes from server.
  //
  component->removeCV(&cond);

  this->remove();
  this->disconnect();

  // client does not bind object at naming service,
  // therefore no unbind of objects needed here

  // ### delete/deactivate the corbaServant object (Christian Schlegel)
}

//
//
//
template<class T> CHS::StatusCode CHS::PushNewestClient<T>::add(WiringSlave* slave, const std::string& port) throw()
{
  CHS::StatusCode status;

  mutexConnection.acquire();

  // first remove eventually valid registration
  this->remove();

  // now add client
  portname          = port;
  statusManagedPort = 1;

  wiringslave = slave;
  status      = this->wiringslave->add(port,(void*)this,&PushNewestClient<T>::internalConnect,&PushNewestClient<T>::internalDisconnect);

  mutexConnection.release();

  return status;
}

//
//
//
template<class T> CHS::StatusCode CHS::PushNewestClient<T>::remove() throw()
{
  CHS::StatusCode status;

  mutexConnection.acquire();

  if (statusManagedPort == 1) {
    status = this->wiringslave->remove(portname);

    portname          = "";
    statusManagedPort = 0;

  } else {
    status = CHS::SMART_OK;
  }

  mutexConnection.release();

  return status;
}

//
//
//
template<class T> CHS::StatusCode CHS::PushNewestClient<T>::connect(const std::string& srv, const std::string& svc) throw()
{
  CHS::StatusCode result;

  result = CHS::SMART_ERROR;

  mutexConnection.acquire();

  // first disconnect eventually valid connection
  this->disconnect();

  try {
    CosNaming::Name name;
    name.length(5);
    name[0].id = CORBA::string_dup("orocos");
    name[1].id = CORBA::string_dup(srv.c_str());
    name[2].id = CORBA::string_dup("pushNewest");
    name[3].id = CORBA::string_dup(svc.c_str());
    name[4].id = CORBA::string_dup(T::identifier().c_str());

    try {
      corbaServant = resolve_name<SmartPushNewestServerPattern>(component->namingService.in(), name);
      result = CHS::SMART_OK;
    } catch (const CosNaming::NamingContext::NotFound &) {
      // not found in naming service
      result = CHS::SMART_SERVICEUNAVAILABLE;
    }
  } catch (const CORBA::Exception & e) {
    result = CHS::SMART_ERROR;
  }

  if (result == CHS::SMART_OK) {
    // now call server to introduce this client and to check whether the server really is
    // available or whether it is in the process of destruction
    try {
      result = static_cast<CHS::StatusCode>(corbaServant->connect(h));
    } catch (CORBA::SystemException &e) {
      //
      // it might be that the server is currently being destroyed and therefore any
      // CORBA exception is interpreted as a not available service
      //
      result = CHS::SMART_ERROR_COMMUNICATION;
    }

    if (result == CHS::SMART_OK) {
      // successfully connected to the server
      statusConnected = 1;
    }
  }

  mutexConnection.release();

  return result;
}

//
//
//
template<class T> CHS::StatusCode CHS::PushNewestClient<T>::disconnect() throw()
{
  CHS::StatusCode result;

  mutexConnection.acquire();

  if (statusConnected == 0) {
    result = CHS::SMART_OK;
  } else {
    //
    // from now on no new getUpdate / getUpdateWait can be initiated anymore since
    // we hold the mutexConnection and it is released only after the status is already
    // set to "disconnected"
    //

    this->unsubscribe();

    // hint: blocking calls etc. at the client are signalled inside unsubscribe()

    //
    // it is important to set statusConnected to 0 AFTER calling unsubscribe since
    // unsubscribe itself checks the statusConnected flag and executes unsubscribe
    // only in case a connection to a server is available
    // 
    statusConnected = 0;

    //
    // now perform clean up operations at the server
    //
    result = CHS::SMART_OK;
    try {
      corbaServant->disconnect(h);
    } catch (CORBA::SystemException &e) {
      result = CHS::SMART_ERROR_COMMUNICATION;
    }
  }

  mutexConnection.release();

  return result;
}

//
//
//
template<class T> CHS::StatusCode CHS::PushNewestClient<T>::subscribe() throw()
{
  CHS::StatusCode result;

  mutexConnection.acquire();

  if (statusConnected == 0) {
    //
    // no connection available
    //
    result = CHS::SMART_DISCONNECTED;

    mutexConnection.release();

    return result;
  }

  if (statusSubscribed == 1) {
    //
    // already subscribed
    //
    result = CHS::SMART_OK;

    mutexConnection.release();

    return result;
  }

  result = CHS::SMART_OK;
  try {
    corbaServant->subscribe(h);
  } catch (CORBA::SystemException &e) {
    result = CHS::SMART_ERROR_COMMUNICATION;
  }

  if (result == CHS::SMART_OK) {
    statusSubscribed = 1;

    //
    // see detailed documentation on that type of condition variable
    // 
    cond.blockingPattern(true);

  } else {
    statusSubscribed = 0;

    //
    // see detailed documentation on that type of condition variable
    //
    // setting the cancel flag inside the condition variable avoids
    // blocking calls while this client is unsubscribed. The cancel
    // flag causes a wait on the CV to return immediately. The cancel
    // flag mechanism avoids infinite blocking waits when getUpdateWait
    // and unsubscribe are executed concurrently. Otherwise unsubscribe
    // could be executed between the test on subscribe and the waitForCond
    // of the getUpdateWait method. Since getUpdateWait must release the 
    // mutexConnection before calling waitForCond we would now block
    // infinitely.
    //
    cond.blockingPattern(false);

    result = CHS::SMART_ERROR;
  }

  mutexConnection.release();

  return result;
}

//
//
//
template<class T> CHS::StatusCode CHS::PushNewestClient<T>::unsubscribe() throw()
{
  CHS::StatusCode result;

  mutexConnection.acquire();

  if ((statusConnected == 0) && (statusSubscribed == 1)) {
    //
    // no connection available and still subscribed is not possible
    //
    result = CHS::SMART_ERROR;

    mutexConnection.release();

    return result;
  }

  if (statusSubscribed == 0) {
    //
    // already unsubscribed, connection status not relevant
    //
    result = CHS::SMART_OK;

    mutexConnection.release();

    return result;
  }

  result = CHS::SMART_OK;
  try {
    corbaServant->unsubscribe(h);
  } catch (CORBA::SystemException &e) {
    result = CHS::SMART_ERROR_COMMUNICATION;
  }

  if (result == CHS::SMART_OK) {
    // successfully unsubscribed
    statusSubscribed = 0;
    dataAvailable    = 0;

    cond.blockingPattern(false);
  } else {
    result = CHS::SMART_ERROR;
  }

  mutexConnection.release();

  return result;
}

//
//
//
template<class T> CHS::StatusCode CHS::PushNewestClient<T>::blocking(const bool b) throw()
{
  CHS::StatusCode result = CHS::SMART_OK;

  cond.blockingUser(b);

  return result;
}

//
//
//
template<class T> CHS::StatusCode CHS::PushNewestClient<T>::getUpdate(T& d) throw()
{
  CHS::StatusCode result;

  mutexConnection.acquire();
  if (statusConnected == 1) {
    if (statusSubscribed == 1) {
      if (dataAvailable == 1) {
        d = data;
        result = CHS::SMART_OK;
      } else {
        result = CHS::SMART_NODATA;
      }
    } else {
      result = CHS::SMART_UNSUBSCRIBED;
    }
  } else {
    result = CHS::SMART_DISCONNECTED;
  }
  mutexConnection.release();

  return result;
}

//
//
//
template<class T> CHS::StatusCode CHS::PushNewestClient<T>::getUpdateWait(T& d) throw()
{
  CHS::StatusCode status;
  CHS::StatusCode result;

  //
  // Now wait till the condition variable gets triggered the next time.
  // Blocks only if client is connected and subscribed to a service provider.
  // See details of this type of condition variable and how the "reset"/"cancel"
  // methods are applied within subscribe/unsubscribe.
  //
  status = cond.wait();

  mutexConnection.acquire();

  if (status == CHS::SMART_OK) {
    //
    // condition variable triggered with SMART_OK and therefore new data available
    //
    d = data;
    result = CHS::SMART_OK;
  } else if (status == CHS::SMART_CANCELLED) {
    //
    // "cancelled" can mean "got unsubscribed", "got disconnected" or "got cancelled due to state change"
    //
    if (statusSubscribed == 1) {
      // connected(1),subscribed(1) => therefore "cancelled" results from enforced state change
      result = CHS::SMART_CANCELLED;
    } else if (statusConnected == 1) {
      // connected(1),subscribed(0) => client got unsubscribed
      result = CHS::SMART_UNSUBSCRIBED;
    } else if (statusConnected == 0) {
      // connected(0),subscribed(0) => client got disconnected
      result = CHS::SMART_DISCONNECTED;
    } else {
      result = CHS::SMART_ERROR;
    }
  } else {
    result = CHS::SMART_ERROR;
  }

  mutexConnection.release();

  return result;
}



/////////////////////////////////////////////////////////////////////////
//
// server part of push newest template
//
/////////////////////////////////////////////////////////////////////////

//
// static handle method called by CORBA object
//
template<class T> CHS::StatusCode CHS::PushNewestServer<T>::hndCnct(void *ptr, const SmartPushNewestClientPattern_ptr client)
{
  PushNewestServer<T>* lthis = (PushNewestServer<T> *)ptr;
  PushNewestClientList* cptr;

  CHS::StatusCode result;

  lthis->mutexClientList.acquire();

  if (lthis->serverReady == 0) {
    //
    // don't accept any new clients since server is in process of destruction or not yet ready
    //
    result = CHS::SMART_SERVICEUNAVAILABLE;
  } else {
    //
    // make new client list entry
    //
    cptr                 = new PushNewestClientList;
    cptr->client         = SmartPushNewestClientPattern::_duplicate(client);
    cptr->subscribed     = 0; 
    cptr->next           = lthis->subscriptions;
    lthis->subscriptions = cptr;

    result = CHS::SMART_OK;
  }

  lthis->mutexClientList.release();

  return result;
}

//
// static handle method called by CORBA object
//
template<class T> void CHS::PushNewestServer<T>::hndDisc(void* ptr, const SmartPushNewestClientPattern_ptr client)
{
  PushNewestServer<T>* lthis  = (PushNewestServer<T> *)ptr;
  PushNewestClientList* cptr  = 0;
  PushNewestClientList* hcptr = 0;

  lthis->mutexClientList.acquire();

  //
  // If serverReady == 0 then do not modify the list of clients anymore since
  // this list is stepped through by the destructor outside the mutexClientList
  // to disconnect all still connected clients. See comments in destructor why
  // no modifications are allowed then.
  //
  if (lthis->serverReady == 1) {
    //
    // remove client from list of clients
    //

    //
    // first remove entries from head as long as they match the corba client object
    //
    while ((lthis->subscriptions != 0) && (client->_is_equivalent(lthis->subscriptions->client))) {
      cptr = lthis->subscriptions;
      lthis->subscriptions = lthis->subscriptions->next;
      CORBA::release(cptr->client);
      delete cptr;
    }

    //
    // now search through the rest of the list which might be empty already. If the
    // length is greater than zero, than the first element never matches and never
    // gets deleted
    //
    cptr = lthis->subscriptions;
    if (cptr == 0) {
      // list contains no element anymore => ready
    } else {
      // list can now contain one or more elements with the first element matching never
      while (cptr->next != 0) {
        if (client->_is_equivalent(cptr->next->client)) {
          hcptr      = cptr->next;
          cptr->next = cptr->next->next;
          CORBA::release(hcptr->client);
          delete hcptr;
        } else {
          cptr = cptr->next;
        }
      }
    }
  } else {
    //
    // do nothing since server is in process of destruction
    //
  }

  lthis->mutexClientList.release();
}

//
// static handle method called by CORBA object
//
template<class T> void CHS::PushNewestServer<T>::hndSubscribe(void *ptr, const SmartPushNewestClientPattern_ptr client)
{
  PushNewestServer<T>* lthis = (PushNewestServer<T> *)ptr;
  PushNewestClientList* cptr;

  lthis->mutexClientList.acquire();

  cptr = lthis->subscriptions;
  while (cptr != 0) {
    if (client->_is_equivalent(cptr->client)) {
      cptr->subscribed = 1;
    }
    cptr = cptr->next;
  }

  lthis->mutexClientList.release();
}

//
// static handle method called by CORBA object
//
template<class T> void CHS::PushNewestServer<T>::hndUnsubscribe(void *ptr, const SmartPushNewestClientPattern_ptr client)
{
  PushNewestServer<T>* lthis = (PushNewestServer<T> *)ptr;
  PushNewestClientList *cptr;

  lthis->mutexClientList.acquire();

  cptr = lthis->subscriptions;
  while (cptr != 0) {
    if (client->_is_equivalent(cptr->client)) {
      cptr->subscribed = 0;
    }
    cptr = cptr->next;
  }
  
  lthis->mutexClientList.release();
}

//
// default constructor
//
template<class T> inline CHS::PushNewestServer<T>::PushNewestServer(void) throw(CHS::SmartError)
{
  std::cerr << "CommPattern (pushNewest): ERROR: Entered default constructor PushNewestServer" << std::endl;

  throw(CHS::SmartError(CHS::SMART_ERROR,"CommPattern (pushNewest): ERROR: Entered default constructor PushNewestServer"));
}

//
// standard constructor
//
template<class T> 
inline CHS::PushNewestServer<T>::PushNewestServer(SmartComponent* m,
                                                  const std::string& svc) throw(CHS::SmartError)
  : component(m),
    service(svc),
    serverReady(0)
{
  mutexClientList.acquire();

  // reset list, counter and other stuff
  subscriptions = 0;

  // Create the CORBA server object
  corbaServant = new PushNewestServer_impl((void *)this,
                                           &PushNewestServer<T>::hndSubscribe,
                                           &PushNewestServer<T>::hndUnsubscribe,
                                           &PushNewestServer<T>::hndCnct,
                                           &PushNewestServer<T>::hndDisc);

  // activate object to obtain the object reference
  SmartPushNewestServerPattern_var tm = corbaServant->_this ();

  CosNaming::Name name;                                                   // initialize name

  name.length(1);
  name[0].id = CORBA::string_dup("orocos");
  try {
    CosNaming::NamingContext_var orocos = component->namingService->bind_new_context(name);         // inc -> orocos
  } catch (const CosNaming::NamingContext::AlreadyBound &) {
    // Fine, context already exists
  }

  std::string server = component->getComponentName();
  name.length(2);
  name[1].id = CORBA::string_dup(server.c_str());
  try {
    CosNaming::NamingContext_var compname = component->namingService->bind_new_context(name);       // orocos -> <<component name>>
  } catch (const CosNaming::NamingContext::AlreadyBound &) {
    // Fine, context already exists
  }

  name.length(3);
  name[2].id = CORBA::string_dup("pushNewest");
  try {
    CosNaming::NamingContext_var pushnewestname = component->namingService->bind_new_context(name); // <<component name>> -> pushNewest
  } catch (const CosNaming::NamingContext::AlreadyBound &) {
    // Fine, context already exists
  }

  name.length(4);
  name[3].id = CORBA::string_dup(svc.c_str());
  try {
    CosNaming::NamingContext_var queryname = component->namingService->bind_new_context(name);      // pushNewest -> <<service name>>
  } catch (const CosNaming::NamingContext::AlreadyBound &) {
    // Fine, context already exists
  }

  name.length(5);
  name[4].id = CORBA::string_dup(T::identifier().c_str());
  try {
    component->namingService->bind(name,tm.in());                                                  // <<service name>> -> <<identifier T>>
  } catch (const CosNaming::NamingContext::AlreadyBound &) {
    std::cerr << "CommPattern (pushNewest): WARNING: service " << name[3].id << " in " << name[1].id << " rebound !" << std::endl;
    component->namingService->rebind(name,tm.in());
  }

  //
  //
  //
  serverReady = 1;

  mutexClientList.release();
}

//
// default destructor
//
template<class T> inline CHS::PushNewestServer<T>::~PushNewestServer(void) throw()
{
  PushNewestClientList *cptr;

  mutexClientList.acquire();
  //
  // since we now have the mutex, connects and disconnects from clients can not be
  // executed while modifying the server state to serverReady = 0. From now on any
  // tries to connect to this server are rejected
  //
  serverReady = 0;
 
  mutexClientList.release();

  //
  // - pending disconnects from clients can now get the mutexClientList and can
  //   therefore execute their disconnect
  // - since serverReady == 0, from now on all modifications on the list of clients
  //   are rejected inside the disconnect handler
  // - therefore one can step through the list of clients without requiring to hold
  //   the mutexClientList and can call disconnect at the client side
  // - the server has to call the client's disconnect outside the mutexClientList since
  //   the client calls back the server within the disconnect member function and the
  //   server handler requires the mutexClientList
  // - Concurrent calls to the client's disconnect member function from this server
  //   and from the client are not critical since disconnects are executed sequentially
  //   in the client due to the client's mutexConnection
  //

  while (subscriptions != 0) {
    cptr = subscriptions;
    try {
      cptr->client->serverInitiatedDisconnect();
      //
      // IMPORTANT HINT:
      //
      // It might happen that a client disconnects itself and connects to another server
      // just after we released the mutexClientList and before we call serverInitiatedDisconnect
      // here. We would now disconnect that client from its new server since that client has not
      // been removed from the client list due to serverready = 0. To avoid disconnecting the
      // client from its new server in that case, we should transmit the server CORBA reference
      // to the client with the server initiated disconnect and then check whether the client
      // is still connected to this server by comparing the CORBA object ids and only disconnect
      // it in case of equivalence.
      //
      // ### NOT YET IMPLEMENTED ! Christian Schlegel
      //
    } catch (const CORBA::Exception & e) {
      // do not rethrow, continue destruction

      // the client might have disappeared meanwhile since we can't hold the
      // mutexClientList here
    }
    CORBA::release(cptr->client);
    subscriptions = subscriptions->next;
    delete cptr;
  }

  // - since clients are now all disconnected, finally no more new subscribes are received

  // unbind at naming service
  try {

    CosNaming::Name name;
    name.length(5);
    name[0].id = CORBA::string_dup("orocos");
    name[1].id = CORBA::string_dup(component->getComponentName().c_str());
    name[2].id = CORBA::string_dup("pushNewest");
    name[3].id = CORBA::string_dup(service.c_str());
    name[4].id = CORBA::string_dup(T::identifier().c_str());

    component->namingService->unbind(name);
  } catch (const CosNaming::NamingContext::NotFound &) {
    std::cerr << "could not unbind PushNewestServer "
	 << component->getComponentName() << "/"
	 << service << " from naming service" << std::endl;
  } catch (const CORBA::Exception & e) {
    std::cerr << "CORBA Error while unbinding from Naming Service: ";
    CHS::operator<<(std::cerr, e) << std::endl;
    // do not rethrow, continue destruction of object
  }

  // ### delete/deactivate the corbaServant object (Christian Schlegel)

}

//
//
//
template<class T> CHS::StatusCode CHS::PushNewestServer<T>::put(const T& d) throw()
{
  PushNewestClientList *lptr;
  CHS::StatusCode result = CHS::SMART_OK;

  mutexClientList.acquire();
				   
  lptr = subscriptions;
  while (lptr != 0) {
    //
    // now call CORBA object to send new data
    //
    if (lptr->subscribed == 1) {
      try {
        CORBA::Any any;
        d.get(any);
        lptr->client->update(any);
      } catch (CORBA::SystemException &e) {
        result = CHS::SMART_ERROR_COMMUNICATION;
      }
    }
    lptr = lptr->next;
  }

  mutexClientList.release();

  return result;
}

