// --------------------------------------------------------------------------
//
//  Copyright (C) 2002/2004 Christian Schlegel
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Library".
//  It provides standardized patterns for communication between
//  different components.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//
//  (partly based on joint work with Robert Wörz)
//
// --------------------------------------------------------------------------

interface SmartPushTimedClientPattern
{
  oneway void update(in any user);
  // push newest data to the client
  // user : user data type from the answer communication object

  void serverInitiatedDisconnect();
  // clients are requested to disconnect themselves from the server
  // in case the server gets destroyed while there are still connected
  // clients

  void serverStateChange(in long active);
  // tell the client a state change at the server side stopped to started or vice versa
};

interface SmartPushTimedServerPattern
{
  void subscribe(in SmartPushTimedClientPattern client,in long cycle,out long active);
  // subscribe the push service
  // client : reference to the client object
  // cycle  : whole-numbered multiple of the server cycle to specify the individual update cycle
  // active : 0/1 to indicate whether server is stopped / started

  void unsubscribe(in SmartPushTimedClientPattern client);
  // unsubscribe the push service
  // client : reference to the client object

  long connect(in SmartPushTimedClientPattern client);
  // add client to the list of clients at server
  //
  // client : reference to the client object
  //
  // status : indicates whether connect has been accepted
  //    SMART_OK                 : everything ok
  //    SMART_SERVICEUNAVAILABLE : server in destruction and therefore didn't accept new connect

  void disconnect(in SmartPushTimedClientPattern client);
  // remove client from list of clients at server
  //
  // client : reference to the client object

  void getServerInfo(out double cycle,out long started);
  // provide the server cycle time [seconds] to the client and the state whether the server is
  // started or stopped
};

