// --------------------------------------------------------------------------
//
//  Copyright (C) 2002/2004 Christian Schlegel
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Library".
//  It provides standardized patterns for communication between
//  different components.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//
//  (partly based on joint work with Robert Wörz)
//
// --------------------------------------------------------------------------

interface SmartEventClientPattern
{
  void event(in any user,in long id);
  // event fires and therefore transmit event object to client
  // user : user event data
  // id   : activation id from client
  //
  // "oneway" is used to decouple event distribution from executing
  // an event handler at the client side. With "oneway" several
  // events can fire very fast without waiting until the handler
  // of the current firing has been finished at the client side.
  // Also works without "oneway" due to the carefully implemented
  // locking mechanisms.
  // ("oneway" removed since TAO currently shows critical behavior ...)

  void serverInitiatedDisconnect();
  // clients are requested to disconnect themselves from the server
  // in case the server gets destroyed while there are still connected
  // clients
};

interface SmartEventServerPattern
{
  void activate(in SmartEventClientPattern client,in long mode,in long id,in any parameter);
  // activate an event
  // client    : reference to the client object
  // mode      : activation mode single or continuous
  // id        : activation id from the client
  // parameter : event activation parameters

  void deactivate(in SmartEventClientPattern client,in long id);
  // deactivate an event
  // client : reference to the client object
  // id     : activation id from the client

  long connect(in SmartEventClientPattern client);
  // add client to list of clients at server
  //
  // client : reference to the client object
  //
  // status : indicates whether connect has been accepted
  //    SMART_OK                 : everything ok
  //    SMART_SERVICEUNAVAILABLE : server in destruction and therefore didn't accept new connect

  void disconnect(in SmartEventClientPattern client);
  // remove client from list of clients at server
  //
  // client : reference to the client object
};

