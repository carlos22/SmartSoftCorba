// --------------------------------------------------------------------------
//
//  Copyright (C) 2002/2004 Christian Schlegel
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Library".
//  It provides standardized patterns for communication between
//  different components.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//
//  (partly based on joint work with Robert Wörz)
//
// --------------------------------------------------------------------------

/////////////////////////////////////////////////////////////////////////
//
// client part of send template
//
/////////////////////////////////////////////////////////////////////////

//
// static handle method called by CORBA object
//
template<class C> void CHS::SendClient<C>::hndServDisc(void* ptr)
{
  SendClient<C> *lthis = (SendClient<C> *)ptr;

  lthis->disconnect();
}


//
// static internal interface methods used by wiring service
//
template<class C> CHS::StatusCode CHS::SendClient<C>::internalConnect(void *ptr,const std::string & srv, const std::string & svc)
{
  SendClient<C>* lthis = (SendClient<C> *)ptr;

  return lthis->connect(srv,svc);
}

template<class C> CHS::StatusCode CHS::SendClient<C>::internalDisconnect(void *ptr)
{
  SendClient<C>* lthis = (SendClient<C> *)ptr;

  return lthis->disconnect();
}

//
// default constructor
//
template<class C> inline CHS::SendClient<C>::SendClient(void) throw(CHS::SmartError)
{
  std::cerr << "CommPattern (sendClient): ERROR: Entered default constructor SendClient" << std::endl;

  throw(CHS::SmartError(CHS::SMART_ERROR,"CommPattern (sendClient): ERROR: Entered default constructor SendClient"));
}

//
// standard constructor port
//
template<class C> inline CHS::SendClient<C>::SendClient(SmartComponent *m,const std::string &port,CHS::WiringSlave *slave) throw(CHS::SmartError) 
{
  CHS::StatusCode status;

  // set the configuration flags appropriately
  statusConnected   = 0;
  statusManagedPort = 0;
  portname          = port;
  component         = m;
  wiringslave       = slave;

  // Create the CORBA client object
  corbaClient = new SendClient_impl((void *)this,&SendClient<C>::hndServDisc);

  // activate object to obtain the object reference, need not be registered at name service
  // since object reference is sent to server with every request
  h = corbaClient->_this();

  status = this->add(slave, port);

  if (status == CHS::SMART_PORTALREADYUSED) {
    //
    // port name already in use therefore throw exception
    //
    throw(CHS::SmartError(CHS::SMART_PORTALREADYUSED,"CommPattern (sendClient): ERROR: port name already in use"));
  } else if (status != SMART_OK) {
    //
    // throw exception since something went wrong
    //
    throw(CHS::SmartError(status,"CommPattern (sendClient): ERROR: something went wrong"));
  }
}

//
// standard constructor
//
template<class C> inline CHS::SendClient<C>::SendClient(SmartComponent *m) throw(CHS::SmartError)
{
  // set the configuration flags approriately
  statusConnected   = 0;
  statusManagedPort = 0;
  portname          = "";
  component         = m;
  wiringslave       = 0;

  // Create the CORBA client object
  corbaClient = new SendClient_impl((void *)this,&SendClient<C>::hndServDisc);

  // activate object to obtain the object reference, need not be registered at name service
  // since object reference is sent to server with every request
  h = corbaClient->_this();
}

//
// standard constructor already wired
//
template<class C> inline CHS::SendClient<C>::SendClient(SmartComponent *m,const std::string &srv,const std::string &svc) throw(CHS::SmartError)
{
  CHS::StatusCode status;
  int flag;

  // set the configuration flags appropriately
  statusConnected   = 0;
  statusManagedPort = 0;
  portname          = "";
  component         = m;
  wiringslave       = 0;

  // Create the CORBA client object
  corbaClient = new SendClient_impl((void *)this,&SendClient<C>::hndServDisc);

  // activate object to obtain the object reference, need not be registered at name service
  // since object reference is sent to server with every request
  h = corbaClient->_this();

  // Now connect to the server side of the send pattern
  std::cout << "Try to connect to (" << srv << ":send:" << svc << ") ..." << std::endl;

  do {
    status = this->connect(srv,svc);

    if (status == CHS::SMART_OK) {
      flag  = 1;
      std::cout << "... connected to (" << srv << ":send:" << svc << ")" << std::endl;
    } else if (status == CHS::SMART_SERVICEUNAVAILABLE) {
      std::cout << "CommPattern (sendClient): INFO: not yet found in naming service ..." << std::endl;
      sleep(1);
      flag  = 0;
    } else if (status == CHS::SMART_INCOMPATIBLESERVICE) {
      std::cout << "CommPattern (sendClient): ERROR: incompatible service ..." << std::endl;
      flag  = 1;
      throw(CHS::SmartError(status,"CommPattern (sendClient): ERROR: incompatible service"));
    } else {
      std::cout << "CommPattern (sendClient): ERROR: something went wrong ..." << std::endl;
      flag  = 1;
      throw(CHS::SmartError(status,"CommPattern (sendClient): ERROR: something went wrong"));
    }; 
  } while (flag == 0);
}

//
// destructor
//
template<class C> inline CHS::SendClient<C>::~SendClient(void) throw()
{
  //
  // remove port from managed set of ports and disconnect from server even if not
  // exposed as port or connected to a server since this is handled correctly inside
  // remove() and disconnect()
  //
  this->remove();
  this->disconnect();

  // client does not bind object at naming service,
  // therefore no unbind of objects needed here


  // ### delete/deactivate the corbaServant object (Christian Schlegel)
}

//
//
//
template<class C> CHS::StatusCode CHS::SendClient<C>::add(CHS::WiringSlave *slave, const std::string &port) throw()
{
  CHS::StatusCode status;

  mutexConnection.acquire();

  // first remove eventually valid registration
  this->remove();

  // now add client
  portname          = port;
  statusManagedPort = 1;

  wiringslave = slave;
  status      = this->wiringslave->add(port, (void*)this, &SendClient<C>::internalConnect, &SendClient<C>::internalDisconnect);

  mutexConnection.release();

  return status;
}

//
//
//
template<class C> CHS::StatusCode CHS::SendClient<C>::remove() throw()
{
  CHS::StatusCode status;

  mutexConnection.acquire();

  if (statusManagedPort == 1) {
    status = this->wiringslave->remove(portname);

    portname          = "";
    statusManagedPort = 0;
    
  } else {
    status = CHS::SMART_OK;
  }
  
  mutexConnection.release();

  return status;
}

//
//
//
template<class C> CHS::StatusCode CHS::SendClient<C>::connect(const std::string &srv, const std::string &svc) throw()
{
  CHS::StatusCode result;

  result = CHS::SMART_ERROR;

  mutexConnection.acquire();

  // first disconnect eventually valid connection
  this->disconnect();

  try {
    CosNaming::Name name;
    name.length(5);
    name[0].id = CORBA::string_dup("orocos");
    name[1].id = CORBA::string_dup(srv.c_str());
    name[2].id = CORBA::string_dup("send");
    name[3].id = CORBA::string_dup(svc.c_str());
    name[4].id = CORBA::string_dup(C::identifier().c_str());

    try {
      corbaServant = resolve_name<SmartSendServerPattern>(component->namingService.in(), name);
      result = CHS::SMART_OK;
    } catch (const CosNaming::NamingContext::NotFound &) {
      // not found in naming service
      result = CHS::SMART_SERVICEUNAVAILABLE;
    }
  } catch (const CORBA::Exception & e) {
    result = CHS::SMART_ERROR;
  }

  if (result == CHS::SMART_OK) {
    // now call server to introduce this client and to check whether the server really is
    // available or whether it is in the process of destruction
    try {
      result = static_cast<CHS::StatusCode>(corbaServant->connect(h));
    } catch (CORBA::SystemException &e) {
      //
      // it might be that the server is currently being destroyed and therefore any
      // CORBA exception is interpreted as a not available service
      //
      result = CHS::SMART_ERROR_COMMUNICATION;
    }

    if (result == CHS::SMART_OK) {
      // successfully connected to the server
      statusConnected = 1;
    }
  }

  mutexConnection.release();

  return result;
}

//
//
//
template<class C> CHS::StatusCode CHS::SendClient<C>::disconnect() throw()
{
  CHS::StatusCode result;

  mutexConnection.acquire();

  if (statusConnected == 0) {
    result = CHS::SMART_OK;
  } else {
    statusConnected = 0;

    //
    // now disconnect from server
    //
    result = CHS::SMART_OK;
    try {
      corbaServant->disconnect(h);
    } catch (CORBA::SystemException &e) {
      result = CHS::SMART_ERROR_COMMUNICATION;
    }
  }

  mutexConnection.release();

  return result;
}

//
//
//
template<class C> CHS::StatusCode CHS::SendClient<C>::blocking(const bool b) throw()
{
  return CHS::SMART_OK;
}

//
//
//
template<class C> CHS::StatusCode CHS::SendClient<C>::send(const C &c) throw()
{
  CHS::StatusCode result = CHS::SMART_OK;

  mutexConnection.acquire();

  if (statusConnected == 0) {
    // 
    // no connection available
    //
    result = CHS::SMART_DISCONNECTED;

    mutexConnection.release();

    return result;
  }

  //
  // now call CORBA object to send command message
  //
  result = CHS::SMART_OK;
  try {
    CORBA::Any any;
    c.get(any);
    corbaServant->command(any);
  } catch (CORBA::SystemException &e) {
    result = CHS::SMART_ERROR_COMMUNICATION;
  }

  mutexConnection.release();

  return result;
}


/////////////////////////////////////////////////////////////////////////
//
// server part of send template
//
/////////////////////////////////////////////////////////////////////////

//
// static handle method called by CORBA object
//
template<class C> void CHS::SendServer<C>::hndCmd(void *ptr, const CORBA::Any &user)
{
  SendServer<C>* lthis = (SendServer<C> *)ptr;

  C c;

  c.set(user);

  //
  // now call user provided handle method
  //
  lthis->handler.handleSend(c);
}

//
// static handle method called by CORBA object
//
template<class C> CHS::StatusCode CHS::SendServer<C>::hndCnct(void* ptr, const SmartSendClientPattern_ptr client)
{
  SendServer<C>* lthis = (SendServer<C> *)ptr;
  SendClientList* cptr;

  CHS::StatusCode result;

  lthis->mutexClientList.acquire();

  if (lthis->serverReady == 0) {
    //
    // don't accept any new clients since server is in process of destruction or not yet ready
    //
    result = CHS::SMART_SERVICEUNAVAILABLE;
  } else {
    //
    // make new client list entry
    //
    cptr           = new SendClientList;
    cptr->client   = SmartSendClientPattern::_duplicate(client);
    cptr->next     = lthis->clients;
    lthis->clients = cptr;

    result = CHS::SMART_OK;
  }

  lthis->mutexClientList.release();

  return result;
}

//
// static handle method called by CORBA object
//
template<class C> void CHS::SendServer<C>::hndDisc(void* ptr, const SmartSendClientPattern_ptr client)
{
  SendServer<C>* lthis  = (SendServer<C> *)ptr;
  SendClientList* cptr  = 0;
  SendClientList* hcptr = 0;

  lthis->mutexClientList.acquire();

  //
  // If serverReady == 0 then do not modify the list of clients anymore since
  // this list is stepped through by the destructor outside the mutexClientList
  // to disconnect all still connected clients. See comments in destructor why
  // no modifications are allowed then.
  //
  if (lthis->serverReady == 1) {
    //
    // remove client from list of clients
    //

    //
    // first remove entries from head as long as they match the corba client object
    //
    while ((lthis->clients != 0) && (client->_is_equivalent(lthis->clients->client))) {
      cptr = lthis->clients;
      lthis->clients = lthis->clients->next;
      CORBA::release(cptr->client);
      delete cptr;
    }

    //
    // now search through the rest of the list which might be empty already. If the
    // length is greater than zero, than the first element never matches and never
    // gets deleted
    //
    cptr = lthis->clients;
    if (cptr == 0) {
      // list contains no element anymore => ready
    } else {
      // list can now contain one or more elements with the first element matching never
      while (cptr->next != 0) {
        if (client->_is_equivalent(cptr->next->client)) {
          hcptr      = cptr->next;
          cptr->next = cptr->next->next;
          CORBA::release(hcptr->client);
          delete hcptr;
        } else {
          cptr = cptr->next;
        }
      }
    }
  } else {
    //
    // do nothing since server is in process of destruction
    //
  }

  lthis->mutexClientList.release();
}

//
// default constructor
//
template<class C> inline CHS::SendServer<C>::SendServer(void) throw(CHS::SmartError)
{
  std::cerr << "CommPattern (sendServer): ERROR: Entered default constructor SendServer" << std::endl;

  throw(CHS::SmartError(CHS::SMART_ERROR,"CommPattern (sendServer): ERROR: Entered default constructor"));
}

//
// standard constructor
//
template<class C> inline CHS::SendServer<C>::SendServer(SmartComponent *m, 
                                                        const std::string &svc, 
                                                        SendServerHandler<C> &hnd) throw(CHS::SmartError)
  : component(m),
    service(svc),
    handler(hnd),
    serverReady(0)
{
  mutexClientList.acquire();

  // reset list and other stuff
  clients = 0;

  // Create the CORBA server object
  corbaServant = new SendServer_impl((void *)this,&SendServer<C>::hndCmd,&SendServer<C>::hndCnct,&SendServer<C>::hndDisc);

  // activate object to obtain the object reference
  SmartSendServerPattern_var tm = corbaServant->_this ();

  CosNaming::Name name;                                                   // initialize name

  name.length(1);
  name[0].id = CORBA::string_dup("orocos");
  try {
    CosNaming::NamingContext_var orocos = component->namingService->bind_new_context(name);    // inc -> orocos
  } catch (const CosNaming::NamingContext::AlreadyBound &) {
    // Fine, context already exists
  }

  std::string server = component->getComponentName();
  name.length(2);
  name[1].id = CORBA::string_dup(server.c_str());
  try {
    CosNaming::NamingContext_var compname = component->namingService->bind_new_context(name);   // orocos -> <<component name>>
  } catch (const CosNaming::NamingContext::AlreadyBound &) {
    // Fine, context already exists
  }

  name.length(3);
  name[2].id = CORBA::string_dup("send");
  try {
    CosNaming::NamingContext_var sendname = component->namingService->bind_new_context(name); // << component name>> -> send
  } catch (const CosNaming::NamingContext::AlreadyBound &) {
    // Fine, context already exists
  }

  name.length(4);
  name[3].id = CORBA::string_dup(svc.c_str());
  try {
    CosNaming::NamingContext_var sendname = component->namingService->bind_new_context(name); // send -> <<service name>>
  } catch (const CosNaming::NamingContext::AlreadyBound &) {
    // Fine, context already exists
  }

  name.length(5);
  name[4].id = CORBA::string_dup(C::identifier().c_str());
  try {
    component->namingService->bind(name,tm.in());                                             // <<service name>> -> <<identifier C>>
  } catch (const CosNaming::NamingContext::AlreadyBound &) {
    std::cerr << "CommPattern (send): WARNING: service " << name[3].id << " in " << name[1].id << " rebound !" << std::endl;
    component->namingService->rebind(name,tm.in());
  }

  //
  //
  //
  serverReady = 1;

  mutexClientList.release();
}

//
// default destructor
//
template<class C> inline CHS::SendServer<C>::~SendServer(void) throw()
{
  SendClientList *cptr = 0;

  mutexClientList.acquire();
  //
  // since we now have the mutex, connects and disconnects from clients can not be
  // executed while modifying the server state to serverReady = 0. From now on any
  // tries to connect to this server are rejected
  //
  serverReady = 0;

  mutexClientList.release();

  //
  // - pending disconnects from clients can now get the mutexClientList and can
  //   therefore execute their disconnect
  // - since serverReady == 0, from now on all modifications on the list of clients
  //   are rejected inside the disconnect handler
  // - therefore one can step through the list of clients without requiring to hold
  //   the mutexClientList and can call disconnect at the client side
  // - the server has to call the client's disconnect outside the mutexClientList since
  //   the client calls back the server within the disconnect member function and the
  //   server handler requires the mutexClientList
  // - Concurrent calls to the client's disconnect member function from this server
  //   and from the client are not critical since disconnects are executed sequentially
  //   in the client due to the client's mutexConnection
  //

  while (clients != 0) {
    cptr = clients;
    try {
      cptr->client->serverInitiatedDisconnect();
      //
      // IMPORTANT HINT:
      //
      // It might happen that a client disconnects itself and connects to another server
      // just after we released the mutexClientList and before we call serverInitiatedDisconnect
      // here. We would now disconnect that client from its new server since that client has not
      // been removed from the client list due to serverready = 0. To avoid disconnecting the
      // client from its new server in that case, we should transmit the server CORBA reference
      // to the client with the server initiated disconnect and then check whether the client
      // is still connected to this server by comparing the CORBA object ids and only disconnect
      // it in case of equivalence.
      //
      // ### NOT YET IMPLEMENTED ! Christian Schlegel
      //
    } catch (const CORBA::Exception & e) {
      // do not rethrow, continue destruction

      // the client might have disappeared meanwhile since we can't hold the
      // mutexClientList here
    }
    CORBA::release(cptr->client);
    clients = clients->next;
    delete cptr;
  }

  // - since clients are now all disconnected, finally no more new requests are received
  // - it might be the case that however still some passive handlers are executed. Since
  //   their clients are however properly disconnected this does not matter anymore
  // - active handlers might try to provide answers after this server has been destroyed.
  //   It is the responsibility of the user to avoid this !

  // unbind at naming service
  try {

    CosNaming::Name name;
    name.length(5);
    name[0].id = CORBA::string_dup("orocos");
    name[1].id = CORBA::string_dup(component->getComponentName().c_str());
    name[2].id = CORBA::string_dup("send");
    name[3].id = CORBA::string_dup(service.c_str());
    name[4].id = CORBA::string_dup(C::identifier().c_str());

    component->namingService->unbind(name);
  } catch (const CosNaming::NamingContext::NotFound &) {
    std::cerr << "could not unbind SendServer "
         << component->getComponentName() << "/"
         << service << " from naming service" << std::endl;
  } catch (const CORBA::Exception & e) {
    std::cerr << "CORBA Error while unbinding from Naming Service: ";
    CHS::operator<<(std::cerr, e) << std::endl;
    // do not rethrow, continue destruction of object
  }

  // ### delete/deactivate the corbaServant object (Christian Schlegel)
}

