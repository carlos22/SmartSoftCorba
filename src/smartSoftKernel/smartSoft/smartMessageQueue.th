// --------------------------------------------------------------------------
//
//  Copyright (C) 2005 Pablo d'Angelo
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Library".
//  It provides standardized patterns for communication between
//  different components.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//
// --------------------------------------------------------------------------

namespace CHS {
template <class Item>
MessageQueue<Item>::MessageQueue()
  : sema(0)
{
}


template <class Item>
MessageQueue<Item>::~MessageQueue()
{
}


template <class Item>
void MessageQueue<Item>::enqueue(const Item & item)
{
  ACE_Guard<ACE_Mutex> g(mutex);

//std::cout << "ENQUEUE: PUSH ..." << std::endl;

  queue.push(item);

//std::cout << "ENQUEUE: ... PUSH" << std::endl;

  g.release();
  // notify other thread
  sema.release();
}


template <class Item>
Item MessageQueue<Item>::dequeue()
{
  sema.acquire();
  ACE_Guard<ACE_Mutex> g(mutex);

// ACE_Semaphore semaNew(1);
// std::cout << "SEMA NEW ..." << std::endl;
// std::cout << semaNew.tryacquire() << std::endl;
// std::cout << semaNew.release() << std::endl;
// std::cout << semaNew.tryacquire() << std::endl;
// std::cout << semaNew.tryacquire() << std::endl;
// std::cout << semaNew.tryacquire() << std::endl;
// std::cout << semaNew.tryacquire() << std::endl;
// std::cout << "SEMA NEW ... acquired" << std::endl;
// std::cout << "SEMA NEW ... acquired second" << std::endl;

// std::cout << "aus queue holen ..." << std::endl;
// sema.dump();

// Item i;
//if (queue.empty()) {
//std::cout << "QUEUE EMPTY" << std::endl;
//} else {
  Item i = queue.front();
//}
//std::cout << "aus queue geholt ..." << std::endl;

  queue.pop();

//std::cout << "aus queue oberstes Element lÃ¶schen" << std::endl;

  g.release();
  return i;
}

};

