This file is part of the "FAW Visualization Tools".
Its goal is offline and online visualization of 2d geometric data
and its export to various graphics file formats.

Send comments, suggestions, bugfixes, add-ons (documentation would be 
welcome!) etc. to kluge@faw.uni-ulm.de

What's in there?
~~~~~~~~~~~~~~~~
o A Qt drawing widget.
  There are three ways of having things drawn onto the widget.
  Firstly, this widget delegates drawing of its contents to clients according 
  to the observer design pattern. See the model_changed() slot and the 
  redraw(FawPainter&) signal.
  Secondly, you may register an object or a container of objects that provide
  a PaintMethod (see fawPainter.hh and fawDrawingWidget.hh) with the widget.
  Finally, there is rudimentary support for a scene graph. 
  The contents of the widget may be zoomed and scrolled by pressing ctrl 
  by pressing the left or right button and moving the mouse.

o A class hierarchy of painters.
  The abstract base class FawPainter defines the interface for drawing 
  operations that are implemented by three derived classes.
  The FawDrawingWidgetPainter is used for drawing onto a DrawingWidget.
  Use the FawFigPainter to export your drawings to xfig or various other
  graphics file formats (i.e., to those supported by fig2dev). The
  FawDrawingStoreReplayPainter may be used to buffer and replay drawing 
  operations. It can be converted to/from streams/strings and is suitable
  for remote drawing.

o A SmartSoft client application to visualize remote SmartSoft servers.
  See fawVisualizationClient* and fawVisualizationTestServer.cc

What can you do with that?
~~~~~~~~~~~~~~~~~~~~~~~~~~
o You can do metric offline drawing, as shown in the example 
  fawVisualizationTest.

o You can do online visualization as shown in the fawVisualizationClient
  example. Some of the servers provided by the SmartSoft distribution might
  offer corresponding services.
  To see the example, start "fawVisualizationTestServer" and
  "fawVisualizationClient -servers=fawVisualizationTestServer".

o You can easily export your drawing to graphics file formats.

What's next?
~~~~~~~~~~~~
Using a 2d scene graph structure similar to SGI's OpenInventor 3d scene
graphs, one can implement nice functions as
o picking/selecting objects: 
  click onto the widget, and get back information about the picked node 
  in the scene graph.
o faster redraws: maintaining convex hulls of the represented part of the
  drawing at each node of the scene graph allows to decide which parts 
  actually have to be redrawn
And perhaps some documentation would be nice...
