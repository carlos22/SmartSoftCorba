//--------------------------------------------------------------------------
//
//  Copyright (C) 2002 Boris Kluge
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "FAW Visualization Tools".
//  Its goal is offline and online visualization of 2d geometric data
//  and its export to various graphics file formats.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
//--------------------------------------------------------------------------

#ifndef FAW_DRAWING_COMM_DATA_HH
#define FAW_DRAWING_COMM_DATA_HH

#include <fawSimpleString.hh>

#include "fawDrawingStoreReplayPainter.hh"

class FawDrawingCommunicationData
{
  FawSimpleString _data;

public:
  static const char *const NAME = "FawDrwCommData";
  static const char *const FMT  = "{int,<char:1>}";

  inline FawDrawingCommunicationData() : _data("0") {}

  inline FawDrawingCommunicationData(const FawDrawingStoreReplayPainter &srp) 
  { 
    set(srp); 
  }

  inline void print(ostream &os = cout) const 
  { 
    os << "FawDrawingCommunicationData(" << _data << ")" << endl; 
  }

  inline void clear()
  {
    _data = "0";
  }

  inline void set(const FawDrawingStoreReplayPainter &painter) 
  {
    ostrstream os;
    painter.save(os);
    _data.set(os);
  }

  inline void get(FawDrawingStoreReplayPainter &painter) const 
  { 
    painter.load(_data); 
  }

  inline string get() const 
  { 
    return _data; 
  }
  
  inline void save(ostream &os) const
  {
    os << _data;
  }

  inline void replay(FawPainter &painter) const
  {
    FawDrawingStoreReplayPainter::replay(_data, painter);
  }
};

inline ostream &operator<<(ostream &os, const FawDrawingCommunicationData &u)
{
  u.print(os); return os;
}

#endif
