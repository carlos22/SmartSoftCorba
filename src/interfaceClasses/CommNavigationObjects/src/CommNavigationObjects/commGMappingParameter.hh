//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------


// --------------------------------------------------------------------------
//
//  Copyright (C) 2011 Christian Schlegel, Matthias Lutz
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#ifndef _COMM_COMMNAVIGATIONOBJECTS_COMMGMAPPINGPARAMETER_HH
#define _COMM_COMMNAVIGATIONOBJECTS_COMMGMAPPINGPARAMETER_HH

#ifndef LISP_SEPARATOR
#define LISP_SEPARATOR " ()\"\n"
#define LISP_STRING    1000
#endif

#include <string>

// include files of classes

// include header-files of included communication objects

// include enums
#include "CommNavigationObjects/gen/enumGMappingTagType.hh"

// include client-side file generated by IDL compiler
#include "CommNavigationObjects/gen/smartCommGMappingParameterC.hh"

namespace CommNavigationObjects
{

class CommGMappingParameter
{
protected:
	CommNavigationObjectsIDL::CommGMappingParameter idl_CommGMappingParameter;

public:
	CommGMappingParameter()
	{
		//idl_CommGMappingParameter.tag = 0;
		idl_CommGMappingParameter.parameter1 = 0;
		idl_CommGMappingParameter.parameter2 = 0;
		idl_CommGMappingParameter.parameter3 = 0;
		idl_CommGMappingParameter.parameter4 = 0;
		idl_CommGMappingParameter.parameter5 = 0;
		idl_CommGMappingParameter.parameter6 = "";
	}

	CommGMappingParameter(
			const CommNavigationObjectsIDL::CommGMappingParameter &obj) :
		idl_CommGMappingParameter(obj)
	{
	}

	operator CommNavigationObjectsIDL::CommGMappingParameter() const
	{
		return idl_CommGMappingParameter;
	}

	virtual ~CommGMappingParameter()
	{
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);

	static inline std::string identifier(void)
	{
		return "CommNavigationObjects::CommGMappingParameter";
	}

	//
	// user interfaces

	/// extract all relevant parameters from the communication class of the map parameter class
	void get(CommNavigationObjects::GMappingTagType &tag,int &value1,int &value2,int &value3,int &value4,int &value5, std::string &value6) const;

	/// sets all relevant parameters to the communication class of the map parameter class
	int set(std::string& inString);

};

inline void CommGMappingParameter::get(CommNavigationObjects::GMappingTagType &tag,int &value1,int &value2,int &value3,int &value4,int &value5, std::string &value6) const
{
  tag = (GMappingTagType)idl_CommGMappingParameter.tag;
  value1 = idl_CommGMappingParameter.parameter1;
  value2 = idl_CommGMappingParameter.parameter2;
  value3 = idl_CommGMappingParameter.parameter3;
  value4 = idl_CommGMappingParameter.parameter4;
  value5 = idl_CommGMappingParameter.parameter5;
  value6 = idl_CommGMappingParameter.parameter6;
}

inline int CommGMappingParameter::set(std::string& inString)
{
  // ----------------------------------------------------
  //
  // handle tag to mapper
  //
  // input
  //   SAVEMAP ?number
  // output
  //   0  everything ok
  //  -1  format error occured
  // ----------------------------------------------------

  char *param = (char *)NULL;
  //char *parse = (char *)NULL;
  char *input = (char *)NULL;

  int  error;
  //int  i;

  input = (char *)inString.c_str();
  error = 0;

  do
  {
    param = strsep(&input,LISP_SEPARATOR);
  } while ((param != NULL) && (strlen(param)==0));


  if (strcasecmp(param,"SAVEMAP")==0)
  {
    // --------------------
    // save current map
    // --------------------
	  idl_CommGMappingParameter.tag = CommNavigationObjectsIDL::LITERAL_SAVE_MAP;

    if (error == 0)
    {
      do
      {
        param = strsep(&input,LISP_SEPARATOR);
      } while ((param != NULL) && (strlen(param)==0));

      char* tmp = (char*)NULL;
      tmp = (char *)calloc(LISP_STRING,sizeof(char));
      if ((param != NULL) && (sscanf(param,"%s",tmp)==1))
      {
        // everything ok
        error = 0;
        std::string str(tmp);

        idl_CommGMappingParameter.parameter6 = str.c_str();
      }
      else
      {
        error = -1;
      }
    }

  }
  else
  {
    // --------------------
    // got garbage
    // --------------------
    error = -1;
  }

  return error;
}



}
#endif
