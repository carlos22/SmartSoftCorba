//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _COMMNAVIGATIONOBJECTS_ENUM_HH_MAPPERTAGTYPE
#define _COMMNAVIGATIONOBJECTS_ENUM_HH_MAPPERTAGTYPE

#include <CommNavigationObjects/gen/enumMapperTagTypeC.hh>
#include <string>
#include <ostream>

namespace CommNavigationObjects
{

class MapperTagType
{
public:
	enum literal
	{

		MAPPER_CUR_EMPTY = CommNavigationObjectsIDL::LITERAL_MAPPER_CUR_EMPTY,

		MAPPER_CUR_LOAD = CommNavigationObjectsIDL::LITERAL_MAPPER_CUR_LOAD,

		MAPPER_CUR_LOAD_LTM = CommNavigationObjectsIDL::LITERAL_MAPPER_CUR_LOAD_LTM,

		MAPPER_CUR_LTM = CommNavigationObjectsIDL::LITERAL_MAPPER_CUR_LTM,

		MAPPER_CUR_PARAMETER = CommNavigationObjectsIDL::LITERAL_MAPPER_CUR_PARAMETER,

		MAPPER_CUR_SAVE = CommNavigationObjectsIDL::LITERAL_MAPPER_CUR_SAVE,

		MAPPER_CUR_SAVE_XPM = CommNavigationObjectsIDL::LITERAL_MAPPER_CUR_SAVE_XPM,

		MAPPER_LTM_INITIALIZE = CommNavigationObjectsIDL::LITERAL_MAPPER_LTM_INITIALIZE,

		MAPPER_LTM_LOAD = CommNavigationObjectsIDL::LITERAL_MAPPER_LTM_LOAD,

		MAPPER_LTM_LOAD_YAML = CommNavigationObjectsIDL::LITERAL_MAPPER_LTM_LOAD_YAML,

		MAPPER_LTM_PARAMETER = CommNavigationObjectsIDL::LITERAL_MAPPER_LTM_PARAMETER,

		MAPPER_LTM_SAVE = CommNavigationObjectsIDL::LITERAL_MAPPER_LTM_SAVE,

		MAPPER_LTM_SAVE_XPM = CommNavigationObjectsIDL::LITERAL_MAPPER_LTM_SAVE_XPM,

		MAPPER_LTM_SAVE_YAML_PGM = CommNavigationObjectsIDL::LITERAL_MAPPER_LTM_SAVE_YAML_PGM,

		MAPPER_LTM_SAVE_YAML_PPM = CommNavigationObjectsIDL::LITERAL_MAPPER_LTM_SAVE_YAML_PPM
	};

	MapperTagType()
	{
	}

	MapperTagType(literal t)
	{
		value = t;
	}

	operator literal()
	{
		return value;
	}

	MapperTagType(CommNavigationObjectsIDL::ENUM_MapperTagType t)
	{
		value = (literal) t;
	}

	bool operator ==(MapperTagType& t)
	{
		return this->value == t.value;
	}

	CommNavigationObjectsIDL::ENUM_MapperTagType get_value_idl()
	{
		return (CommNavigationObjectsIDL::ENUM_MapperTagType) value;
	}

	literal get_value() const
	{
		return value;
	}

	std::string get_string() const
	{
		switch (value)
		{

		case MAPPER_CUR_EMPTY:
			return "MapperTagType::MAPPER_CUR_EMPTY";
			break;

		case MAPPER_CUR_LOAD:
			return "MapperTagType::MAPPER_CUR_LOAD";
			break;

		case MAPPER_CUR_LOAD_LTM:
			return "MapperTagType::MAPPER_CUR_LOAD_LTM";
			break;

		case MAPPER_CUR_LTM:
			return "MapperTagType::MAPPER_CUR_LTM";
			break;

		case MAPPER_CUR_PARAMETER:
			return "MapperTagType::MAPPER_CUR_PARAMETER";
			break;

		case MAPPER_CUR_SAVE:
			return "MapperTagType::MAPPER_CUR_SAVE";
			break;

		case MAPPER_CUR_SAVE_XPM:
			return "MapperTagType::MAPPER_CUR_SAVE_XPM";
			break;

		case MAPPER_LTM_INITIALIZE:
			return "MapperTagType::MAPPER_LTM_INITIALIZE";
			break;

		case MAPPER_LTM_LOAD:
			return "MapperTagType::MAPPER_LTM_LOAD";
			break;

		case MAPPER_LTM_LOAD_YAML:
			return "MapperTagType::MAPPER_LTM_LOAD_YAML";
			break;

		case MAPPER_LTM_PARAMETER:
			return "MapperTagType::MAPPER_LTM_PARAMETER";
			break;

		case MAPPER_LTM_SAVE:
			return "MapperTagType::MAPPER_LTM_SAVE";
			break;

		case MAPPER_LTM_SAVE_XPM:
			return "MapperTagType::MAPPER_LTM_SAVE_XPM";
			break;

		case MAPPER_LTM_SAVE_YAML_PGM:
			return "MapperTagType::MAPPER_LTM_SAVE_YAML_PGM";
			break;

		case MAPPER_LTM_SAVE_YAML_PPM:
			return "MapperTagType::MAPPER_LTM_SAVE_YAML_PPM";
			break;

		default:
			return "UNKNOWN!";
			break;
		}
	}

private:
	literal value;
};

inline std::ostream &operator<<(std::ostream &os, const MapperTagType &e)
{
	os << e.get_string();
	return os;
}

}
#endif
