//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _COMMNAVIGATIONOBJECTS_ENUM_HH_CDLTAGTYPE
#define _COMMNAVIGATIONOBJECTS_ENUM_HH_CDLTAGTYPE

#include <CommNavigationObjects/gen/enumCdlTagTypeC.hh>
#include <string>
#include <ostream>

namespace CommNavigationObjects
{

class CdlTagType
{
public:
	enum literal
	{

		CDL_ABSOLUTE = CommNavigationObjectsIDL::LITERAL_CDL_ABSOLUTE,

		CDL_ANGLE_ABSOLUTE = CommNavigationObjectsIDL::LITERAL_CDL_ANGLE_ABSOLUTE,

		CDL_ANGLE_RELATIVE = CommNavigationObjectsIDL::LITERAL_CDL_ANGLE_RELATIVE,

		CDL_APPROACH = CommNavigationObjectsIDL::LITERAL_CDL_APPROACH,

		CDL_APPROACH_FLAT_SURF = CommNavigationObjectsIDL::LITERAL_CDL_APPROACH_FLAT_SURF,

		CDL_APPROACH_HALT = CommNavigationObjectsIDL::LITERAL_CDL_APPROACH_HALT,

		CDL_BACKWARD = CommNavigationObjectsIDL::LITERAL_CDL_BACKWARD,

		CDL_DEFAULT_LOOKUP = CommNavigationObjectsIDL::LITERAL_CDL_DEFAULT_LOOKUP,

		CDL_FOLLOW = CommNavigationObjectsIDL::LITERAL_CDL_FOLLOW,

		CDL_FREE_BEHAVIOR = CommNavigationObjectsIDL::LITERAL_CDL_FREE_BEHAVIOR,

		CDL_JOYSTICK = CommNavigationObjectsIDL::LITERAL_CDL_JOYSTICK,

		CDL_NEUTRAL = CommNavigationObjectsIDL::LITERAL_CDL_NEUTRAL,

		CDL_NO_FREE_BEHAVIOR = CommNavigationObjectsIDL::LITERAL_CDL_NO_FREE_BEHAVIOR,

		CDL_PERSON = CommNavigationObjectsIDL::LITERAL_CDL_PERSON,

		CDL_PLANNER = CommNavigationObjectsIDL::LITERAL_CDL_PLANNER,

		CDL_REACTIVE = CommNavigationObjectsIDL::LITERAL_CDL_REACTIVE,

		CDL_ROTATE = CommNavigationObjectsIDL::LITERAL_CDL_ROTATE,

		CDL_SAVED = CommNavigationObjectsIDL::LITERAL_CDL_SAVED,

		CDL_SAVE_CURRENT_POS = CommNavigationObjectsIDL::LITERAL_CDL_SAVE_CURRENT_POS,

		CDL_SECOND_LOOKUP = CommNavigationObjectsIDL::LITERAL_CDL_SECOND_LOOKUP,

		CDL_SET_APPROACH_DIST = CommNavigationObjectsIDL::LITERAL_CDL_SET_APPROACH_DIST,

		CDL_SET_FREE_BEHAVIOR = CommNavigationObjectsIDL::LITERAL_CDL_SET_FREE_BEHAVIOR,

		CDL_SET_GOAL = CommNavigationObjectsIDL::LITERAL_CDL_SET_GOAL,

		CDL_SET_ID = CommNavigationObjectsIDL::LITERAL_CDL_SET_ID,

		CDL_SET_LOOKUP_TABLE = CommNavigationObjectsIDL::LITERAL_CDL_SET_LOOKUP_TABLE,

		CDL_SET_MODE_GOAL = CommNavigationObjectsIDL::LITERAL_CDL_SET_MODE_GOAL,

		CDL_SET_MODE_STRATEGY = CommNavigationObjectsIDL::LITERAL_CDL_SET_MODE_STRATEGY,

		CDL_SET_ROT_VELOCITY = CommNavigationObjectsIDL::LITERAL_CDL_SET_ROT_VELOCITY,

		CDL_SET_SAFETY_CLEARANCE = CommNavigationObjectsIDL::LITERAL_CDL_SET_SAFETY_CLEARANCE,

		CDL_SET_TRANS_VELOCITY = CommNavigationObjectsIDL::LITERAL_CDL_SET_TRANS_VELOCITY,

		CDL_TURN = CommNavigationObjectsIDL::LITERAL_CDL_TURN
	};

	CdlTagType()
	{
	}

	CdlTagType(literal t)
	{
		value = t;
	}

	operator literal()
	{
		return value;
	}

	CdlTagType(CommNavigationObjectsIDL::ENUM_CdlTagType t)
	{
		value = (literal) t;
	}

	bool operator ==(CdlTagType& t)
	{
		return this->value == t.value;
	}

	CommNavigationObjectsIDL::ENUM_CdlTagType get_value_idl()
	{
		return (CommNavigationObjectsIDL::ENUM_CdlTagType) value;
	}

	literal get_value() const
	{
		return value;
	}

	std::string get_string() const
	{
		switch (value)
		{

		case CDL_ABSOLUTE:
			return "CdlTagType::CDL_ABSOLUTE";
			break;

		case CDL_ANGLE_ABSOLUTE:
			return "CdlTagType::CDL_ANGLE_ABSOLUTE";
			break;

		case CDL_ANGLE_RELATIVE:
			return "CdlTagType::CDL_ANGLE_RELATIVE";
			break;

		case CDL_APPROACH:
			return "CdlTagType::CDL_APPROACH";
			break;

		case CDL_APPROACH_FLAT_SURF:
			return "CdlTagType::CDL_APPROACH_FLAT_SURF";
			break;

		case CDL_APPROACH_HALT:
			return "CdlTagType::CDL_APPROACH_HALT";
			break;

		case CDL_BACKWARD:
			return "CdlTagType::CDL_BACKWARD";
			break;

		case CDL_DEFAULT_LOOKUP:
			return "CdlTagType::CDL_DEFAULT_LOOKUP";
			break;

		case CDL_FOLLOW:
			return "CdlTagType::CDL_FOLLOW";
			break;

		case CDL_FREE_BEHAVIOR:
			return "CdlTagType::CDL_FREE_BEHAVIOR";
			break;

		case CDL_JOYSTICK:
			return "CdlTagType::CDL_JOYSTICK";
			break;

		case CDL_NEUTRAL:
			return "CdlTagType::CDL_NEUTRAL";
			break;

		case CDL_NO_FREE_BEHAVIOR:
			return "CdlTagType::CDL_NO_FREE_BEHAVIOR";
			break;

		case CDL_PERSON:
			return "CdlTagType::CDL_PERSON";
			break;

		case CDL_PLANNER:
			return "CdlTagType::CDL_PLANNER";
			break;

		case CDL_REACTIVE:
			return "CdlTagType::CDL_REACTIVE";
			break;

		case CDL_ROTATE:
			return "CdlTagType::CDL_ROTATE";
			break;

		case CDL_SAVED:
			return "CdlTagType::CDL_SAVED";
			break;

		case CDL_SAVE_CURRENT_POS:
			return "CdlTagType::CDL_SAVE_CURRENT_POS";
			break;

		case CDL_SECOND_LOOKUP:
			return "CdlTagType::CDL_SECOND_LOOKUP";
			break;

		case CDL_SET_APPROACH_DIST:
			return "CdlTagType::CDL_SET_APPROACH_DIST";
			break;

		case CDL_SET_FREE_BEHAVIOR:
			return "CdlTagType::CDL_SET_FREE_BEHAVIOR";
			break;

		case CDL_SET_GOAL:
			return "CdlTagType::CDL_SET_GOAL";
			break;

		case CDL_SET_ID:
			return "CdlTagType::CDL_SET_ID";
			break;

		case CDL_SET_LOOKUP_TABLE:
			return "CdlTagType::CDL_SET_LOOKUP_TABLE";
			break;

		case CDL_SET_MODE_GOAL:
			return "CdlTagType::CDL_SET_MODE_GOAL";
			break;

		case CDL_SET_MODE_STRATEGY:
			return "CdlTagType::CDL_SET_MODE_STRATEGY";
			break;

		case CDL_SET_ROT_VELOCITY:
			return "CdlTagType::CDL_SET_ROT_VELOCITY";
			break;

		case CDL_SET_SAFETY_CLEARANCE:
			return "CdlTagType::CDL_SET_SAFETY_CLEARANCE";
			break;

		case CDL_SET_TRANS_VELOCITY:
			return "CdlTagType::CDL_SET_TRANS_VELOCITY";
			break;

		case CDL_TURN:
			return "CdlTagType::CDL_TURN";
			break;

		default:
			return "UNKNOWN!";
			break;
		}
	}

private:
	literal value;
};

inline std::ostream &operator<<(std::ostream &os, const CdlTagType &e)
{
	os << e.get_string();
	return os;
}

}
#endif
