//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
//  Copyright (C) 2008 Christian Schlegel, Andreas Steck
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#ifndef _COMM_COMMNAVIGATIONOBJECTS_COMMPLANNERPARAMETER_HH
#define _COMM_COMMNAVIGATIONOBJECTS_COMMPLANNERPARAMETER_HH

#include <string>
#include <iostream>
// include files of classes

// include header-files of included communication objects

// include enums
#include "CommNavigationObjects/gen/enumPlannerTagType.hh"

// include client-side file generated by IDL compiler
#include "CommNavigationObjects/gen/smartCommPlannerParameterC.hh"

#ifndef LISP_SEPARATOR
#define LISP_SEPARATOR " ()\"\n"
#define LISP_STRING    1000
#endif

namespace CommNavigationObjects
{

class CommPlannerParameter
{
protected:
	CommNavigationObjectsIDL::CommPlannerParameter idl_CommPlannerParameter;

public:
	CommPlannerParameter()
	{
		  //cmd.tag = 0;
		idl_CommPlannerParameter.parameter1 = 0;
		idl_CommPlannerParameter.parameter2 = 0;
		idl_CommPlannerParameter.parameter3 = 0;
		idl_CommPlannerParameter.parameter4 = 0;
	}

	CommPlannerParameter(
			const CommNavigationObjectsIDL::CommPlannerParameter &obj) :
		idl_CommPlannerParameter(obj)
	{
	}

	virtual ~CommPlannerParameter()
	{
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);

	inline const CommNavigationObjectsIDL::CommPlannerParameter &get() const
	{
		return idl_CommPlannerParameter;
	}

	inline void set(const CommNavigationObjectsIDL::CommPlannerParameter &obj)
	{
		idl_CommPlannerParameter = obj;
	}

	static inline std::string identifier(void)
	{
		return "CommNavigationObjects::CommPlannerParameter";
	}

	//
	// user interfaces
	/// extracts all relevant parameters from the communication class of the planner parameter class
	void get(PlannerTagType &tag,int &value1,int &value2,int &value3,int &value4) const;

	/// sets all relevant parameters to the communication class of the planner parameter class
	int set(std::string& inString);
};

//
// Implementation
//


inline void CommPlannerParameter::get(CommNavigationObjects::PlannerTagType &tag,int &value1,int &value2,int &value3,int &value4) const
{
  tag = idl_CommPlannerParameter.tag;
  value1 = idl_CommPlannerParameter.parameter1;
  value2 = idl_CommPlannerParameter.parameter2;
  value3 = idl_CommPlannerParameter.parameter3;
  value4 = idl_CommPlannerParameter.parameter4;
}

inline int CommPlannerParameter::set(std::string& inString)
{
  // ----------------------------------------------------
  //
  // handle tag to path planner
  //
  // input
  //   ID ?id
  //   DELETEGOAL
  //   SETDESTINATIONLINE ?x1 ?y1 ?x2 ?y2
  //   SETDESTINATIONCIRCLE ?x ?y ?r
  // output
  //   0  everything ok
  //  -1  format error occured
  //
  // ----------------------------------------------------


  char *param = (char *)NULL;
  char *parse = (char *)NULL;
  char *input = (char *)NULL;

  int  error;
  int  i;

  input = (char *)inString.c_str();
  error = 0;

  do {
    param = strsep(&input,LISP_SEPARATOR);
  } while ((param != NULL) && (strlen(param)==0));

  if (strcasecmp(param,"ID")==0) {
    // --------------------
    // set id
    // --------------------
    do {
      param = strsep(&input,LISP_SEPARATOR);
    } while ((param != NULL) && (strlen(param)==0));
    if (sscanf(param,"%d",&idl_CommPlannerParameter.parameter1)==1) {
      idl_CommPlannerParameter.tag = CommNavigationObjectsIDL::LITERAL_PLANNER_ID;
      error       = 0;
    } else {
      error = -1;
    }
  } else if (strcasecmp(param,"DELETEGOAL")==0) {
    // --------------------
    // delete all specified goals in path planner
    // --------------------
    idl_CommPlannerParameter.tag = CommNavigationObjectsIDL::LITERAL_PLANNER_DELETE_GOAL;
    error       = 0;
  } else if (strcasecmp(param,"SETDESTINATIONLINE")==0) {
    // --------------------
    // set destination line in path planner
    // --------------------
    parse = (char *)calloc(LISP_STRING,sizeof(char));
    for (i=0; i<4; i++) {
      do {
        param = strsep(&input,LISP_SEPARATOR);
      } while ((param != NULL) && (strlen(param)==0));
      parse = strcat(parse,param);
      parse = strcat(parse," ");
    }
    if (sscanf(parse,"%d %d %d %d",&idl_CommPlannerParameter.parameter1,
                                   &idl_CommPlannerParameter.parameter2,
                                   &idl_CommPlannerParameter.parameter3,
                                   &idl_CommPlannerParameter.parameter4)==4) {
      idl_CommPlannerParameter.tag = CommNavigationObjectsIDL::LITERAL_PLANNER_SET_DESTINATION_LINE;
      error       = 0;
    } else {
      error = -1;
    }
    free(parse);
  } else if (strcasecmp(param,"SETDESTINATIONCIRCLE")==0) {
    // --------------------
    // set destination circle in path planner
    // --------------------
    parse = (char *)calloc(LISP_STRING,sizeof(char));

    for (i=0; i<3; i++) {
      do {
        param = strsep(&input,LISP_SEPARATOR);
      } while ((param != NULL) && (strlen(param)==0));
      parse = strcat(parse,param);
      parse = strcat(parse," ");
    }
    if (sscanf(parse,"%d %d %d",&idl_CommPlannerParameter.parameter1,
                                &idl_CommPlannerParameter.parameter2,
                                &idl_CommPlannerParameter.parameter3)==3) {
    	idl_CommPlannerParameter.tag = CommNavigationObjectsIDL::LITERAL_PLANNER_SET_DESTINATION_CIRCLE;
      error       = 0;
    } else {
      error = -1;
    }
    free(parse);
  } else {
    // --------------------
    // got garbage
    // --------------------
    error = -1;
  }

  return error;
}


}
#endif
