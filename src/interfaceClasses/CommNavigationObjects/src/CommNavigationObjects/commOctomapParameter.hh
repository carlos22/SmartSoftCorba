//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

#ifndef _COMM_COMMNAVIGATIONOBJECTS_COMMOCTOMAPPARAMETER_HH
#define _COMM_COMMNAVIGATIONOBJECTS_COMMOCTOMAPPARAMETER_HH

#include <string>

// include files of classes

// include header-files of included communication objects

// include enums
#include <CommNavigationObjects/gen/enumOctomapTagType.hh>

// include client-side file generated by IDL compiler
#include "CommNavigationObjects/gen/smartCommOctomapParameterC.hh"

#ifndef LISP_SEPARATOR
#define LISP_SEPARATOR " ()\"\n"
#define LISP_STRING    1000
#endif

namespace CommNavigationObjects
{

class CommOctomapParameter
{
protected:
	CommNavigationObjectsIDL::CommOctomapParameter idl_CommOctomapParameter;

public:
	CommOctomapParameter()
	{
	}

	CommOctomapParameter(
			const CommNavigationObjectsIDL::CommOctomapParameter &obj) :
		idl_CommOctomapParameter(obj)
	{
	}

	operator CommNavigationObjectsIDL::CommOctomapParameter() const
	{
		return idl_CommOctomapParameter;
	}

	virtual ~CommOctomapParameter()
	{
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);


	static inline std::string identifier(void)
	{
		return "CommNavigationObjects::CommOctomapParameter";
	}

	//
	// user interfaces
	inline void get(CommNavigationObjects::OctomapTagType &tag)	const
	{
		tag = (CommNavigationObjects::OctomapTagType) idl_CommOctomapParameter.tag;
	}

    inline int set(std::string& inString)
    {
	// ----------------------------------------------------
		//
		// handle tag to CommOctomapParameter
		//
		// input
		//   RESET
		// output
		//   0  everything ok
		//  -1  format error occured
		// ----------------------------------------------------

		char *param = (char *) NULL;
		char *input = (char *) NULL;

		int error;

		input = (char *) inString.c_str();
		error = 0;

		do {
			param = strsep(&input, LISP_SEPARATOR);
		} while ((param != NULL) && (strlen(param) == 0));

		if (strcasecmp(param, "RESET") == 0) {
			// --------------------
			// Reset Octomap
			// --------------------
			idl_CommOctomapParameter.tag = CommNavigationObjectsIDL::LITERAL_RESET;
		} else {
			// --------------------
			// got garbage
			// --------------------
			error = -1;
		}
		return error;
	}


};

}
#endif
