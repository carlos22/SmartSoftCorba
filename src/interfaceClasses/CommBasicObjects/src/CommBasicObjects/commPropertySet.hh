//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2005 Pablo d'Angelo, Boris Kluge
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Library".
//  It provides standardized patterns for communication between
//  different components.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//
//
// --------------------------------------------------------------------------


#ifndef _COMM_COMMBASICOBJECTS_COMMPROPERTYSET_HH
#define _COMM_COMMBASICOBJECTS_COMMPROPERTYSET_HH

#include <string>

// include files of classes
#include <CommBasicObjects/gen/structPropertyItemEntryC.hh>
#include <CommBasicObjects/gen/structPropertySetEntryC.hh>

// include header-files of included communication objects

// include enums


// include client-side file generated by IDL compiler
#include "CommBasicObjects/gen/smartCommPropertySetC.hh"

#include "smartPropertySet.hh"

namespace CommBasicObjects
{

/** A transmittable property set
 *
 */
class CommPropertySet : public Smart::PropertySet
{
protected:
	CommBasicObjectsIDL::CommPropertySet idl_CommPropertySet;

public:
	virtual ~CommPropertySet()
	{
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);

	inline const CommBasicObjectsIDL::CommPropertySet &get() const
	{
		return idl_CommPropertySet;
	}

	inline void set(const CommBasicObjectsIDL::CommPropertySet &obj)
	{
		idl_CommPropertySet = obj;
	}

	static inline std::string identifier(void)
	{
		return "CommBasicObjects::CommPropertySet";
	}

	//
	// user interfaces
	  /** ctor */
	  inline CommPropertySet()
	  : PropertySet()
	  {
	  }

	  inline CommPropertySet(const PropertySet &source)
	  :   PropertySet(source)
	  {
	  }

	  inline CommPropertySet &operator=(const PropertySet &source)
	  {
		PropertySet::operator=(source);
	    return *this;
	  }

	  template<class Value>
	  inline void set(const Key &key, const Value &value)
	  {
		  PropertySet::set(key,value);
	  }



};

}
#endif
