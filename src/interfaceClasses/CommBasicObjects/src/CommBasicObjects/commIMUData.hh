//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Copyright (C) 2009 Christian Schlegel, Florian Poppa
//
//        schlegel@hs-ulm.de
//        poppa@hs-ulm.de
//
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public License
//  as published by the Free Software Foundation; either version 2.1
//  of the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public License along
//  with this library; if not, write to the Free Software Foundation, Inc.,
//  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
//--------------------------------------------------------------------------

#ifndef _COMM_COMMBASICOBJECTS_COMMIMUDATA_HH
#define _COMM_COMMBASICOBJECTS_COMMIMUDATA_HH

#include <string>
#include <iostream>

// include files of classes

// include header-files of included communication objects

// include enums


// include client-side file generated by IDL compiler
#include "CommBasicObjects/gen/smartCommIMUDataC.hh"

namespace CommBasicObjects
{

class CommIMUData
{
protected:
	CommBasicObjectsIDL::CommIMUData idl_CommIMUData;

public:
	CommIMUData()
	{
	}

	CommIMUData(const CommBasicObjectsIDL::CommIMUData &obj) :
		idl_CommIMUData(obj)
	{
	}

	virtual ~CommIMUData()
	{
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);

	inline const CommBasicObjectsIDL::CommIMUData &get() const
	{
		return idl_CommIMUData;
	}

	inline void set(const CommBasicObjectsIDL::CommIMUData &obj)
	{
		idl_CommIMUData = obj;
	}

	static inline std::string identifier(void)
	{
		return "CommBasicObjects::CommIMUData";
	}

	//
	// user interfaces
	CommIMUData(const CommIMUData &imuData)
	{
		idl_CommIMUData = imuData.idl_CommIMUData;
	}

	  // timestamp
	inline void get_timestamp(unsigned short &timestamp) const {
		timestamp = idl_CommIMUData.timestamp;
	}
	;
	inline void set_timestamp(const unsigned short &timestamp) {
		idl_CommIMUData.timestamp = timestamp;
	}
	;

	// temperature
	inline void get_temperature(double &temperature) const {
		temperature = idl_CommIMUData.temperature;
	}
	;
	inline void set_temperature(const double &temperature) {
		idl_CommIMUData.temperature = temperature;
	}
	;

	// accelerometer values
	inline void get_accelerometer_values(double &x, double &y, double &z) const {
		x = idl_CommIMUData.accelerometer_x;
		y = idl_CommIMUData.accelerometer_y;
		z = idl_CommIMUData.accelerometer_z;
	}
	;

	inline void set_accelerometer_values(const double &x, const double &y,
			const double &z) {
		idl_CommIMUData.accelerometer_x = x;
		idl_CommIMUData.accelerometer_y = y;
		idl_CommIMUData.accelerometer_z = z;
	}
	;

	// gyroscope values
	inline void get_gyroscope_values(double &x, double &y, double &z) const {
		x = idl_CommIMUData.gyroscope_x;
		y = idl_CommIMUData.gyroscope_y;
		z = idl_CommIMUData.gyroscope_z;
	}
	;

	inline void set_gyroscope_values(const double &x, const double &y,
			const double &z) {
		idl_CommIMUData.gyroscope_x = x;
		idl_CommIMUData.gyroscope_y = y;
		idl_CommIMUData.gyroscope_z = z;
	}
	;

	// magnetometer values
	inline void get_magnetometer_values(double &x, double &y, double &z) const {
		x = idl_CommIMUData.magnetometer_x;
		y = idl_CommIMUData.magnetometer_y;
		z = idl_CommIMUData.magnetometer_z;
	}
	;

	inline void set_magnetometer_values(const double &x, const double &y,
			const double &z) {
		idl_CommIMUData.magnetometer_x = x;
		idl_CommIMUData.magnetometer_y = y;
		idl_CommIMUData.magnetometer_z = z;
	}
	;

	// euler angles
	inline void get_euler_angles(double &roll, double &pitch, double &yaw) const {
		roll = idl_CommIMUData.roll;
		pitch = idl_CommIMUData.pitch;
		yaw = idl_CommIMUData.yaw;
	}
	;

	inline void set_euler_angles(const double &roll, const double &pitch,
			const double &yaw) {
		idl_CommIMUData.roll = roll;
		idl_CommIMUData.pitch = pitch;
		idl_CommIMUData.yaw = yaw;
	}
	;

	// helper
	void printCommunicationObject(std::ostream &os) const;
	void printCommunicationObjectCSV(std::ostream &os) const;


};

// stdout <<
inline std::ostream &operator<<(std::ostream &os, const CommIMUData &imuData)
{
  imuData.printCommunicationObjectCSV(os);
  return os;
}


}
#endif
