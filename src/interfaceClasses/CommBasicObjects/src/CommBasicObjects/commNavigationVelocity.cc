//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2003 Boris Kluge
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Basic Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  (partly based on work by Christian Schlegel and Pablo d'Angelo)
//
// --------------------------------------------------------------------------

#include "commNavigationVelocity.hh"
#include "smartKnuthMorrisPratt.hh"


using namespace CommBasicObjects;

void CommNavigationVelocity::get(CORBA::Any &a) const
{
	a <<= idl_CommNavigationVelocity;
}

void CommNavigationVelocity::set(const CORBA::Any &a)
{
//	CommBasicObjectsIDL::CommNavigationVelocity *tmp_cmd;
//	if (a >>= tmp_cmd)
//	{
//		idl_CommNavigationVelocity = *tmp_cmd;
//	}
	CommBasicObjectsIDL::CommNavigationVelocity *tmp_vel;
	if(a >>= tmp_vel)
	{
		idl_CommNavigationVelocity = *tmp_vel;
	}
	else
	{
		idl_CommNavigationVelocity.v = 0;
		idl_CommNavigationVelocity.omega = 0;
	}
}

void CommNavigationVelocity::print(std::ostream &os) const
{
  os << "CommNavigationVelocity  (v=" << idl_CommNavigationVelocity.v << ",omega=" << idl_CommNavigationVelocity.omega << ")";
}

void CommNavigationVelocity::save_xml(std::ostream &os, const std::string &indent) const
{
  os << indent << "<navigation_velocity>" << std::endl;
  os << indent << "  <v>" << idl_CommNavigationVelocity.v << "</v>" << std::endl;
  os << indent << "  <omega>" << idl_CommNavigationVelocity.omega << "</omega>" << std::endl;
  os << indent << "</navigation_velocity>" << std::endl;
}

void CommNavigationVelocity::load_xml(std::istream &is)
{
  static const Smart::KnuthMorrisPratt kmp_begin("<navigation_velocity>");
  static const Smart::KnuthMorrisPratt kmp_v("<v>");
  static const Smart::KnuthMorrisPratt kmp_omega("<omega>");
  static const Smart::KnuthMorrisPratt kmp_end("</navigation_velocity>");

  kmp_begin.search(is);
  kmp_v.search(is);
  is >> idl_CommNavigationVelocity.v;
  kmp_omega.search(is);
  is >> idl_CommNavigationVelocity.omega;
  kmp_end.search(is);
}

