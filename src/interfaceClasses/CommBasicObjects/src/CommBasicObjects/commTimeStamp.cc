//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2003 Boris Kluge
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Basic Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  (partly based on work by Christian Schlegel and Pablo d'Angelo)
//
// --------------------------------------------------------------------------



#include "commTimeStamp.hh"

using namespace CommBasicObjects;

void CommTimeStamp::get(CORBA::Any &a) const
{
	a <<= idl_CommTimeStamp;
}

void CommTimeStamp::set(const CORBA::Any &a)
{
	CommBasicObjectsIDL::CommTimeStamp *tmp_cmd;
	if (a >>= tmp_cmd)
	{
		idl_CommTimeStamp = *tmp_cmd;
	}
}

CommTimeStamp::CommTimeStamp()
{
  idl_CommTimeStamp.sec = 0;
  idl_CommTimeStamp.usec = 0;
}

std::string CommTimeStamp::get_string() const
{
  std::string date_time;
  time_t t = idl_CommTimeStamp.sec;
  unsigned int buffer_length = 50;
  unsigned int used_buffer_length;
  while(true)
  {
    char buffer[buffer_length];
    used_buffer_length = strftime(buffer, buffer_length, "%Y-%m-%dT%H:%M:%S", localtime(&t));
    if(used_buffer_length<buffer_length)
    {
      date_time = buffer;
      break;
    }
    else
    {
      buffer_length += buffer_length;
    }
  }
  std::ostringstream oss;
  oss << "." << std::setw(6) << std::setfill('0') << idl_CommTimeStamp.usec;
  return date_time + oss.str();
}

void CommTimeStamp::set_now()
{
  timeval t;
  gettimeofday(&t, 0);
  set(t);
}

CommTimeStamp CommTimeStamp::now()
{
  CommTimeStamp ts;
  ts.set_now();
  return ts;
}

CommTimeStamp &CommTimeStamp::advance(double dt)
{
  const int n_sec  = (int)::floor(dt); // may be negative
  const int n_usec = (int)::rint((dt - n_sec) * 1e6); // 0 <= n_usec < 1000000 holds by construction
  idl_CommTimeStamp.usec += n_usec;
  while(idl_CommTimeStamp.usec > 1000000)
  {
    idl_CommTimeStamp.usec -= 1000000;
    idl_CommTimeStamp.sec  += 1;
  }
  idl_CommTimeStamp.sec += n_sec;
  return *this;
}

void CommTimeStamp::print(std::ostream &os) const
{
  os << "TimeStamp(" << idl_CommTimeStamp.sec << "sec," << std::setw(6) << std::setfill('0') << idl_CommTimeStamp.usec << "usec)";
}

void CommTimeStamp::save_xml(std::ostream &os, const std::string &indent) const
{
  os << indent << "<time_stamp>" << std::endl;
  os << indent << "  <sec>" << idl_CommTimeStamp.sec << "</sec>" << std::endl;
  os << indent << "  <microsec>" << idl_CommTimeStamp.usec << "</microsec>" << std::endl;
  os << indent << "</time_stamp>" << std::endl;
}

void CommTimeStamp::load_xml(std::istream &is)
{
  static const Smart::KnuthMorrisPratt kmp_begin("<time_stamp>");
  static const Smart::KnuthMorrisPratt kmp_sec("<sec>");
  static const Smart::KnuthMorrisPratt kmp_microsec("<microsec>");
  static const Smart::KnuthMorrisPratt kmp_end("</time_stamp>");

  kmp_begin.search(is);
  kmp_sec.search(is);
  is >> idl_CommTimeStamp.sec;
  kmp_microsec.search(is);
  is >> idl_CommTimeStamp.usec;
  kmp_end.search(is);
}






