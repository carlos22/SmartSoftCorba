//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------,

// --------------------------------------------------------------------------
//
//  Copyright (C) 2003 Boris Kluge
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Basic Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  (partly based on work by Christian Schlegel and Pablo d'Angelo)
//
// --------------------------------------------------------------------------

#ifndef _COMM_COMMBASICOBJECTS_COMMBASESTATE_HH
#define _COMM_COMMBASICOBJECTS_COMMBASESTATE_HH

#include <string>

// include files of classes

// include header-files of included communication objects
#include <CommBasicObjects/commTimeStamp.hh>
#include <CommBasicObjects/commBasePosition.hh>
#include <CommBasicObjects/commBaseVelocity.hh>

// include enums


// include client-side file generated by IDL compiler
#include "CommBasicObjects/gen/smartCommBaseStateC.hh"

namespace CommBasicObjects
{


/**
  The state of a mobile robot at a given time.
  The state consists of the following components:
  <ul>
    <li>a time stamp when the state was present,
    <li>the position (i.e. the configuration) of the base, and
    <li>the velocity of the base.
  </ul>
  \sa Smart::CommTimeStamp Smart::CommBasePosition Smart::CommBaseVelocity
 */
class CommBaseState
{
protected:
	CommBasicObjectsIDL::CommBaseState idl_CommBaseState;

public:
	CommBaseState()
	{
	}

	CommBaseState(const CommBasicObjectsIDL::CommBaseState &obj)
	: idl_CommBaseState(obj)
	{
	}

	operator CommBasicObjectsIDL::CommBaseState() const
	{
		return idl_CommBaseState;
	}

	virtual ~CommBaseState()
	{
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);


	static inline std::string identifier(void)
	{
		return "CommBasicObjects::CommBaseState";
	}

	/**
	 Set the time stamp.
	 */
	inline void set_time_stamp(const CommTimeStamp &ts) {
		idl_CommBaseState.time = ts;
	}

	/**
	 Set the base position.
	 */
	inline void set_base_position(const CommBasePosition &bp) {
		idl_CommBaseState.base_position = bp;
	}

	/**
	 Set the base raw position.
	 */
	inline void set_base_raw_position(const CommBasePosition &bp) {
		idl_CommBaseState.base_raw_position = bp;
	}

	/**
	 Set the base velocity.
	 */
	inline void set_base_velocity(const CommBaseVelocity &bv) {
		idl_CommBaseState.base_velocity = bv;
	}

	/**
	 Get the time stamp.
	 */
	inline CommTimeStamp get_time_stamp() const {
		return CommTimeStamp(idl_CommBaseState.time);
	}

	/**
	 Get the base position.
	 */
	inline CommBasePosition get_base_position() const {
		return CommBasePosition(idl_CommBaseState.base_position);
	}

	/**
	 Get the base raw position.
	 */
	inline CommBasePosition get_base_raw_position() const {
		return CommBasePosition(idl_CommBaseState.base_raw_position);
	}

	/**
	 Get the base velocity.
	 */
	inline CommBaseVelocity get_base_velocity() const {
		return CommBaseVelocity(idl_CommBaseState.base_velocity);
	}

	/**
	 Return this basestate at time \a ts, assuming constant velocities.
	 */
	CommBaseState extrapolate(const CommTimeStamp &ts) const;

	/**
	 Print information about this base state to the given output stream.
	 */
	void print(std::ostream &os = std::cout) const;

	/**
	 Save an XML like representation of this base state to the given output stream.
	 */
	void save_xml(std::ostream &os, const std::string &indent = "") const;

	/**
	 Load from XML represenation on an istream.
	 Be warned, no error checking is done.
	 For details, see \ref smart_basic_com-xml.
	 */
	void load_xml(std::istream &is);

};

//
// Implementation
//
inline std::ostream &operator<<(std::ostream &os, const CommBaseState &state)
{
  state.print(os);
  return os;
}



}
#endif
