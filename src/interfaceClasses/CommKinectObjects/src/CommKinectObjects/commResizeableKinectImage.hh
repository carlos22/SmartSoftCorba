//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.8.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

#ifndef _COMM_COMMKINECTOBJECTS_COMMRESIZEABLEKINECTIMAGE_HH
#define _COMM_COMMKINECTOBJECTS_COMMRESIZEABLEKINECTIMAGE_HH

#include <string>

#include "commMutableKinectImage.hh"

// include files of classes

// include header-files of included communication objects

// include enums


// include client-side file generated by IDL compiler

namespace CommKinectObjects {

class CommResizeableKinectImage: public CommMutableKinectImage {
public:
	inline CommResizeableKinectImage(const CommResizeableKinectImage &source) :
		CommMutableKinectImage(source) {
	}

	inline CommResizeableKinectImage &operator=(const CommResizeableKinectImage &source) {
		if (&source != this)
			CommMutableKinectImage::operator=(source);
		return *this;
	}

	CommResizeableKinectImage(const uint32_t width, const uint32_t height, const void* data = 0) {
		set_parameters(width, height);
		if (data != 0) {
			set_data(data);
		}
	}

	virtual ~CommResizeableKinectImage() {
	}

	static inline std::string identifier(void) {
		return "CommKinectObjects::CommResizeableKinectImage";
	}

	///////////////////////////////////////////////////////
	// user interfaces
	///////////////////////////////////////////////////////

	/**
	 Set the parameters of an image.
	 This causes currently attached shared memory to be detached, and a new shared memory segment
	 to be allocated.
	 */
	void set_parameters(const uint32_t width, const uint32_t height) {
		const uint32_t color_size = 3 * (width * height * sizeof(uint8_t)); // size in bytes
		const uint32_t distance_size = (width * height * sizeof(float_t)); // size in bytes

		uint32_t allocSize = sizeof(KinectImageParameters) + color_size + distance_size;

		if (CommSharedMemoryBase::alloc(allocSize) == 0) {
			KinectImageParameters *p = reinterpret_cast<KinectImageParameters*> (shm);
			p->width = width;
			p->height = height;
			p->color_image_size = color_size;
			p->distance_image_size = distance_size;
			p->size = allocSize;

			p->min_distance = 0;
			p->max_distance = 0;
			p->opening_angle_x_axis = 0;
			p->opening_angle_y_axis = 0;
			p->data_valid = false;
			p->seq_count = 0;

			arma::mat zero(4,4);
			zero.zeros();

			set_camera_extrinsic(zero);
			set_color_intrinsic(zero);
			set_distance_intrinsic(zero);
		}
	}

};

}
#endif
