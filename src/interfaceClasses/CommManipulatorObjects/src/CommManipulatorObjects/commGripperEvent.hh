//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.4
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
//  Copyright (C) 2011 Manuel Wopfner
//
//        schlegel@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#ifndef _COMM_COMMMANIPULATOROBJECTS_COMMGRIPPEREVENT_HH
#define _COMM_COMMMANIPULATOROBJECTS_COMMGRIPPEREVENT_HH

#include <string>

// include files of classes

// include header-files of included communication objects

// include enums
#include <CommManipulatorObjects/gen/enumGripperEvent.hh>

// include client-side file generated by IDL compiler
#include "CommManipulatorObjects/gen/smartCommGripperEventC.hh"

namespace CommManipulatorObjects
{

class CommGripperEvent
{
protected:
	CommManipulatorObjectsIDL::CommGripperEvent idl_CommGripperEvent;

public:
	CommGripperEvent()
	{
	}

	CommGripperEvent(const CommManipulatorObjectsIDL::CommGripperEvent &obj) :
		idl_CommGripperEvent(obj)
	{
	}

	virtual ~CommGripperEvent()
	{
	}

	operator CommManipulatorObjectsIDL::CommGripperEvent() const
	{
		return idl_CommGripperEvent;
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);

	static inline std::string identifier(void)
	{
		return "CommManipulatorObjects::CommGripperEvent";
	}

	//
	// user interfaces

	void set_event(GripperEvent event)
	{
		idl_CommGripperEvent.gripper_event = event.get_value_idl();
	}

	GripperEvent get_event() const
	{
		return idl_CommGripperEvent.gripper_event;
	}

	/**
	 * Set the position of the gripper actor.
	 * If linear joint = pos in mm
	 * If angular joint = angle in rad
	 */
	void set_pos(float pos)
	{
		idl_CommGripperEvent.pos = pos;
	}

	/**
	 * Get the position of the gripper actor.
	 * If linear joint = pos in mm
	 * If angular joint = angle in rad
	 */
	float get_pos() const
	{
		return idl_CommGripperEvent.pos;
	}
};

}
#endif
