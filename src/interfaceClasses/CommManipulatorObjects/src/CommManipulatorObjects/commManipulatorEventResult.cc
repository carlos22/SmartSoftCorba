//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "CommManipulatorObjects".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------

#include "commManipulatorEventResult.hh"

using namespace CommManipulatorObjects;

void CommManipulatorEventResult::get(CORBA::Any &a) const {
	a <<= idl_CommManipulatorEventResult;
}

void CommManipulatorEventResult::set(const CORBA::Any &a) {
	CommManipulatorObjectsIDL::CommManipulatorEventResult *tmp_cmd;
	if (a >>= tmp_cmd) {
		idl_CommManipulatorEventResult = *tmp_cmd;
	}
}

void CommManipulatorEventResult::get(char* r) const {
	switch (idl_CommManipulatorEventResult.event) {

	case ManipulatorEvent::COLLISION: {
		strcpy(r, "(COLLISION)");
		break;
	}

	case ManipulatorEvent::NO_SOLUTION_FOUND: {
		strcpy(r, "(NO SOLUTION FOUND)");
		break;
	}

	case ManipulatorEvent::VALUE_OUT_OF_RANGE: {
		strcpy(r, "(VALUE OUT OF RANGE)");
		break;
	}

	case ManipulatorEvent::GOAL_REACHED: {
		strcpy(r, "(GOAL REACHED)");
		break;
	}

	case ManipulatorEvent::GOAL_REACHED_GRIPPER_EMPTY: {
		strcpy(r, "(GOAL REACHED GRIPPER EMPTY)");
		break;
	}

	case ManipulatorEvent::GOAL_NOT_REACHED: {
		strcpy(r, "(GOAL NOT REACHED)");
		break;
	}

	default: {
		strcpy(r, "(ERROR)");
		break;
	}

	} // switch
}
