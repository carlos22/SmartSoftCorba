//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.4
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
//  Copyright (C) 2011 Manuel Wopfner
//
//        schlegel@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#ifndef _COMM_COMMMANIPULATOROBJECTS_COMMGRIPPERPARAM_HH
#define _COMM_COMMMANIPULATOROBJECTS_COMMGRIPPERPARAM_HH

#include <string>

#ifndef LISP_SEPARATOR
#define LISP_SEPARATOR " ()\"\n"
#define LISP_STRING    1000
#endif

// include files of classes

// include header-files of included communication objects

// include enums
#include <CommManipulatorObjects/gen/enumGripperTagType.hh>

// include client-side file generated by IDL compiler
#include "CommManipulatorObjects/gen/smartCommGripperParamC.hh"

namespace CommManipulatorObjects
{

class CommGripperParam
{
protected:
	CommManipulatorObjectsIDL::CommGripperParam idl_CommGripperParam;

public:
	CommGripperParam()
	{
	}

	CommGripperParam(const CommManipulatorObjectsIDL::CommGripperParam &obj) :
		idl_CommGripperParam(obj)
	{
	}

	virtual ~CommGripperParam()
	{
	}

	operator CommManipulatorObjectsIDL::CommGripperParam() const
	{
		return idl_CommGripperParam;
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);

	static inline std::string identifier(void)
	{
		return "CommManipulatorObjects::CommGripperParam";
	}

	////////////////////////
	// user interfaces
	//////////////////////

	/**
	 * Set a parameter with an optional value.
	 * @param inString
	 * 			OPEN
	 * 			CLOSE
	 * 			ACC ?value
	 * 			CUR ?value
	 * 			VEL ?value
	 * @return
	 * 			 0  everything ok
	 * 			-1  format error occurred
	 */
	inline int set(std::string &inString)
	{
		char *param = (char *) NULL;
		char *input = (char *) NULL;

		int error = 0;

		input = (char *) inString.c_str();

		do
		{
			param = strsep(&input, LISP_SEPARATOR);
		} while ((param != NULL) && (strlen(param) == 0));

		// --------------------
		// open gripper
		// --------------------
		if (strcasecmp(param, "OPEN") == 0)
		{
			idl_CommGripperParam.tag = GripperTagType(GripperTagType::GRIPPER_OPEN).get_value_idl();
		}
		// --------------------
		// close gripper
		// --------------------
		else if (strcasecmp(param, "CLOSE") == 0)
		{
			idl_CommGripperParam.tag = GripperTagType(GripperTagType::GRIPPER_CLOSE).get_value_idl();
		}
		// --------------------
		// set acceleration
		// --------------------
		else if (strcasecmp(param, "ACC") == 0)
		{
			idl_CommGripperParam.tag = GripperTagType(GripperTagType::SET_ACCELERATION).get_value_idl();

			if (error == 0)
			{
				do
				{
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%f", &idl_CommGripperParam.p1) == 1))
				{
					// everything ok
				} else
				{
					error = -1;
				}
			}
		}
		// --------------------
		// set acceleration
		// --------------------
		else if (strcasecmp(param, "CUR") == 0)
		{
			idl_CommGripperParam.tag = GripperTagType(GripperTagType::SET_CURRENT).get_value_idl();

			if (error == 0)
			{
				do
				{
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%f", &idl_CommGripperParam.p1) == 1))
				{
					// everything ok
				} else
				{
					error = -1;
				}
			}
		}
		// --------------------
		// set acceleration
		// --------------------
		else if (strcasecmp(param, "VEL") == 0)
		{
			idl_CommGripperParam.tag = GripperTagType(GripperTagType::SET_SPEED).get_value_idl();

			if (error == 0)
			{
				do
				{
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%f", &idl_CommGripperParam.p1) == 1))
				{
					// everything ok
				} else
				{
					error = -1;
				}
			}
		}
		// --------------------
		// got garbage
		// --------------------
		else
		{
			error = -1;
		}

		return error;
	}

	void get_param(GripperTagType& tag, float& p1) const
	{
		tag = idl_CommGripperParam.tag;
		p1 = idl_CommGripperParam.p1;
	}
};

}
#endif
