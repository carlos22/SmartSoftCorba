//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "CommManipulatorObjects".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------

#ifndef _COMM_COMMMANIPULATORTRAJECTORY_HH
#define _COMM_COMMMANIPULATORTRAJECTORY_HH

#include <string>
#include <math.h>

// include header-files of includes communication objects
#include <CommBasicObjects/commPose3d.hh>
#include <CommManipulatorObjects/gen/enumManipulatorGripperAction.hh>
#include <CommManipulatorObjects/gen/enumManipulatorTrajectoryFlag.hh>

#include <armadillo.hh>
#include <EulerTransformationMatrices.hh>

// include client-side file generated by IDL compiler
#include "CommManipulatorObjects/gen/smartCommManipulatorTrajectoryC.hh"

namespace CommManipulatorObjects {

class CommManipulatorTrajectory {
protected:
	CommManipulatorObjectsIDL::CommManipulatorTrajectory idl_CommManipulatorTrajectory;

public:

	CommManipulatorTrajectory() {
	}

	CommManipulatorTrajectory(const CommManipulatorObjectsIDL::CommManipulatorTrajectory &obj) :
		idl_CommManipulatorTrajectory(obj) {
	}

	operator CommManipulatorObjectsIDL::CommManipulatorTrajectory() const
	{
		return idl_CommManipulatorTrajectory;
	}

	virtual ~CommManipulatorTrajectory() {
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);

	static inline std::string identifier(void) {
		return "CommManipulatorObjects::CommManipulatorTrajectory";
	}

	//////////////////////////
	// user interfaces
	//////////////////////////

	/**
	 * Set the number of elements in the trajectory.
	 * ATTENTION
	 * 		before you can use this method you have to set:
	 * 		1. which values are valid (@see setValidValues)
	 * 		2. the gripper action (@see setGripperAction)
	 * @param size Number of elements in the trajectory
	 */
	inline void set_trajectory_size(uint32_t size) {
		if (ManipulatorGripperAction(idl_CommManipulatorTrajectory.gripper) == ManipulatorGripperAction::ANGLE)
			idl_CommManipulatorTrajectory.gripper_angles.length(size);

		if (ManipulatorTrajectoryFlag(idl_CommManipulatorTrajectory.flag) == ManipulatorTrajectoryFlag::JOINT_ANGLES)
			idl_CommManipulatorTrajectory.joint_angles.length(size);

		if (ManipulatorTrajectoryFlag(idl_CommManipulatorTrajectory.flag) == ManipulatorTrajectoryFlag::POSES)
			idl_CommManipulatorTrajectory.pose_tcp.length(size);
	}

	/**
	 * Return the number of elements in the trajectory.
	 * @return Number of elements in the trajectory
	 */
	inline uint32_t get_trajectory_size() const {
		if (ManipulatorGripperAction(idl_CommManipulatorTrajectory.gripper) == ManipulatorGripperAction::ANGLE)
			return idl_CommManipulatorTrajectory.gripper_angles.length();

		if (ManipulatorTrajectoryFlag(idl_CommManipulatorTrajectory.flag) == ManipulatorTrajectoryFlag::JOINT_ANGLES)
			return idl_CommManipulatorTrajectory.joint_angles.length();

		if (ManipulatorTrajectoryFlag(idl_CommManipulatorTrajectory.flag) == ManipulatorTrajectoryFlag::POSES)
			return idl_CommManipulatorTrajectory.pose_tcp.length();

		return 0;
	}

	/**
	 * Set the number of joints the manipulator has.
	 * ATTENTION
	 * 		before you can use this method you have to set:
	 * 		1. which values are valid (@see setValidValues)
	 * 		2. the size of the trajectory (@see setTrajectorySize)
	 * @param jointCount Number of joints
	 */
	inline void set_joint_count(uint32_t count) {
		for (uint32_t i = 0; i < idl_CommManipulatorTrajectory.joint_angles.length(); ++i) {
			idl_CommManipulatorTrajectory.joint_angles[i].values.length(count);
		}
	}

	/**
	 * Return the number of joints the manipulator has.
	 * @return Number of joints
	 */
	inline uint32_t get_joint_count() const {
		if (idl_CommManipulatorTrajectory.joint_angles.length() > 0)
			return idl_CommManipulatorTrajectory.joint_angles[0].values.length();

		return 0;
	}

	/**
	 * Set the angle of a joint for a specific element in the trajectory.
	 * ATTENTION
	 * 		before you can use this method you have to set:
	 * 		1. which values are valid (@see setValidValues)
	 * 		2. the size of the trajectory (@see setTrajectorySize)
	 * 		3. the number of joints (@see setJointCount)
	 * @param index Index of the element in the trajectory
	 * @param joint Index of the joint
	 * @param angle Anlge for the joint [rad]
	 */
	inline void set_joint_angle(uint32_t index, uint32_t joint, double angle) {
		idl_CommManipulatorTrajectory.joint_angles[index].values[joint] = angle;
	}

	/**
	 * Set the angle of a joint for a specific element in the trajectory.
	 * ATTENTION
	 * 		this method only returns useful values when the values are set
	 * 		to valid (@see setValidValues)
	 * @param index Index of the element in the trajectory
	 * @param joint Index of the joint
	 * @return Anlge for the joint [rad]
	 */
	inline double get_joint_angle(uint32_t index, uint32_t joint) const {
		return idl_CommManipulatorTrajectory.joint_angles[index].values[joint];
	}

	/**
	 * Set the pose of the tool center point in the coordinate
	 * system of the robot.
	 * ATTENTION
	 * 		before you can use this method you have to set:
	 * 		1. which values are valid (@see setValidValues)
	 * 		2. the size of the trajectory (@see setTrajectorySize)
	 * @param index of the tcp pose in the trajectory
	 * @param x value of the pose
	 * @param y value of the pose
	 * @param z value of the pose
	 * @param phi value of the pose [rad]
	 * @param theta value of the pose [rad]
	 * @param psi value of the pose [rad]
	 */
	inline void set_pose_TCP_robot(uint32_t index, const double x, const double y, const double z,
			const double azimuth, const double elevation, const double roll, const double unit = 0.001) {
		idl_CommManipulatorTrajectory.pose_tcp[index].position.x = x * unit * 1000;
		idl_CommManipulatorTrajectory.pose_tcp[index].position.y = y * unit * 1000;
		idl_CommManipulatorTrajectory.pose_tcp[index].position.z = z * unit * 1000;

		idl_CommManipulatorTrajectory.pose_tcp[index].orientation.azimuth = azimuth;
		idl_CommManipulatorTrajectory.pose_tcp[index].orientation.elevation = elevation;
		idl_CommManipulatorTrajectory.pose_tcp[index].orientation.roll = roll;
	}

	/**
	 * Return the pose of the tool center point in the coordinate
	 * system of the robot.
	 * ATTENTION
	 * 		this method only returns useful values when the values are set
	 * 		to valid (@see setValidValues)
	 * @param index of the tcp pose in the trajectory
	 * @param x value of the pose
	 * @param y value of the pose
	 * @param z value of the pose
	 * @param azimuth value of the pose [rad]
	 * @param elevation value of the pose [rad]
	 * @param roll value of the pose [rad]
	 */
	inline void get_pose_TCP_robot(uint32_t index, double& x, double& y, double& z, double& azimuth, double& elevation,
			double& roll, const double unit = 0.001) const {
		x = idl_CommManipulatorTrajectory.pose_tcp[index].position.x * 0.001 / unit;
		y = idl_CommManipulatorTrajectory.pose_tcp[index].position.y * 0.001 / unit;
		z = idl_CommManipulatorTrajectory.pose_tcp[index].position.z * 0.001 / unit;

		azimuth = idl_CommManipulatorTrajectory.pose_tcp[index].orientation.azimuth;
		elevation = idl_CommManipulatorTrajectory.pose_tcp[index].orientation.elevation;
		roll = idl_CommManipulatorTrajectory.pose_tcp[index].orientation.roll;
	}

	/**
	 * Set the angle of the gripper for a specific element in the trajectory.
	 * ATTENTION
	 * 		before you can use this method you have to set:
	 * 		1. the gripper action (@see setGripperAction)
	 * 		2. the size of the trajectory (@see setTrajectorySize)
	 * @param index Index of the element in the trajectory
	 * @param angle Angle for the gripper [rad]
	 */
	inline void set_gripper_angle(uint32_t index, double angle) {
		idl_CommManipulatorTrajectory.gripper_angles[index] = angle;
	}

	/**
	 * Get the angle of the gripper for a specific element in the trajectory.
	 * ATTENTION
	 * 		this method only returns useful values when the gripper action
	 * 		is set to ANGLE (@see setGripperAction)
	 * @param index Index of the element in the trajectory
	 * @return Angle of the gripper [rad]
	 */
	inline double get_gripper_angle(uint32_t index) const {
		return idl_CommManipulatorTrajectory.gripper_angles[index];
	}

	/**
	 * Set if the component should wait until all joints reached the specified values.
	 * If you have many poses which are near to each other this leads to a jerking movement.
	 * @param wait
	 * 			true 	: the component waits until the exact pose is reached.
	 *			false 	: the component moves to one pose after the other an doesn't wait
	 */
	inline void set_wait_until_each_pose_reached(bool wait = true) {
		idl_CommManipulatorTrajectory.wait_until_each_pose_reached = wait;
	}

	/**
	 * Return the current value of the flag.
	 * @return
	 * 			true 	: the component waits until the exact pose is reached.
	 *			false 	: the component moves to one pose after the other an doesn't wait
	 */
	inline bool get_wait_until_each_pose_reached() const {
		return idl_CommManipulatorTrajectory.wait_until_each_pose_reached;
	}

	/**
	 * Set the action mode for the gripper.
	 * @param action for the gripper
	 */
	inline void set_gripper_action(ManipulatorGripperAction action) {
		idl_CommManipulatorTrajectory.gripper = action.get_value_idl();
	}

	/**
	 * Get the action mode for the gripper.
	 * @return action for the gripper
	 */
	inline ManipulatorGripperAction get_gripper_action() const {
		return idl_CommManipulatorTrajectory.gripper;
	}

	/**
	 * Set which trajectory values (poseTcp or jointAngles) should be used
	 * for the trajectory.
	 * @param flag decides which values should be used.
	 */
	inline void set_valid_values(ManipulatorTrajectoryFlag flag) {
		idl_CommManipulatorTrajectory.flag = flag.get_value_idl();
	}

	/**
	 * Set which trajectory values (poseTcp or jointAngles) should be used
	 * for the trajectory.
	 * @return flag decides which values should be used.
	 */
	inline ManipulatorTrajectoryFlag get_valid_values() const {
		return idl_CommManipulatorTrajectory.flag;
	}

	/**
	 * Print the object to an output stream.
	 * @param os Output stream to which should be printed
	 */
	void print(std::ostream &os = std::cout) const;

};

//
// Implementation
//

inline std::ostream &operator<<(std::ostream &os, const CommManipulatorTrajectory &trajectory) {
	trajectory.print(os);
	return os;
}

} // namespace Smart
#endif
