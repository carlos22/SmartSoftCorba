//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _COMMMANIPULATOROBJECTS_ENUM_HH_MANIPULATORPARAMETERMODE
#define _COMMMANIPULATOROBJECTS_ENUM_HH_MANIPULATORPARAMETERMODE

#include <CommManipulatorObjects/gen/enumManipulatorParameterModeC.hh>
#include <string>
#include <ostream>

namespace CommManipulatorObjects
{

class ManipulatorParameterMode
{
public:
	enum literal
	{

		CALIBRATE = CommManipulatorObjectsIDL::LITERAL_CALIBRATE,

		CALIBRATE_AXIS = CommManipulatorObjectsIDL::LITERAL_CALIBRATE_AXIS,

		SET_ALL_JOINT_VELOCITY_LIMITS = CommManipulatorObjectsIDL::LITERAL_SET_ALL_JOINT_VELOCITY_LIMITS,

		SET_GRIPPER_VELOCITY_LIMIT = CommManipulatorObjectsIDL::LITERAL_SET_GRIPPER_VELOCITY_LIMIT,

		SINGLE_POSE = CommManipulatorObjectsIDL::LITERAL_SINGLE_POSE,

		TRAJECTORY = CommManipulatorObjectsIDL::LITERAL_TRAJECTORY
	};

	ManipulatorParameterMode()
	{
	}

	ManipulatorParameterMode(literal t)
	{
		value = t;
	}

	operator literal()
	{
		return value;
	}

	ManipulatorParameterMode(
			CommManipulatorObjectsIDL::ENUM_ManipulatorParameterMode t)
	{
		value = (literal) t;
	}

	bool operator ==(ManipulatorParameterMode& t)
	{
		return this->value == t.value;
	}

	CommManipulatorObjectsIDL::ENUM_ManipulatorParameterMode get_value_idl()
	{
		return (CommManipulatorObjectsIDL::ENUM_ManipulatorParameterMode) value;
	}

	literal get_value() const
	{
		return value;
	}

	std::string get_string() const
	{
		switch (value)
		{

		case CALIBRATE:
			return "ManipulatorParameterMode::CALIBRATE";
			break;

		case CALIBRATE_AXIS:
			return "ManipulatorParameterMode::CALIBRATE_AXIS";
			break;

		case SET_ALL_JOINT_VELOCITY_LIMITS:
			return "ManipulatorParameterMode::SET_ALL_JOINT_VELOCITY_LIMITS";
			break;

		case SET_GRIPPER_VELOCITY_LIMIT:
			return "ManipulatorParameterMode::SET_GRIPPER_VELOCITY_LIMIT";
			break;

		case SINGLE_POSE:
			return "ManipulatorParameterMode::SINGLE_POSE";
			break;

		case TRAJECTORY:
			return "ManipulatorParameterMode::TRAJECTORY";
			break;

		default:
			return "UNKNOWN!";
			break;
		}
	}

private:
	literal value;
};

inline std::ostream &operator<<(std::ostream &os,
		const ManipulatorParameterMode &e)
{
	os << e.get_string();
	return os;
}

}
#endif
