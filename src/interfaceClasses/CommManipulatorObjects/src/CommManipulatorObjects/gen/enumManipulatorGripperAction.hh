//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _COMMMANIPULATOROBJECTS_ENUM_HH_MANIPULATORGRIPPERACTION
#define _COMMMANIPULATOROBJECTS_ENUM_HH_MANIPULATORGRIPPERACTION

#include <CommManipulatorObjects/gen/enumManipulatorGripperActionC.hh>
#include <string>
#include <ostream>

namespace CommManipulatorObjects
{

class ManipulatorGripperAction
{
public:
	enum literal
	{

		ANGLE = CommManipulatorObjectsIDL::LITERAL_ANGLE,

		CLOSE_AFTER = CommManipulatorObjectsIDL::LITERAL_CLOSE_AFTER,

		CLOSE_BEFORE = CommManipulatorObjectsIDL::LITERAL_CLOSE_BEFORE,

		CLOSE_BEFORE_OPEN_AFTER = CommManipulatorObjectsIDL::LITERAL_CLOSE_BEFORE_OPEN_AFTER,

		NO_OP = CommManipulatorObjectsIDL::LITERAL_NO_OP,

		OPEN_AFTER = CommManipulatorObjectsIDL::LITERAL_OPEN_AFTER,

		OPEN_BEFORE = CommManipulatorObjectsIDL::LITERAL_OPEN_BEFORE,

		OPEN_BEFORE_CLOSE_AFTER = CommManipulatorObjectsIDL::LITERAL_OPEN_BEFORE_CLOSE_AFTER
	};

	ManipulatorGripperAction()
	{
	}

	ManipulatorGripperAction(literal t)
	{
		value = t;
	}

	operator literal()
	{
		return value;
	}

	ManipulatorGripperAction(
			CommManipulatorObjectsIDL::ENUM_ManipulatorGripperAction t)
	{
		value = (literal) t;
	}

	bool operator ==(ManipulatorGripperAction& t)
	{
		return this->value == t.value;
	}

	CommManipulatorObjectsIDL::ENUM_ManipulatorGripperAction get_value_idl()
	{
		return (CommManipulatorObjectsIDL::ENUM_ManipulatorGripperAction) value;
	}

	literal get_value() const
	{
		return value;
	}

	std::string get_string() const
	{
		switch (value)
		{

		case ANGLE:
			return "ManipulatorGripperAction::ANGLE";
			break;

		case CLOSE_AFTER:
			return "ManipulatorGripperAction::CLOSE_AFTER";
			break;

		case CLOSE_BEFORE:
			return "ManipulatorGripperAction::CLOSE_BEFORE";
			break;

		case CLOSE_BEFORE_OPEN_AFTER:
			return "ManipulatorGripperAction::CLOSE_BEFORE_OPEN_AFTER";
			break;

		case NO_OP:
			return "ManipulatorGripperAction::NO_OP";
			break;

		case OPEN_AFTER:
			return "ManipulatorGripperAction::OPEN_AFTER";
			break;

		case OPEN_BEFORE:
			return "ManipulatorGripperAction::OPEN_BEFORE";
			break;

		case OPEN_BEFORE_CLOSE_AFTER:
			return "ManipulatorGripperAction::OPEN_BEFORE_CLOSE_AFTER";
			break;

		default:
			return "UNKNOWN!";
			break;
		}
	}

private:
	literal value;
};

inline std::ostream &operator<<(std::ostream &os,
		const ManipulatorGripperAction &e)
{
	os << e.get_string();
	return os;
}

}
#endif
