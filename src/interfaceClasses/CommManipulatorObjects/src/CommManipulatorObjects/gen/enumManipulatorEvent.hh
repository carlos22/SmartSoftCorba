//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.4
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _COMMMANIPULATOROBJECTS_ENUM_HH_MANIPULATOREVENT
#define _COMMMANIPULATOROBJECTS_ENUM_HH_MANIPULATOREVENT

#include <CommManipulatorObjects/gen/enumManipulatorEventC.hh>
#include <string>
#include <ostream>

namespace CommManipulatorObjects
{

class ManipulatorEvent
{
public:
	enum literal
	{

		COLLISION = CommManipulatorObjectsIDL::LITERAL_COLLISION,

		GOAL_NOT_REACHED = CommManipulatorObjectsIDL::LITERAL_GOAL_NOT_REACHED,

		GOAL_REACHED = CommManipulatorObjectsIDL::LITERAL_GOAL_REACHED,

		GOAL_REACHED_GRIPPER_EMPTY = CommManipulatorObjectsIDL::LITERAL_GOAL_REACHED_GRIPPER_EMPTY,

		NO_SOLUTION_FOUND = CommManipulatorObjectsIDL::LITERAL_NO_SOLUTION_FOUND,

		UNKNOWN = CommManipulatorObjectsIDL::LITERAL_UNKNOWN,

		VALUE_OUT_OF_RANGE = CommManipulatorObjectsIDL::LITERAL_VALUE_OUT_OF_RANGE
	};

	ManipulatorEvent()
	{
	}

	ManipulatorEvent(literal t)
	{
		value = t;
	}

	operator literal()
	{
		return value;
	}

	ManipulatorEvent(CommManipulatorObjectsIDL::ENUM_ManipulatorEvent t)
	{
		value = (literal) t;
	}

	bool operator ==(ManipulatorEvent& t)
	{
		return this->value == t.value;
	}

	CommManipulatorObjectsIDL::ENUM_ManipulatorEvent get_value_idl()
	{
		return (CommManipulatorObjectsIDL::ENUM_ManipulatorEvent) value;
	}

	literal get_value() const
	{
		return value;
	}

	std::string get_string() const
	{
		switch (value)
		{

		case COLLISION:
			return "ManipulatorEvent::COLLISION";
			break;

		case GOAL_NOT_REACHED:
			return "ManipulatorEvent::GOAL_NOT_REACHED";
			break;

		case GOAL_REACHED:
			return "ManipulatorEvent::GOAL_REACHED";
			break;

		case GOAL_REACHED_GRIPPER_EMPTY:
			return "ManipulatorEvent::GOAL_REACHED_GRIPPER_EMPTY";
			break;

		case NO_SOLUTION_FOUND:
			return "ManipulatorEvent::NO_SOLUTION_FOUND";
			break;

		case UNKNOWN:
			return "ManipulatorEvent::UNKNOWN";
			break;

		case VALUE_OUT_OF_RANGE:
			return "ManipulatorEvent::VALUE_OUT_OF_RANGE";
			break;

		default:
			return "UNKNOWN!";
			break;
		}
	}

private:
	literal value;
};

inline std::ostream &operator<<(std::ostream &os, const ManipulatorEvent &e)
{
	os << e.get_string();
	return os;
}

}
#endif
