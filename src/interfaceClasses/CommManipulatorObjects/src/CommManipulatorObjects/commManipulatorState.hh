//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "CommManipulatorObjects".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------

#ifndef _COMM_COMMMANIPULATORSTATE_HH
#define _COMM_COMMMANIPULATORSTATE_HH

#include <string>
#include <math.h>

// include header-files of includes communication objects
#include <CommBasicObjects/commPose3d.hh>

// include client-side file generated by IDL compiler
#include "CommManipulatorObjects/gen/smartCommManipulatorStateC.hh"

#include <armadillo.hh>
#include <EulerTransformationMatrices.hh>

namespace CommManipulatorObjects {

class CommManipulatorState {
protected:
	CommManipulatorObjectsIDL::CommManipulatorState idl_CommManipulatorState;

public:
	/**
	 * Default constructor sets the state to invalid
	 */
	CommManipulatorState() {
		set_valid(false);
	}

	CommManipulatorState(const CommManipulatorObjectsIDL::CommManipulatorState &obj) :
		idl_CommManipulatorState(obj) {
	}

	virtual ~CommManipulatorState() {
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);

	inline const CommManipulatorObjectsIDL::CommManipulatorState &get() const {
		return idl_CommManipulatorState;
	}

	inline void set(const CommManipulatorObjectsIDL::CommManipulatorState &obj) {
		idl_CommManipulatorState = obj;
	}

	static inline std::string identifier(void) {
		return "CommManipulatorObjects::CommManipulatorState";
	}

	//////////////////////
	// user interfaces
	//////////////////////

	/**
	 * Set the number of joints the manipulator has.
	 * @param jointCount Number of joints
	 */
	inline void set_joint_count(const uint32_t jointCount) {
		idl_CommManipulatorState.joint_angles.length(jointCount);
	}

	/**
	 * Return the number of joints the manipulator has.
	 * @return Number of joints
	 */
	inline uint32_t get_joint_count() const {
		return idl_CommManipulatorState.joint_angles.length();
	}

	/**
	 * Set angle of a joint.
	 * @param joint Index of the joint
	 * @param angle Anlge for the joint [rad]
	 */
	inline void set_joint_angle(const uint32_t joint, const double angle) {
		idl_CommManipulatorState.joint_angles[joint] = angle;
	}

	/**
	 * Return the angle for a joint.
	 * @param joint Index of the joint
	 * @return Angle for the joint [rad]
	 */
	inline double get_joint_angle(const uint32_t joint) const {
		return idl_CommManipulatorState.joint_angles[joint];
	}

	/**
	 * Set the pose of the tool center point relative to the
	 * coordinate system of the manipulator. The position
	 * is specified in the given unit value (0.001 = mm)
	 * @param x value of the pose
	 * @param y value of the pose
	 * @param z value of the pose
	 * @param phi value of the pose [rad]
	 * @param theta value of the pose [rad]
	 * @param psi value of the pose [rad]
	 */
	inline void set_pose_TCP_manipulator(const double x, const double y, const double z, const double azimuth,
			const double elevation, const double roll, const double unit = 0.001) {
		idl_CommManipulatorState.pose_tcp.position.x = x * unit * 1000;
		idl_CommManipulatorState.pose_tcp.position.y = y * unit * 1000;
		idl_CommManipulatorState.pose_tcp.position.z = z * unit * 1000;

		idl_CommManipulatorState.pose_tcp.orientation.azimuth = azimuth;
		idl_CommManipulatorState.pose_tcp.orientation.elevation = elevation;
		idl_CommManipulatorState.pose_tcp.orientation.roll = roll;
	}

	/**
	 * Set the pose of the manipulator coordinate system relative
	 * to the robot coordinate system.
	 */
	inline void set_pose_manipulator(const double x, const double y, const double z, const double azimuth,
			const double elevation, const double roll, const double unit = 0.001) {
		idl_CommManipulatorState.pose_manipulator.position.x = x * unit * 1000;
		idl_CommManipulatorState.pose_manipulator.position.y = y * unit * 1000;
		idl_CommManipulatorState.pose_manipulator.position.z = z * unit * 1000;

		idl_CommManipulatorState.pose_manipulator.orientation.azimuth = azimuth;
		idl_CommManipulatorState.pose_manipulator.orientation.elevation = elevation;
		idl_CommManipulatorState.pose_manipulator.orientation.roll = roll;
	}

	/**
	 * Return the pose of the tool center point relative to the
	 * coordinate system of the manipulator. The position is
	 * specified in the given unit value (0.001 = mm)
	 * @param x value of the pose
	 * @param y value of the pose
	 * @param z value of the pose
	 * @param azimuth value of the pose [rad]
	 * @param elevation value of the pose [rad]
	 * @param roll value of the pose [rad]
	 */
	inline void get_pose_TCP_manipulator(double& x, double& y, double& z, double& azimuth, double& elevation,
			double& roll, const double unit = 0.001) const {
		x = idl_CommManipulatorState.pose_tcp.position.x * 0.001 / unit;
		y = idl_CommManipulatorState.pose_tcp.position.y * 0.001 / unit;
		z = idl_CommManipulatorState.pose_tcp.position.z * 0.001 / unit;

		azimuth = idl_CommManipulatorState.pose_tcp.orientation.azimuth;
		elevation = idl_CommManipulatorState.pose_tcp.orientation.elevation;
		roll = idl_CommManipulatorState.pose_tcp.orientation.roll;
	}

	/**
	 * Returns the pose of the TCP (tool center point) in the
	 * coordinate system of the robot. The position is
	 * specified in the given unit value (0.001 = mm)
	 */
	inline void get_pose_TCP_robot(double& x, double& y, double& z, double& azimuth, double& elevation, double& roll,
			const double unit = 0.001) const {

		CommBasicObjects::CommPose3d pose_tcp(idl_CommManipulatorState.pose_tcp);
		arma::mat mat_tcp = pose_tcp.getHomogeneousMatrix(unit);

		CommBasicObjects::CommPose3d pose_manipulator(idl_CommManipulatorState.pose_manipulator);
		arma::mat mat_manipulator = pose_manipulator.getHomogeneousMatrix(unit);

		arma::mat mat_tcp_robot = mat_manipulator * mat_tcp;
		CommBasicObjects::CommPose3d pose_tcp_robot(mat_tcp_robot, unit);
		x = pose_tcp_robot.get_x(unit);
		y = pose_tcp_robot.get_y(unit);
		z = pose_tcp_robot.get_z(unit);

		azimuth = pose_tcp_robot.get_azimuth();
		elevation = pose_tcp_robot.get_elevation();
		roll = pose_tcp_robot.get_roll();
	}

	/**
	 * Returns the pose of the manipulator coordinate system
	 * relative to the robot coordinate system. The position is
	 * specified in the given unit value (0.001 = mm)
	 */
	inline void get_pose_manipulator(double& x, double& y, double& z, double& azimuth, double& elevation, double& roll,
			const double unit = 0.001) const {
		x = idl_CommManipulatorState.pose_manipulator.position.x * 0.001 / unit;
		y = idl_CommManipulatorState.pose_manipulator.position.y * 0.001 / unit;
		z = idl_CommManipulatorState.pose_manipulator.position.z * 0.001 / unit;

		azimuth = idl_CommManipulatorState.pose_manipulator.orientation.azimuth;
		elevation = idl_CommManipulatorState.pose_manipulator.orientation.elevation;
		roll = idl_CommManipulatorState.pose_manipulator.orientation.roll;
	}

	/**
	 * Set the angle of the gripper.
	 * @param angle for the gripper [rad]
	 */
	inline void set_gripper_angle(const double angle) {
		idl_CommManipulatorState.gripper_angle = angle;
	}

	/**
	 * Get the angle of the gripper.
	 * @return Angle of the gripper [rad]
	 */
	inline double get_gripper_angle() const {
		return idl_CommManipulatorState.gripper_angle;
	}

	/**
	 * Set the continuous id. Each object has an unique id which is
	 * incremented for each new state
	 * @param id Continuous id.
	 */
	inline void set_id(const u_int32_t id) {
		idl_CommManipulatorState.id = id;
	}

	/**
	 * Get the continuous id. Each object has an unique id which is
	 * incremented for each new state
	 * @return Continuous id.
	 */
	inline uint32_t get_id() const {
		return idl_CommManipulatorState.id;
	}

	/**
	 * Set the state to valid or invalid.
	 * @param valid
	 * 			true	: state is valid
	 * 			false	: state is invalid
	 */
	inline void set_valid(const bool valid) {
		idl_CommManipulatorState.isValid = valid;
	}

	/**
	 * Check if the state is valid.
	 * @return
	 * 			true	: state is valid
	 * 			false	: state is invalid
	 */
	inline bool is_valid() const {
		return idl_CommManipulatorState.isValid;
	}

	/**
	 * Print the object to an output stream.
	 * @param os Output stream to which should be printed
	 */
	void print(std::ostream &os = std::cout) const;
};

//
// Implementation
//

inline std::ostream &operator<<(std::ostream &os, const CommManipulatorState &state) {
	state.print(os);
	return os;
}

} // namespace Smart
#endif
