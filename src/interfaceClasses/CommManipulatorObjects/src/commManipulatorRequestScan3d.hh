//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "CommManipulatorObjects".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------

#ifndef _COMM_COMMMANIPULATORREQUESTSCAN3D_HH
#define _COMM_COMMMANIPULATORREQUESTSCAN3D_HH

#include <string>

#include <math.h>

// include files of classes

// include header-files of included communication objects

// include enums


// include client-side file generated by IDL compiler
#include "gen/smartCommManipulatorRequestScan3dC.hh"

namespace Smart {

class CommManipulatorRequestScan3d {
protected:
	SmartIDL::CommManipulatorRequestScan3d idl_CommManipulatorRequestScan3d;

public:
	CommManipulatorRequestScan3d() {
		idl_CommManipulatorRequestScan3d.laser_begin_angle = M_PI;
		idl_CommManipulatorRequestScan3d.laser_end_angle = M_PI;
	}

	CommManipulatorRequestScan3d(
			const SmartIDL::CommManipulatorRequestScan3d &obj) :
		idl_CommManipulatorRequestScan3d(obj) {
	}

	virtual ~CommManipulatorRequestScan3d() {
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);

	inline const SmartIDL::CommManipulatorRequestScan3d &get() const {
		return idl_CommManipulatorRequestScan3d;
	}

	inline void set(const SmartIDL::CommManipulatorRequestScan3d &obj) {
		idl_CommManipulatorRequestScan3d = obj;
	}

	static inline std::string identifier(void) {
		return "Smart::CommManipulatorRequestScan3d";
	}

	//
	// user interfaces

	/**
	 * Set the number of joints the manipulator has.
	 * This has to be done before setting the values for
	 * each joint.
	 */
	inline void set_joint_count(uint32_t count) {
		idl_CommManipulatorRequestScan3d.begin_joint_angles.length(count);
		idl_CommManipulatorRequestScan3d.end_joint_angles.length(count);
	}

	/**
	 * Returns the number of joints the manipulator has.
	 */
	inline uint32_t get_joint_count() const {
		return idl_CommManipulatorRequestScan3d.begin_joint_angles.length();
	}

	/**
	 * Set the begin angle for a joint where the whole 3d scan should start.
	 * This has to be done for each joint.
	 */
	inline void set_begin_joint_angle(uint32_t index, double value) {
		idl_CommManipulatorRequestScan3d.begin_joint_angles[index] = value;
	}

	/**
	 * Returns the begin angle for a joint where the whole 3d scan should start.
	 */
	inline double get_begin_joint_angle(uint32_t index) const {
		return idl_CommManipulatorRequestScan3d.begin_joint_angles[index];
	}

	/**
	 * Set the end angle for a joint where the whole 3d scan should end.
	 * This has to be done for each joint.
	 */
	inline void set_end_joint_angle(uint32_t index, double value) {
		idl_CommManipulatorRequestScan3d.end_joint_angles[index] = value;
	}

	/**
	 * Returns the end angle for a joint where the whole 3d scan should end.
	 */
	inline double get_end_joint_angle(uint32_t index) const {
		return idl_CommManipulatorRequestScan3d.end_joint_angles[index];
	}

	/**
	 * Set the angle where the laser scanner should begin.
	 * The value is a normed angle between 0 - 2PI [rad].
	 * The begin angle is > PI;
	 */
	inline void set_laser_begin_angle(double value) {
		idl_CommManipulatorRequestScan3d.laser_begin_angle = value;
	}

	/**
	 * Returns the angle where the laser scanner should begin.
	 */
	inline double get_laser_begin_angle() const {
		return idl_CommManipulatorRequestScan3d.laser_begin_angle;
	}

	/**
	 * Set the angle where the laser scanner should end.
	 * The value is a normed angle between 0 - 2PI [rad].
	 * The end angle is < PI;
	 */
	inline void set_laser_end_angle(double value) {
		idl_CommManipulatorRequestScan3d.laser_end_angle = value;
	}

	/**
	 * Returns the angle where the laser scanner should end.
	 */
	inline double get_laser_end_angle() const {
		return idl_CommManipulatorRequestScan3d.laser_end_angle;
	}

	/**
	 * Set in how many scans should be performed.
	 * This means that there are taken the given number of scans.
	 * The difference between the begin and end angles for each
	 * joint is calculated and divided by the given number.
	 * Then the joint is moved by this value between each scanning step.
	 */
	inline void set_step_count(uint16_t count) {
		idl_CommManipulatorRequestScan3d.number_of_steps = count;
	}

	/**
	 * Returns in how many steps the scan should be performed.
	 */
	inline uint16_t get_step_count() const {
		return idl_CommManipulatorRequestScan3d.number_of_steps;
	}
};

}
#endif
