//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//
//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of CommManipulatorObjects.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------


#ifndef _COMM_COMMMANIPULATOREVENTRESULT_HH
#define _COMM_COMMMANIPULATOREVENTRESULT_HH

#include <string>

// include header-files of includes communication objects

// include client-side file generated by IDL compiler
#include "gen/smartCommManipulatorEventResultC.hh"

namespace Smart
{

class CommManipulatorEventResult
{
protected:
	SmartIDL::CommManipulatorEventResult idl_CommManipulatorEventResult;

public:

	enum EnumEvent
	{
		COLLISION = SmartIDL::RESULT_COLLISION,
		NO_SOLUTION_FOUND = SmartIDL::RESULT_NO_SOLUTION_FOUND,
		VALUE_OUT_OF_RANGE = SmartIDL::RESULT_VALUE_OUT_OF_RANGE,
		GOAL_REACHED = SmartIDL::RESULT_GOAL_REACHED,
		GOAL_NOT_REACHED = SmartIDL::RESULT_GOAL_NOT_REACHED
	};


	CommManipulatorEventResult()
	{
	}

	CommManipulatorEventResult(const SmartIDL::CommManipulatorEventResult &obj) :
		idl_CommManipulatorEventResult(obj)
	{
	}

	virtual ~CommManipulatorEventResult()
	{
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);

	inline const SmartIDL::CommManipulatorEventResult &get() const
	{
		return idl_CommManipulatorEventResult;
	}

	inline void set(const SmartIDL::CommManipulatorEventResult &obj)
	{
		idl_CommManipulatorEventResult = obj;
	}

	static inline std::string identifier(void)
	{
		return "Smart::CommManipulatorEventResult";
	}

	//
	// user interfaces

	inline void set_event(EnumEvent event)
	{
		idl_CommManipulatorEventResult.event = (SmartIDL::enum_result_event) event;
	}

	inline EnumEvent get_event() const
	{
		return (EnumEvent) idl_CommManipulatorEventResult.event;
	}

};

}
#endif
