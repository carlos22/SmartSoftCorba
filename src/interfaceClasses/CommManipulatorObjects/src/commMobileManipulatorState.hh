//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//
//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of CommManipulatorObjects.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------


#ifndef _COMM_COMMMOBILEMANIPULATORSTATE_HH
#define _COMM_COMMMOBILEMANIPULATORSTATE_HH

#include <string>

// include header-files of includes communication objects
#include <commBaseState.hh>
#include <commManipulatorState.hh>

// include client-side file generated by IDL compiler
#include "gen/smartCommMobileManipulatorStateC.hh"

namespace Smart
{

class CommMobileManipulatorState
{
protected:
	SmartIDL::CommMobileManipulatorState idl_CommMobileManipulatorState;

public:
	CommMobileManipulatorState()
	{
	}

	CommMobileManipulatorState(const SmartIDL::CommMobileManipulatorState &obj) :
		idl_CommMobileManipulatorState(obj)
	{
	}

	virtual ~CommMobileManipulatorState()
	{
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);

	inline const SmartIDL::CommMobileManipulatorState &get() const
	{
		return idl_CommMobileManipulatorState;
	}

	inline void set(const SmartIDL::CommMobileManipulatorState &obj)
	{
		idl_CommMobileManipulatorState = obj;
	}

	static inline std::string identifier(void)
	{
		return "Smart::CommMobileManipulatorState";
	}

	//////////////////////
	// user interfaces
	//////////////////////

	inline void set_base_state(const CommBaseState &baseState)
	{
		idl_CommMobileManipulatorState.base_state = baseState.get_idl();
	}

	inline CommBaseState get_base_state() const
	{
		return CommBaseState(idl_CommMobileManipulatorState.base_state);
	}

	inline void set_manipulator_state(const CommManipulatorState &manipState)
	{
		idl_CommMobileManipulatorState.manipulator_state = manipState.get();
	}

	inline CommManipulatorState get_manipulator_state() const
	{
		return CommManipulatorState(
				idl_CommMobileManipulatorState.manipulator_state);
	}

	/**
	 * Print the object to an output stream.
	 * @param os Output stream to which should be printed
	 */
	void print(std::ostream &os = std::cout) const;

};

//
// Implementation
//

inline std::ostream &operator<<(std::ostream &os,
		const CommMobileManipulatorState &state)
{
	state.print(os);
	return os;
}

} // namespace Smart
#endif
