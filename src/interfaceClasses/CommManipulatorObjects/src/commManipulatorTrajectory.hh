//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//
//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of CommManipulatorObjects.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------


#ifndef _COMM_COMMMANIPULATORTRAJECTORY_HH
#define _COMM_COMMMANIPULATORTRAJECTORY_HH

#include <string>
#include <math.h>

// include header-files of includes communication objects
#include <commPose3d.hh>

// include client-side file generated by IDL compiler
#include "gen/smartCommManipulatorTrajectoryC.hh"

namespace Smart
{

class CommManipulatorTrajectory
{
protected:
	SmartIDL::CommManipulatorTrajectory idl_CommManipulatorTrajectory;

public:

	/**
	 * Enum which indicates if the angle of each trajectory element is used
	 * or if an other action is performed.
	 */
	enum EnumGripper
	{
		NO_OP = SmartIDL::NO_OP,
		ANGLE = SmartIDL::ANGLE,
		CLOSE_BEFORE = SmartIDL::CLOSE_BEFORE,
		CLOSE_AFTER = SmartIDL::CLOSE_AFTER,
		OPEN_BEFORE = SmartIDL::OPEN_BEFORE,
		OPEN_AFTER = SmartIDL::OPEN_AFTER,
		OPEN_BEFORE_CLOSE_AFTER = SmartIDL::OPEN_BEFORE_CLOSE_AFTER,
		CLOSE_BEFORE_OPEN_AFTER = SmartIDL::CLOSE_BEFORE_OPEN_AFTER
	};

	/**
	 * Enum which indicates if the joint_angles are used for the trajectory
	 * or the tcp poses.
	 */
	enum EnumFlag
	{
		JOINT_ANGLES = SmartIDL::JOINT_ANGLES, POSES = SmartIDL::POSES
	};

	enum EnumRotationFormat
	{
		ZYX, ZXZ
	};

	CommManipulatorTrajectory()
	{
	}

	CommManipulatorTrajectory(const SmartIDL::CommManipulatorTrajectory &obj) :
		idl_CommManipulatorTrajectory(obj)
	{
	}

	virtual ~CommManipulatorTrajectory()
	{
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);

	inline const SmartIDL::CommManipulatorTrajectory &get() const
	{
		return idl_CommManipulatorTrajectory;
	}

	inline void set(const SmartIDL::CommManipulatorTrajectory &obj)
	{
		idl_CommManipulatorTrajectory = obj;
	}

	static inline std::string identifier(void)
	{
		return "Smart::CommManipulatorTrajectory";
	}

	//////////////////////////
	// user interfaces
	//////////////////////////

	/**
	 * Set the number of elements in the trajectory.
	 * ATTENTION
	 * 		before you can use this method you have to set:
	 * 		1. which values are valid (@see setValidValues)
	 * 		2. the gripper action (@see setGripperAction)
	 * @param size Number of elements in the trajectory
	 */
	inline void set_trajectory_size(uint32_t size)
	{
		if (idl_CommManipulatorTrajectory.gripper == SmartIDL::ANGLE)
			idl_CommManipulatorTrajectory.gripper_angles.length(size);

		if (idl_CommManipulatorTrajectory.flag == SmartIDL::JOINT_ANGLES)
			idl_CommManipulatorTrajectory.joint_angles.length(size);

		if (idl_CommManipulatorTrajectory.flag == SmartIDL::POSES)
			idl_CommManipulatorTrajectory.pose_tcp.length(size);
	}

	/**
	 * Return the number of elements in the trajectory.
	 * @return Number of elements in the trajectory
	 */
	inline uint32_t get_trajectory_size() const
	{
		if (idl_CommManipulatorTrajectory.gripper == SmartIDL::ANGLE)
			return idl_CommManipulatorTrajectory.gripper_angles.length();

		if (idl_CommManipulatorTrajectory.flag == SmartIDL::JOINT_ANGLES)
			return idl_CommManipulatorTrajectory.joint_angles.length();

		if (idl_CommManipulatorTrajectory.flag == SmartIDL::POSES)
			return idl_CommManipulatorTrajectory.pose_tcp.length();

		return 0;
	}

	/**
	 * Set the number of joints the manipulator has.
	 * ATTENTION
	 * 		before you can use this method you have to set:
	 * 		1. which values are valid (@see setValidValues)
	 * 		2. the size of the trajectory (@see setTrajectorySize)
	 * @param jointCount Number of joints
	 */
	inline void set_joint_count(uint32_t count)
	{
		for (uint32_t i = 0; i
				< idl_CommManipulatorTrajectory.joint_angles.length(); ++i)
		{
			idl_CommManipulatorTrajectory.joint_angles[i].values.length(count);
		}
	}

	/**
	 * Return the number of joints the manipulator has.
	 * @return Number of joints
	 */
	inline uint32_t get_joint_count() const
	{
		if (idl_CommManipulatorTrajectory.joint_angles.length() > 0)
			return idl_CommManipulatorTrajectory.joint_angles[0].values.length();

		return 0;
	}

	/**
	 * Set the angle of a joint for a specific element in the trajectory.
	 * ATTENTION
	 * 		before you can use this method you have to set:
	 * 		1. which values are valid (@see setValidValues)
	 * 		2. the size of the trajectory (@see setTrajectorySize)
	 * 		3. the number of joints (@see setJointCount)
	 * @param index Index of the element in the trajectory
	 * @param joint Index of the joint
	 * @param angle Anlge for the joint [rad]
	 */
	inline void set_joint_angle(uint32_t index, uint32_t joint, double angle)
	{
		idl_CommManipulatorTrajectory.joint_angles[index].values[joint] = angle;
	}

	/**
	 * Set the angle of a joint for a specific element in the trajectory.
	 * ATTENTION
	 * 		this method only returns useful values when the values are set
	 * 		to valid (@see setValidValues)
	 * @param index Index of the element in the trajectory
	 * @param joint Index of the joint
	 * @return Anlge for the joint [rad]
	 */
	inline double get_joint_angle(uint32_t index, uint32_t joint) const
	{
		return idl_CommManipulatorTrajectory.joint_angles[index].values[joint];
	}

	/**
	 * Set the pose of the tool center point.
	 * ATTENTION
	 * 		before you can use this method you have to set:
	 * 		1. which values are valid (@see setValidValues)
	 * 		2. the size of the trajectory (@see setTrajectorySize)
	 * @param index of the tcp pose in the trajectory
	 * @param x value of the pose [mm]
	 * @param y value of the pose [mm]
	 * @param z value of the pose [mm]
	 * @param phi value of the pose [rad]
	 * @param theta value of the pose [rad]
	 * @param psi value of the pose [rad]
	 */
	inline void set_pose_TCP(uint32_t index, double x, double y, double z,
			double phi, double theta, double psi,
			EnumRotationFormat rotationFormat = CommManipulatorTrajectory::ZYX)
	{
		idl_CommManipulatorTrajectory.pose_tcp[index].position.x = x;
		idl_CommManipulatorTrajectory.pose_tcp[index].position.y = y;
		idl_CommManipulatorTrajectory.pose_tcp[index].position.z = z;

		switch (rotationFormat)
		{
			case CommManipulatorTrajectory::ZYX:
				idl_CommManipulatorTrajectory.pose_tcp[index].orientation.azimuth
						= phi;
				idl_CommManipulatorTrajectory.pose_tcp[index].orientation.elevation
						= theta;
				idl_CommManipulatorTrajectory.pose_tcp[index].orientation.roll
						= psi;
				break;

			case CommManipulatorTrajectory::ZXZ:

				// ZXZ rotation matrix
				double r[3][3];
				create_zxz_matrix(phi, theta, psi, r);

				double nTheta = -asin(r[2][0]);
				double nPsi = 0;
				double nPhi = 0;

				if (fabs(cos(nTheta)) > 1E-8)
				{
					nPsi = atan2(r[2][1] / cos(nTheta), r[2][2] / cos(nTheta));
					nPhi = atan2(r[1][0] / cos(nTheta), r[0][0] / cos(nTheta));
				}
				else
				{
					nPhi = 0;
					nPsi = atan2(r[0][1], r[0][2]);
				}

				idl_CommManipulatorTrajectory.pose_tcp[index].orientation.azimuth
						= nPhi;
				idl_CommManipulatorTrajectory.pose_tcp[index].orientation.elevation
						= nTheta;
				idl_CommManipulatorTrajectory.pose_tcp[index].orientation.roll
						= nPsi;

				break;
		}

	}

	/**
	 * Return the pose of the tool center point.
	 * ATTENTION
	 * 		this method only returns useful values when the values are set
	 * 		to valid (@see setValidValues)
	 * @param index of the tcp pose in the trajectory
	 * @param x value of the pose [mm]
	 * @param y value of the pose [mm]
	 * @param z value of the pose [mm]
	 * @param azimuth value of the pose [rad]
	 * @param elevation value of the pose [rad]
	 * @param roll value of the pose [rad]
	 */
	inline void get_pose_TCP(uint32_t index, double& x, double& y, double& z,
			double& phi, double& theta, double& psi,
			EnumRotationFormat rotationFormat = CommManipulatorTrajectory::ZYX) const
	{
		x = idl_CommManipulatorTrajectory.pose_tcp[index].position.x;
		y = idl_CommManipulatorTrajectory.pose_tcp[index].position.y;
		z = idl_CommManipulatorTrajectory.pose_tcp[index].position.z;

		switch (rotationFormat)
		{
			case CommManipulatorTrajectory::ZYX:
			{
				phi
						= idl_CommManipulatorTrajectory.pose_tcp[index].orientation.azimuth;
				theta
						= idl_CommManipulatorTrajectory.pose_tcp[index].orientation.elevation;
				psi
						= idl_CommManipulatorTrajectory.pose_tcp[index].orientation.roll;
				break;
			}
			case CommManipulatorTrajectory::ZXZ:
			{
				// ZYX rotation matrix
				double r[3][3];
				create_zyx_matrix(
						idl_CommManipulatorTrajectory.pose_tcp[index].orientation.azimuth,
						idl_CommManipulatorTrajectory.pose_tcp[index].orientation.elevation,
						idl_CommManipulatorTrajectory.pose_tcp[index].orientation.roll,
						r);

				theta = acos(r[2][2]);

				if (fabs(sin(theta)) > 1E-8)
				{
					psi = atan2(r[2][0] / sin(theta), r[2][1] / sin(theta));
					phi = -atan2(r[0][2] / sin(theta), r[1][2] / sin(theta))
							+ M_PI;
				}
				else
				{
					phi = 0;
					psi = atan2(r[1][0], r[1][1]) + M_PI;
				}
				break;
			}
		}
	}

	/**
	 * Set the angle of the gripper for a specific element in the trajectory.
	 * ATTENTION
	 * 		before you can use this method you have to set:
	 * 		1. the gripper action (@see setGripperAction)
	 * 		2. the size of the trajectory (@see setTrajectorySize)
	 * @param index Index of the element in the trajectory
	 * @param angle Angle for the gripper [rad]
	 */
	inline void set_gripper_angle(uint32_t index, double angle)
	{
		idl_CommManipulatorTrajectory.gripper_angles[index] = angle;
	}

	/**
	 * Get the angle of the gripper for a specific element in the trajectory.
	 * ATTENTION
	 * 		this method only returns useful values when the gripper action
	 * 		is set to ANGLE (@see setGripperAction)
	 * @param index Index of the element in the trajectory
	 * @return Angle of the gripper [rad]
	 */
	inline double get_gripper_angle(uint32_t index) const
	{
		return idl_CommManipulatorTrajectory.gripper_angles[index];
	}

	/**
	 * Set if the component should wait until all joints reached the specified values.
	 * If you have many poses which are near to each other this leads to a jerking movement.
	 * @param wait
	 * 			true 	: the component waits until the exact pose is reached.
	 *			false 	: the component moves to one pose after the other an doesn't wait
	 */
	inline void set_wait_until_each_pose_reached(bool wait = true)
	{
		idl_CommManipulatorTrajectory.wait_until_each_pose_reached = wait;
	}

	/**
	 * Return the current value of the flag.
	 * @return
	 * 			true 	: the component waits until the exact pose is reached.
	 *			false 	: the component moves to one pose after the other an doesn't wait
	 */
	inline bool get_wait_until_each_pose_reached() const
	{
		return idl_CommManipulatorTrajectory.wait_until_each_pose_reached;
	}

	/**
	 * Set the action mode for the gripper.
	 * @param action for the gripper
	 */
	inline void set_gripper_action(EnumGripper action)
	{
		idl_CommManipulatorTrajectory.gripper = (SmartIDL::enum_gripper) action;
	}

	/**
	 * Get the action mode for the gripper.
	 * @return action for the gripper
	 */
	inline EnumGripper get_gripper_action() const
	{
		return (EnumGripper) idl_CommManipulatorTrajectory.gripper;
	}

	/**
	 * Set which trajectory values (poseTcp or jointAngles) should be used
	 * for the trajectory.
	 * @param flag decides which values should be used.
	 */
	inline void set_valid_values(EnumFlag flag)
	{
		idl_CommManipulatorTrajectory.flag = (SmartIDL::enum_flag) flag;
	}

	/**
	 * Set which trajectory values (poseTcp or jointAngles) should be used
	 * for the trajectory.
	 * @return flag decides which values should be used.
	 */
	inline EnumFlag get_valid_values() const
	{
		return (EnumFlag) idl_CommManipulatorTrajectory.flag;
	}

	/**
	 * Print the object to an output stream.
	 * @param os Output stream to which should be printed
	 */
	void print(std::ostream &os = std::cout) const;

private:
	void create_zxz_matrix(double phi, double theta, double psi,
			double matrix[3][3]) const
	{
		matrix[0][0] = cos(psi) * cos(phi) - sin(psi) * cos(theta) * sin(phi);
		matrix[0][1] = -sin(psi) * cos(phi) - cos(psi) * cos(theta) * sin(phi);
		matrix[0][2] = sin(theta) * sin(phi);

		matrix[1][0] = cos(psi) * sin(phi) + sin(psi) * cos(theta) * cos(phi);
		matrix[1][1] = -sin(psi) * sin(phi) + cos(psi) * cos(theta) * cos(phi);
		matrix[1][2] = -sin(theta) * cos(phi);

		matrix[2][0] = sin(psi) * sin(theta);
		matrix[2][1] = cos(psi) * sin(theta);
		matrix[2][2] = cos(theta);
	}

	void create_zyx_matrix(double phi, double theta, double psi,
			double matrix[3][3]) const
	{
		matrix[0][0] = cos(theta) * cos(phi);
		matrix[0][1] = -cos(psi) * sin(phi) + sin(psi) * sin(theta) * cos(phi);
		matrix[0][2] = sin(psi) * sin(phi) + cos(psi) * sin(theta) * cos(phi);

		matrix[1][0] = cos(theta) * sin(phi);
		matrix[1][1] = cos(psi) * cos(phi) + sin(psi) * sin(theta) * sin(phi);
		matrix[1][2] = -sin(psi) * cos(phi) + cos(psi) * sin(theta) * sin(phi);

		matrix[2][0] = -sin(theta);
		matrix[2][1] = sin(psi) * cos(theta);
		matrix[2][2] = cos(psi) * cos(theta);
	}

};

//
// Implementation
//

inline std::ostream &operator<<(std::ostream &os,
		const CommManipulatorTrajectory &trajectory)
{
	trajectory.print(os);
	return os;
}

} // namespace Smart
#endif
