//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//
//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of CommManipulatorObjects.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------


#include "commManipulatorState.hh"

using namespace Smart;

void CommManipulatorState::get(CORBA::Any &a) const
{
	a <<= idl_CommManipulatorState;
}

void CommManipulatorState::set(const CORBA::Any &a)
{
	SmartIDL::CommManipulatorState *tmp_cmd;
	if (a >>= tmp_cmd)
	{
		idl_CommManipulatorState = *tmp_cmd;
	}
}

void CommManipulatorState::print(std::ostream &os) const
{
	os << "CommManipulatorState(";
	os << "id=" << get_id() << "\n";
	if (is_valid())
	{
		os << "pose tcp=" << idl_CommManipulatorState.pose_tcp.position.x
				<< ", " << idl_CommManipulatorState.pose_tcp.position.y << ", "
				<< idl_CommManipulatorState.pose_tcp.position.z << ", "
				<< idl_CommManipulatorState.pose_tcp.orientation.azimuth
				<< ", "
				<< idl_CommManipulatorState.pose_tcp.orientation.elevation
				<< ", " << idl_CommManipulatorState.pose_tcp.orientation.roll
				<< "\n";

		os << "joint angles=";
		for (uint32_t i = 0; i < get_joint_count(); ++i)
		{
			os << get_joint_angle(i) << ", ";
		}
		os << "\n";

		os << "gripper angle=" << idl_CommManipulatorState.gripper_angle;

	}
	else
	{
		os << "invalid";
	}
	os << ")\n";
}
