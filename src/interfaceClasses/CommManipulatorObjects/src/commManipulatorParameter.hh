//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "CommManipulatorObjects".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------

#ifndef _COMM_COMMMANIPULATORPARAMETER_HH
#define _COMM_COMMMANIPULATORPARAMETER_HH

#include <string>
#include <iostream>

#define LISP_SEPARATOR " ()\n"

// include header-files of includes communication objects
#include <enumManipulatorParameterMode.hh>

// include client-side file generated by IDL compiler
#include "gen/smartCommManipulatorParameterC.hh"

namespace Smart {

/**
 * Possible commands:
 * TRAJECTORY	: the hole trajectory is performed.
 * SINGLE_POSE	: only the first value of a trajectory is performed.
 * SET_ALL_JOINT_VELOCITY_LIMITS	: set the velocity limit for all joints
 * SET_GRIPPER_VELOCITY_LIMIT		: set the velocity limit for the gripper
 */
class CommManipulatorParameter {
protected:
	SmartIDL::CommManipulatorParameter idl_CommManipulatorParameter;

public:
	/**
	 * Default constructor
	 */
	CommManipulatorParameter() {
	}

	/**
	 * Copy constructor
	 */
	CommManipulatorParameter(const SmartIDL::CommManipulatorParameter &obj) :
		idl_CommManipulatorParameter(obj) {
	}

	/*
	 * destructor
	 */
	virtual ~CommManipulatorParameter() {
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);

	inline const SmartIDL::CommManipulatorParameter &get() const {
		return idl_CommManipulatorParameter;
	}

	inline void set(const SmartIDL::CommManipulatorParameter &obj) {
		idl_CommManipulatorParameter = obj;
	}

	static inline std::string identifier(void) {
		return "Smart::CommManipulatorParameter";
	}

	////////////////////////
	// user interfaces
	////////////////////////

	/**
	 * Set a parameter with an optional value.
	 * @param inString
	 * 			TRAJECTORY
	 * 			SINGLEPOSE
	 * 			ALLJOINTVELLIMITS ?limit
	 * 			GRIPPERVELLIMIT ?limit
	 * @return
	 * 			 0  everything ok
	 * 			-1  format error occurred
	 */
	inline int set(std::string &inString) {
		char *param = (char *) NULL;
		char *input = (char *) NULL;

		int error = 0;

		input = (char *) inString.c_str();

		do {
			param = strsep(&input, LISP_SEPARATOR);
		} while ((param != NULL) && (strlen(param) == 0));

		// --------------------
		// set velocity limit for all joints
		// --------------------
		if (strcasecmp(param, "ALLJOINTVELLIMITS") == 0) {
			idl_CommManipulatorParameter.mode
					= (SmartIDL::ENUM_ManipulatorParameterMode) SET_ALL_JOINT_VELOCITY_LIMITS;

			if (error == 0) {
				do {
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%d",
						&idl_CommManipulatorParameter.parameter01) == 1)) {
					// everything ok
				} else {
					error = -1;
				}
			}
		}
		// --------------------
		// set velocity limit for the gripper
		// --------------------
		else if (strcasecmp(param, "GRIPPERVELLIMIT") == 0) {
			idl_CommManipulatorParameter.mode
					= (SmartIDL::ENUM_ManipulatorParameterMode) SET_GRIPPER_VELOCITY_LIMIT;

			if (error == 0) {
				do {
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%d",
						&idl_CommManipulatorParameter.parameter01) == 1)) {
					// everything ok
				} else {
					error = -1;
				}
			}
		}
		// --------------------
		// perform hole trajectory
		// --------------------
		else if (strcasecmp(param, "TRAJECTORY") == 0) {
			idl_CommManipulatorParameter.mode
					= (SmartIDL::ENUM_ManipulatorParameterMode) TRAJECTORY;
		}
		// --------------------
		// perform only the first trajectory element
		// --------------------
		else if (strcasecmp(param, "SINGLEPOSE") == 0) {
			idl_CommManipulatorParameter.mode
					= (SmartIDL::ENUM_ManipulatorParameterMode) SINGLE_POSE;
		}
		// --------------------
		// got garbage
		// --------------------
		else {
			error = -1;
		}

		return error;
	}

	/**
	 * Returns a tag which parameter is to set and the value for this parameter.
	 * @param tag Tag for the parameter
	 * @param value01 Variable in which the value for the parameter is set
	 */
	inline void get(ManipulatorParameterMode &tag, int32_t &value01) const {
		tag = (ManipulatorParameterMode) idl_CommManipulatorParameter.mode;
		value01 = idl_CommManipulatorParameter.parameter01;
	}

	/**
	 * Print the object to an output stream.
	 * @param os Output stream to which should be printed
	 */
	void print(std::ostream &os = std::cout) const;

};

//
// Implementation
//

inline std::ostream &operator<<(std::ostream &os,
		const CommManipulatorParameter &param) {
	param.print(os);
	return os;
}

} // namespace Smart
#endif
