//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.4
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _COMMPERSONDETECTIONOBJECTS_ENUM_HH_SCANTYPE
#define _COMMPERSONDETECTIONOBJECTS_ENUM_HH_SCANTYPE

#include <CommPersonDetectionObjects/gen/enumScanTypeC.hh>
#include <string>
#include <ostream>

namespace CommPersonDetectionObjects
{

class ScanType
{
public:
	enum literal
	{

		FULL_SCAN = CommPersonDetectionObjectsIDL::LITERAL_FULL_SCAN,

		FULL_SCAN_TOF_ONLY = CommPersonDetectionObjectsIDL::LITERAL_FULL_SCAN_TOF_ONLY,

		NONE_SCAN_TYPE = CommPersonDetectionObjectsIDL::LITERAL_NONE_SCAN_TYPE,

		SIDEWARDS_SCAN_CAMERA_COMBO = CommPersonDetectionObjectsIDL::LITERAL_SIDEWARDS_SCAN_CAMERA_COMBO,

		SINGLE_IMAGE_SCAN_TOF_ONLY = CommPersonDetectionObjectsIDL::LITERAL_SINGLE_IMAGE_SCAN_TOF_ONLY,

		SINGLE_SCAN = CommPersonDetectionObjectsIDL::LITERAL_SINGLE_SCAN
	};

	ScanType()
	{
	}

	ScanType(literal t)
	{
		value = t;
	}

	operator literal()
	{
		return value;
	}

	ScanType(CommPersonDetectionObjectsIDL::ENUM_ScanType t)
	{
		value = (literal) t;
	}

	bool operator ==(ScanType& t)
	{
		return this->value == t.value;
	}

	CommPersonDetectionObjectsIDL::ENUM_ScanType get_value_idl()
	{
		return (CommPersonDetectionObjectsIDL::ENUM_ScanType) value;
	}

	literal get_value() const
	{
		return value;
	}

	std::string get_string() const
	{
		switch (value)
		{

		case FULL_SCAN:
			return "ScanType::FULL_SCAN";
			break;

		case FULL_SCAN_TOF_ONLY:
			return "ScanType::FULL_SCAN_TOF_ONLY";
			break;

		case NONE_SCAN_TYPE:
			return "ScanType::NONE_SCAN_TYPE";
			break;

		case SIDEWARDS_SCAN_CAMERA_COMBO:
			return "ScanType::SIDEWARDS_SCAN_CAMERA_COMBO";
			break;

		case SINGLE_IMAGE_SCAN_TOF_ONLY:
			return "ScanType::SINGLE_IMAGE_SCAN_TOF_ONLY";
			break;

		case SINGLE_SCAN:
			return "ScanType::SINGLE_SCAN";
			break;

		default:
			return "UNKNOWN!";
			break;
		}
	}

private:
	literal value;
};

inline std::ostream &operator<<(std::ostream &os, const ScanType &e)
{
	os << e.get_string();
	return os;
}

}
#endif
