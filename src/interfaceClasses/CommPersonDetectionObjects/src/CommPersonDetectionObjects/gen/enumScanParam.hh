//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.4
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _COMMPERSONDETECTIONOBJECTS_ENUM_HH_SCANPARAM
#define _COMMPERSONDETECTIONOBJECTS_ENUM_HH_SCANPARAM

#include <CommPersonDetectionObjects/gen/enumScanParamC.hh>
#include <string>
#include <ostream>

namespace CommPersonDetectionObjects
{

class ScanParam
{
public:
	enum literal
	{

		FULL_SCAN_PARAM = CommPersonDetectionObjectsIDL::LITERAL_FULL_SCAN_PARAM,

		MIN_MAX_PAN = CommPersonDetectionObjectsIDL::LITERAL_MIN_MAX_PAN,

		NONE_SCAN_PARAM = CommPersonDetectionObjectsIDL::LITERAL_NONE_SCAN_PARAM
	};

	ScanParam()
	{
	}

	ScanParam(literal t)
	{
		value = t;
	}

	operator literal()
	{
		return value;
	}

	ScanParam(CommPersonDetectionObjectsIDL::ENUM_ScanParam t)
	{
		value = (literal) t;
	}

	bool operator ==(ScanParam& t)
	{
		return this->value == t.value;
	}

	CommPersonDetectionObjectsIDL::ENUM_ScanParam get_value_idl()
	{
		return (CommPersonDetectionObjectsIDL::ENUM_ScanParam) value;
	}

	literal get_value() const
	{
		return value;
	}

	std::string get_string() const
	{
		switch (value)
		{

		case FULL_SCAN_PARAM:
			return "ScanParam::FULL_SCAN_PARAM";
			break;

		case MIN_MAX_PAN:
			return "ScanParam::MIN_MAX_PAN";
			break;

		case NONE_SCAN_PARAM:
			return "ScanParam::NONE_SCAN_PARAM";
			break;

		default:
			return "UNKNOWN!";
			break;
		}
	}

private:
	literal value;
};

inline std::ostream &operator<<(std::ostream &os, const ScanParam &e)
{
	os << e.get_string();
	return os;
}

}
#endif
