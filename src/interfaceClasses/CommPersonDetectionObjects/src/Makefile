#--------------------------------------------------------------------------
# Code generated by the SmartSoft MDSD Toolchain Version 0.8.0
# The SmartSoft Toolchain has been developed by:
#  
# ZAFH Servicerobotic Ulm
# Christian Schlegel (schlegel@hs-ulm.de)
# University of Applied Sciences
# Prittwitzstr. 10
# 89075 Ulm (Germany)
#
# Information about the SmartSoft MDSD Toolchain is available at:
# smart-robotics.sourceforge.net
# 
# This file is generated once. Modify this file to your needs. 
# If you want the toolchain to re-generate this file, please 
# delete it before running the code generator.
#--------------------------------------------------------------------------

#--------------------------------------------------------------------------
#
#  Copyright (C) 2003 Boris Kluge
#                2009-2010 Andreas Steck, Dennis Stampfer
#
#        schlegel@hs-ulm.de
#
#        Prof. Dr. Christian Schlegel
#        University of Applied Sciences
#        Prittwitzstr. 10
#        D-89075 Ulm
#        Germany
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License, or (at your option) any later version.
#
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public
#  License along with this library; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#--------------------------------------------------------------------------

#----------------------------------------------------------------------------
#
#----------------------------------------------------------------------------
CONF  = $(SMART_ROOT)/src/Makefile.smart.conf
RULES = $(SMART_ROOT)/src/Makefile.smart.rules

include $(CONF)

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------

DEPENDENCIES += CommPersonDetectionObjects/*.cc
INCLUDES     += -I$(TAO_ROOT)/orbsvcs

#----------------------------------------------------------------------------
# Variables
#
# USER: IDL_FILES         IDL files in this directory -- without suffixes
#       EXPORT_FILES      files to be exported not including the IDL files
#       INI_FILES         ini files needed by that component
#       OBJ_FILES         generated object files without IDL object files
#       DISTCLEAN_FILES   files to be removed when cleaning up
#
#       SERVER_OBJS       all object files which build the component
#       SERVER_LIBS       libraries needed by the component
#       CLIENT_OBJS       all object files for the client library
#       CLIENT_LIBS       libraries needed by the client library
#
#----------------------------------------------------------------------------

# <asteck> ------------------------------------------------------------------
IDL_FILES    =  $(patsubst CommPersonDetectionObjects/gen/%.idl, %, $(wildcard CommPersonDetectionObjects/gen/*.idl)) 
EXPORT_FILES = 	$(wildcard CommPersonDetectionObjects/*.hh) $(wildcard CommPersonDetectionObjects/gen/*.hh)
INI_FILES    =
##----------------------------------------------------------------------------	

##----------------------------------------------------------------------------
## Libraries to build
##----------------------------------------------------------------------------

LIBS =	1

# Defaults

# LIB_CFLAGS = $(CFLAGS)
LIB_LFLAGS = $(LFLAGS)

# Library 1

# User Flags ----------------------------------------------------------------
USER_CPP_CFLAGS = 
# ---------------------------------------------------------------------------

# <asteck, dstampfer> ------------------------------------------------------------------
LIB_1_CFLAGS = $(USER_CPP_CFLAGS)
LIB_1_OBJ = $(patsubst %.cc,%.o,$(wildcard CommPersonDetectionObjects/*.cc CommPersonDetectionObjects/gen/*.cc))
LIB_1_LFLAGS =	$(LIB_LFLAGS)
LIB_1_BIN =	CommPersonDetectionObjects

 
GEN_DIR = $(OBJ_DIR)/CommPersonDetectionObjects/gen
BIN_DIR = $(SMART_ROOT)/bin
LIB_DIR = $(SMART_ROOT)/lib
SRC_DIR = $(SMART_ROOT)/src
INC_DIR = $(SMART_ROOT)/include
ETC_DIR = $(SMART_ROOT)/etc
CFLAGS += $(LIB_$(LIBS)_CFLAGS)
#----------------------------------------------------------------------------

#---------------------------------------------------------------------------- 
#
#---------------------------------------------------------------------------- 

OBJ_FILES = 	$(foreach lib, $(LIBS), $(LIB_$(lib)_OBJ)) \
		$(foreach cpnt, $(CPNT), $(CPNT_$(cpnt)_OBJ)) \
		$(foreach test, $(TEST), $(TEST_$(test)_OBJ))

LIBS_BIN =	$(patsubst %, lib%.a, $(foreach lib, $(LIBS), $(LIB_$(lib)_BIN)))
CPNT_BIN =	$(foreach cpnt, $(CPNT), $(CPNT_$(cpnt)_BIN))
TEST_BIN =	$(foreach test, $(TEST), $(TEST_$(test)_BIN))

MOCHEADERS = $(shell grep -l Q_OBJECT $(wildcard CommPersonDetectionObjects/*.hh) /dev/null)
MOCSOURCES = $(patsubst %.hh, %.moc.cc, $(MOCHEADERS))
MOCOBJECTS = $(patsubst %.hh, $(OBJ_DIR)/%.moc.o,  $(MOCHEADERS))

IDL_EXPORT   = $(addsuffix C.i,    $(IDL_FILES)) \
               $(addsuffix C.hh,   $(IDL_FILES)) \
               $(addsuffix S.i,    $(IDL_FILES)) \
               $(addsuffix S.hh,   $(IDL_FILES)) \
               $(addsuffix .idl,   $(IDL_FILES))
 
IDL_DEPEND   = $(addsuffix S.cc,   $(IDL_FILES)) \
               $(addsuffix S.hh,   $(IDL_FILES)) \
               $(addsuffix S.i,    $(IDL_FILES)) \
               $(addsuffix C.cc,   $(IDL_FILES)) \
               $(addsuffix C.hh,   $(IDL_FILES)) \
               $(addsuffix C.i,    $(IDL_FILES))
 
### <asteck> to delete files generated from IDL 
#old: IDL_CLEAN    = $(IDL_DEPEND)
IDL_CLEAN    = $(addprefix CommPersonDetectionObjects/gen/, $(IDL_DEPEND)) \
               $(addprefix $(OBJ_DIR)/, $(addsuffix S.o,   $(IDL_FILES))) \
               $(addprefix $(OBJ_DIR)/, $(addsuffix S_T.o, $(IDL_FILES))) \
               $(addprefix $(OBJ_DIR)/, $(addsuffix C.o,   $(IDL_FILES))) \
               $(addprefix $(INC_DIR)/CommPersonDetectionObjects/gen/, $(IDL_EXPORT)) 

EXPORT_CLEAN = $(addprefix $(INC_DIR)/, $(EXPORT_FILES))

INI_CLEAN    = $(addprefix $(ETC_DIR)/, $(INI_FILES))

CLEAN_FILES = $(IDL_CLEAN) \
              $(EXPORT_CLEAN) \
              $(INI_CLEAN) \
              $(OBJ_DIR) \
              $(MOCSOURCES)
 
TAO_IDLFLAGS += -cs C.cc -hc C.hh -ss S.cc -hs S.hh -sT S_T.cc -hT S_T.hh -ci C.i -si S.i -I $(INC_DIR)

DISTCLEAN_FILES = $(OBJ_DIR) *~ \
		$(addprefix $(LIB_DIR)/, $(LIBS_BIN)) \
		$(addprefix $(BIN_DIR)/, $(CPNT_BIN)) \
		$(addprefix $(TST_DIR)/, $(TEST_BIN)) \
		$(addprefix $(INC_DIR)/CommPersonDetectionObjects/gen/, $(addsuffix .idl,   $(IDL_FILES))) \
		$(INC_DIR)/CommPersonDetectionObjects \

##
## Compulsory rules
##

all: $(IDL_DEPEND)
	$(MAKE) export $(DEPEND)
	$(MAKE) build

build: build-libs build-components

build-libs: $(OBJ_DIR) $(LIB_DIR) $(BIN_DIR) $(TST_DIR) \
	$(addprefix $(LIB_DIR)/, $(LIBS_BIN))

build-components: $(OBJ_DIR) $(LIB_DIR) $(BIN_DIR) $(TST_DIR) \
	$(addprefix $(BIN_DIR)/, $(CPNT_BIN))

build-tests: $(OBJ_DIR) $(LIB_DIR) $(BIN_DIR) $(TST_DIR) \
	$(addprefix $(TST_DIR)/, $(TEST_BIN))

#<asteck> added: $(SILENT) $(MKDIR) $(GEN_DIR)
export: $(IDL_EXPORT)
	$(ECHO) "   ---- Installing header files etc."
	$(SILENT) $(MKDIR) $(ETC_DIR)
	$(SILENT) $(MKDIR) $(INC_DIR)
	$(SILENT) $(MKDIR) $(INC_DIR)/CommPersonDetectionObjects/gen    # asteck added
	$(SILENT) $(MKDIR) $(GEN_DIR)
	#$(foreach exp,$(IDL_EXPORT),$(INSTALL_H) `pwd`/$(exp) $(INC_DIR);)
	$(foreach exp,$(IDL_EXPORT),$(INSTALL_H) `pwd`/CommPersonDetectionObjects/gen/$(exp) $(INC_DIR)/CommPersonDetectionObjects/gen;)
	$(foreach exp,$(EXPORT_FILES),$(INSTALL_H) `pwd`/$(exp) $(INC_DIR)/$(exp);)
	#$(foreach exp,$(EXPORT_FILES_GEN),$(INSTALL_H) `pwd`/gen/$(exp) $(INC_DIR)/gen;)   # asteck added
	$(foreach exp,$(INI_FILES),$(INSTALL_H) `pwd`/$(exp) $(ETC_DIR);)
	#$(foreach exp,$(IDL_FILES),$(INSTALL_H) `pwd`/gen/$(exp).idl $(INC_DIR)/gen;)  #dst

clean:
	$(RM) $(CLEAN_FILES)

distclean: clean
	$(RM) $(DEPEND) Makefile.depend* $(DISTCLEAN_FILES)

##
## local rules
##

$(OBJ_DIR) $(LIB_DIR) $(BIN_DIR) $(TST_DIR):
	$(SILENT) $(MKDIR) $@

$(addprefix $(LIB_DIR)/,$(LIBS_BIN)): %: $(addprefix $(OBJ_DIR)/,$(foreach i, $(LIBS), $(LIB_$(i)_OBJ)))
	$(foreach i, $(LIBS), \
	  $(if $(findstring lib$(LIB_$(i)_BIN).a,$@), \
	    $(if $(filter $(addprefix $(OBJ_DIR)/,$(LIB_$(i)_OBJ)),$?), \
	      $(SILENT) $(AR) $@ $(addprefix $(OBJ_DIR)/, $(LIB_$(i)_OBJ)) \
	    ) \
	  ) \
	)
	$(foreach i, $(LIBS), \
	  $(if $(findstring lib$(LIB_$(i)_BIN).a,$@), \
	    $(if $(filter $(addprefix $(OBJ_DIR)/,$(LIB_$(i)_OBJ)),$?), \
	      $(SILENT) $(RANLIB) $@ \
	    ) \
	  ) \
	)

$(addprefix $(BIN_DIR)/,$(CPNT_BIN)): %: $(addprefix $(LIB_DIR)/,$(LIB_NAMES)) $(addprefix $(OBJ_DIR)/,$(foreach i, $(CPNT), $(CPNT_$(i)_OBJ)))
	$(foreach i, $(CPNT), \
	  $(if $(findstring $(CPNT_$(i)_BIN),$@), \
	    $(if $(filter $(addprefix $(LIB_DIR)/,$(LIB_NAMES)) $(addprefix $(OBJ_DIR)/,$(CPNT_$(i)_OBJ)),$?), \
	      $(CXX) $(INCLUDES) $(LIB_DIRS) -o $@ $(addprefix $(OBJ_DIR)/,$(CPNT_$(i)_OBJ)) $(CPNT_$(i)_LFLAGS) \
	    ) \
	  ) \
	)

$(addprefix $(TST_DIR)/,$(TEST_BIN)): %: $(addprefix $(LIB_DIR)/,$(LIB_NAMES)) $(addprefix $(OBJ_DIR)/,$(foreach i, $(TEST), $(TEST_$(i)_OBJ)))
	$(foreach i, $(TEST), \
	  $(if $(findstring $(TEST_$(i)_BIN),$@), \
	    $(if $(filter $(addprefix $(LIB_DIR)/,$(LIB_NAMES)) $(addprefix $(OBJ_DIR)/,$(TEST_$(i)_OBJ)),$?), \
	      $(CXX) $(INCLUDES) $(LIB_DIRS) -o $@ $(addprefix $(OBJ_DIR)/,$(TEST_$(i)_OBJ)) $(TEST_$(i)_LFLAGS) \
	    ) \
	  ) \
	)

# This is fun, isn't it? ;-)
#
# These rules are complicated since we want to build a dynamic number of targets
# with a static number of rules. The structure is as follows:
#
# [target set]: %: [requirement set]
# 	FOR EACH possible target DO
# 	  IF this is the target that shall be built THEN
# 	    IF this target depends on some files that have actually changed ($?) THEN
# 	      build it
# 	    ENDIF
# 	  ENDIF
# 	DONE

##
## Standard suffix, version, packaging and dep rules
##
include $(RULES)

# <asteck> added:  gen/ and -o gen/
%S.cc %S.hh %S.i %C.cc %C.cc %C.hh %C.i %.idl: CommPersonDetectionObjects/gen/%.idl
	$(ECHO) "    ---- Processing $< (IDL)"
	$(IDL) $(TAO_IDLFLAGS) -I$(SMART_ROOT)/src/interfaceClasses/smartBasicComm -o CommPersonDetectionObjects/gen/ $<

$(MOCOBJECTS): $(OBJ_DIR)/%.moc.o: %.hh
$(MOCSOURCES): %.moc.cc: %.hh
	$(QTDIR)/bin/moc $< -o $@
	