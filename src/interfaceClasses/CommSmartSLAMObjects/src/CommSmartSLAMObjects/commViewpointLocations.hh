//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2010 Matthias Lutz
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Library".
//  It provides standardized patterns for communication between
//  different components.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//
// --------------------------------------------------------------------------

#ifndef _COMM_COMMSMARTSLAMOBJECTS_COMMVIEWPOINTLOCATIONS_HH
#define _COMM_COMMSMARTSLAMOBJECTS_COMMVIEWPOINTLOCATIONS_HH

#include <string>

// include files of classes
#include <CommSmartSLAMObjects/gen/structViewpointLocationC.hh>

// include header-files of included communication objects

// include enums


// include client-side file generated by IDL compiler
#include "CommSmartSLAMObjects/gen/smartCommViewpointLocationsC.hh"

#include "ViewpointLocationDatabase.h"

namespace CommSmartSLAMObjects
{

class CommViewpointLocations
{
protected:
	CommSmartSLAMObjectsIDL::CommViewpointLocations idl_CommViewpointLocations;

public:
	CommViewpointLocations()
	{
	}

	CommViewpointLocations(
			const CommSmartSLAMObjectsIDL::CommViewpointLocations &obj) :
		idl_CommViewpointLocations(obj)
	{
	}


	operator CommSmartSLAMObjectsIDL::CommViewpointLocations() const
	{
		return idl_CommViewpointLocations;
	}


	virtual ~CommViewpointLocations()
	{
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);

	static inline std::string identifier(void)
	{
		return "CommSmartSLAMObjects::CommViewpointLocations";
	}

	//
	// user interfaces

	inline void set(std::vector<ViewpointLocation> viewpointLoc )
	{

		long entries = viewpointLoc.size();
		idl_CommViewpointLocations.database.length(entries);


		for(long i=0;i<entries;i++){

			idl_CommViewpointLocations.database[i].observationCount = viewpointLoc[i].getObservationCount();
			idl_CommViewpointLocations.database[i].possibleObservations = viewpointLoc[i].getPossibleObservations();

			idl_CommViewpointLocations.database[i].id = viewpointLoc[i].getId();
			mrpt::poses::CPose2D* mean = viewpointLoc[i].getMeanUnsafe();
			idl_CommViewpointLocations.database[i].mean.m_phi = mean->phi();
			idl_CommViewpointLocations.database[i].mean.m_is3D = mean->is3DPoseOrPoint();
			idl_CommViewpointLocations.database[i].mean.m_x = mean->x();
			idl_CommViewpointLocations.database[i].mean.m_y = mean->y();
			idl_CommViewpointLocations.database[i].mean.m_z = mean->z();
			mrpt::math::CMatrixDouble22* v_cov;
			v_cov = viewpointLoc[i].getCovUnsafe();
			idl_CommViewpointLocations.database[i].cov.m_00 = v_cov->get_unsafe(0,0);
			idl_CommViewpointLocations.database[i].cov.m_01 = v_cov->get_unsafe(0,1);
			idl_CommViewpointLocations.database[i].cov.m_10 = v_cov->get_unsafe(1,0);
			idl_CommViewpointLocations.database[i].cov.m_11 = v_cov->get_unsafe(1,1);

			mrpt::math::CMatrixDouble22* v_invCov;
			v_invCov = viewpointLoc[i].getInvCovUnsafe();
			idl_CommViewpointLocations.database[i].invCov.m_00 = v_invCov->get_unsafe(0,0);
			idl_CommViewpointLocations.database[i].invCov.m_01 = v_invCov->get_unsafe(0,1);
			idl_CommViewpointLocations.database[i].invCov.m_10 = v_invCov->get_unsafe(1,0);
			idl_CommViewpointLocations.database[i].invCov.m_11 = v_invCov->get_unsafe(1,1);
		}
	}

	inline void get( std::vector<ViewpointLocation> & viewpointLoc )
	{

		long entries = idl_CommViewpointLocations.database.length();
		viewpointLoc.resize(entries);

		for(long i=0;i<entries;i++){

			mrpt::poses::CPose2D v_mean;
			v_mean.phi(idl_CommViewpointLocations.database[i].mean.m_phi);
			v_mean.x(idl_CommViewpointLocations.database[i].mean.m_x);

			//mean. idl_CommViewpointLocations.database[i].mean.m_is3D
			v_mean.y(idl_CommViewpointLocations.database[i].mean.m_y);
			v_mean.z(idl_CommViewpointLocations.database[i].mean.m_z);

			mrpt::math::CMatrixDouble22 v_cov;
			v_cov(0,0) = idl_CommViewpointLocations.database[i].cov.m_00;
			v_cov(0,1) = idl_CommViewpointLocations.database[i].cov.m_01;
			v_cov(1,0) = idl_CommViewpointLocations.database[i].cov.m_10;
			v_cov(1,1) = idl_CommViewpointLocations.database[i].cov.m_11;

			mrpt::math::CMatrixDouble22 v_invCov;
			v_invCov(0,0) = idl_CommViewpointLocations.database[i].invCov.m_00;
			v_invCov(0,1) = idl_CommViewpointLocations.database[i].invCov.m_01;
			v_invCov(1,0) = idl_CommViewpointLocations.database[i].invCov.m_10;
			v_invCov(1,1) = idl_CommViewpointLocations.database[i].invCov.m_11;


			ViewpointLocation VL(idl_CommViewpointLocations.database[i].id,
								  v_mean, v_cov,
								  idl_CommViewpointLocations.database[i].observationCount ,
								  idl_CommViewpointLocations.database[i].possibleObservations,v_invCov);

			viewpointLoc[i]=VL;

		}
	}
};

}
#endif
