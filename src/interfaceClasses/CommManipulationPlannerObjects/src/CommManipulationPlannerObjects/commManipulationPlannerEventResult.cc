//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.8.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------
//  Copyright (C) 2010 Jonas Brich
//
//        brich@mail.hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "CommManipulationPlannerObjects".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//-------------------------------------------------------------------------

#include "commManipulationPlannerEventResult.hh"

using namespace CommManipulationPlannerObjects;

void CommManipulationPlannerEventResult::get(CORBA::Any &a) const
{
	a <<= idl_CommManipulationPlannerEventResult;
}

void CommManipulationPlannerEventResult::set(const CORBA::Any &a)
{
	CommManipulationPlannerObjectsIDL::CommManipulationPlannerEventResult
			*tmp_cmd;
	if (a >>= tmp_cmd)
	{
		idl_CommManipulationPlannerEventResult = *tmp_cmd;
	}
}

void CommManipulationPlannerEventResult::get(char* r) const
{
	switch((ManipulationPlannerEvent) idl_CommManipulationPlannerEventResult.event)
	{

	case ManipulationPlannerEvent::MANIPULATOR_SYNC_FAIL:

	{
		strcpy(r,"(MANIPULATOR SYNC FAIL)");
		break;
	}

	case ManipulationPlannerEvent::NO_IKSOLUTION_FOUND:
	{
		strcpy(r,"(NO IK SOLUTION FOUND)");
		break;
	}

	case ManipulationPlannerEvent::PATH_FOUND:
	{
		strcpy(r,"(PATH FOUND)");
		break;
	}

	case ManipulationPlannerEvent::PLANNING_PATH:
	{
		strcpy(r,"(PLANNING PATH)");
		break;
	}

	case ManipulationPlannerEvent::NO_PATH_FOUND:
	{
		strcpy(r,"(NO PATH FOUND)");
		break;
	}

	default:
	{
		strcpy(r,"(ERROR)");
		break;
	}

	} // switch
}
