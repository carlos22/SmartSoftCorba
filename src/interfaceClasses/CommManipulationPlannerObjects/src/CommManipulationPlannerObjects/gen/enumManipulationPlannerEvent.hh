//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.4
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _COMMMANIPULATIONPLANNEROBJECTS_ENUM_HH_MANIPULATIONPLANNEREVENT
#define _COMMMANIPULATIONPLANNEROBJECTS_ENUM_HH_MANIPULATIONPLANNEREVENT

#include <CommManipulationPlannerObjects/gen/enumManipulationPlannerEventC.hh>
#include <string>
#include <ostream>

namespace CommManipulationPlannerObjects
{

class ManipulationPlannerEvent
{
public:
	enum literal
	{

		MANIPULATOR_SYNC_FAIL = CommManipulationPlannerObjectsIDL::LITERAL_MANIPULATOR_SYNC_FAIL,

		NO_IKSOLUTION_FOUND = CommManipulationPlannerObjectsIDL::LITERAL_NO_IKSOLUTION_FOUND,

		NO_PATH_FOUND = CommManipulationPlannerObjectsIDL::LITERAL_NO_PATH_FOUND,

		PATH_FOUND = CommManipulationPlannerObjectsIDL::LITERAL_PATH_FOUND,

		PLANNING_PATH = CommManipulationPlannerObjectsIDL::LITERAL_PLANNING_PATH,

		UNKNOWN = CommManipulationPlannerObjectsIDL::LITERAL_UNKNOWN
	};

	ManipulationPlannerEvent()
	{
	}

	ManipulationPlannerEvent(literal t)
	{
		value = t;
	}

	operator literal()
	{
		return value;
	}

	ManipulationPlannerEvent(
			CommManipulationPlannerObjectsIDL::ENUM_ManipulationPlannerEvent t)
	{
		value = (literal) t;
	}

	bool operator ==(ManipulationPlannerEvent& t)
	{
		return this->value == t.value;
	}

	CommManipulationPlannerObjectsIDL::ENUM_ManipulationPlannerEvent get_value_idl()
	{
		return (CommManipulationPlannerObjectsIDL::ENUM_ManipulationPlannerEvent) value;
	}

	literal get_value() const
	{
		return value;
	}

	std::string get_string() const
	{
		switch (value)
		{

		case MANIPULATOR_SYNC_FAIL:
			return "ManipulationPlannerEvent::MANIPULATOR_SYNC_FAIL";
			break;

		case NO_IKSOLUTION_FOUND:
			return "ManipulationPlannerEvent::NO_IKSOLUTION_FOUND";
			break;

		case NO_PATH_FOUND:
			return "ManipulationPlannerEvent::NO_PATH_FOUND";
			break;

		case PATH_FOUND:
			return "ManipulationPlannerEvent::PATH_FOUND";
			break;

		case PLANNING_PATH:
			return "ManipulationPlannerEvent::PLANNING_PATH";
			break;

		case UNKNOWN:
			return "ManipulationPlannerEvent::UNKNOWN";
			break;

		default:
			return "UNKNOWN!";
			break;
		}
	}

private:
	literal value;
};

inline std::ostream &operator<<(std::ostream &os,
		const ManipulationPlannerEvent &e)
{
	os << e.get_string();
	return os;
}

}
#endif
