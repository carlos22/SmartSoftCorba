//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _COMMMANIPULATIONPLANNEROBJECTS_ENUM_HH_MANIPULATIONPLANNERPARAMETERMODE
#define _COMMMANIPULATIONPLANNEROBJECTS_ENUM_HH_MANIPULATIONPLANNERPARAMETERMODE

#include <CommManipulationPlannerObjects/gen/enumManipulationPlannerParameterModeC.hh>
#include <string>
#include <ostream>

namespace CommManipulationPlannerObjects
{

class ManipulationPlannerParameterMode
{
public:
	enum literal
	{

		ENV_CLEAR = CommManipulationPlannerObjectsIDL::LITERAL_ENV_CLEAR,

		ENV_LOAD_FILE = CommManipulationPlannerObjectsIDL::LITERAL_ENV_LOAD_FILE,

		ENV_LOAD_OBJECTRECOGNITION = CommManipulationPlannerObjectsIDL::LITERAL_ENV_LOAD_OBJECTRECOGNITION,

		ENV_SAVE_FILE = CommManipulationPlannerObjectsIDL::LITERAL_ENV_SAVE_FILE,

		GRASPING_ADVANCED = CommManipulationPlannerObjectsIDL::LITERAL_GRASPING_ADVANCED,

		GRASPING_NONE = CommManipulationPlannerObjectsIDL::LITERAL_GRASPING_NONE,

		GRASPING_SIMPLE = CommManipulationPlannerObjectsIDL::LITERAL_GRASPING_SIMPLE,

		OBJ_ADD = CommManipulationPlannerObjectsIDL::LITERAL_OBJ_ADD,

		OBJ_COMPUTEGRASPTABLE = CommManipulationPlannerObjectsIDL::LITERAL_OBJ_COMPUTEGRASPTABLE,

		OBJ_DELETE = CommManipulationPlannerObjectsIDL::LITERAL_OBJ_DELETE,

		OBJ_MOVE = CommManipulationPlannerObjectsIDL::LITERAL_OBJ_MOVE,

		OPENRAVE_GRASPOBJ = CommManipulationPlannerObjectsIDL::LITERAL_OPENRAVE_GRASPOBJ,

		OPENRAVE_RELEASEOBJ = CommManipulationPlannerObjectsIDL::LITERAL_OPENRAVE_RELEASEOBJ,

		PARALLELIZATION_OFF = CommManipulationPlannerObjectsIDL::LITERAL_PARALLELIZATION_OFF,

		PARALLELIZATION_ON = CommManipulationPlannerObjectsIDL::LITERAL_PARALLELIZATION_ON,

		SIMULATION_PLAN_ALL = CommManipulationPlannerObjectsIDL::LITERAL_SIMULATION_PLAN_ALL,

		SIMULATION_TEST_IK_ONLY = CommManipulationPlannerObjectsIDL::LITERAL_SIMULATION_TEST_IK_ONLY
	};

	ManipulationPlannerParameterMode()
	{
	}

	ManipulationPlannerParameterMode(literal t)
	{
		value = t;
	}

	operator literal()
	{
		return value;
	}

	ManipulationPlannerParameterMode(
			CommManipulationPlannerObjectsIDL::ENUM_ManipulationPlannerParameterMode t)
	{
		value = (literal) t;
	}

	bool operator ==(ManipulationPlannerParameterMode& t)
	{
		return this->value == t.value;
	}

	CommManipulationPlannerObjectsIDL::ENUM_ManipulationPlannerParameterMode get_value_idl()
	{
		return (CommManipulationPlannerObjectsIDL::ENUM_ManipulationPlannerParameterMode) value;
	}

	literal get_value() const
	{
		return value;
	}

	std::string get_string() const
	{
		switch (value)
		{

		case ENV_CLEAR:
			return "ManipulationPlannerParameterMode::ENV_CLEAR";
			break;

		case ENV_LOAD_FILE:
			return "ManipulationPlannerParameterMode::ENV_LOAD_FILE";
			break;

		case ENV_LOAD_OBJECTRECOGNITION:
			return "ManipulationPlannerParameterMode::ENV_LOAD_OBJECTRECOGNITION";
			break;

		case ENV_SAVE_FILE:
			return "ManipulationPlannerParameterMode::ENV_SAVE_FILE";
			break;

		case GRASPING_ADVANCED:
			return "ManipulationPlannerParameterMode::GRASPING_ADVANCED";
			break;

		case GRASPING_NONE:
			return "ManipulationPlannerParameterMode::GRASPING_NONE";
			break;

		case GRASPING_SIMPLE:
			return "ManipulationPlannerParameterMode::GRASPING_SIMPLE";
			break;

		case OBJ_ADD:
			return "ManipulationPlannerParameterMode::OBJ_ADD";
			break;

		case OBJ_COMPUTEGRASPTABLE:
			return "ManipulationPlannerParameterMode::OBJ_COMPUTEGRASPTABLE";
			break;

		case OBJ_DELETE:
			return "ManipulationPlannerParameterMode::OBJ_DELETE";
			break;

		case OBJ_MOVE:
			return "ManipulationPlannerParameterMode::OBJ_MOVE";
			break;

		case OPENRAVE_GRASPOBJ:
			return "ManipulationPlannerParameterMode::OPENRAVE_GRASPOBJ";
			break;

		case OPENRAVE_RELEASEOBJ:
			return "ManipulationPlannerParameterMode::OPENRAVE_RELEASEOBJ";
			break;

		case PARALLELIZATION_OFF:
			return "ManipulationPlannerParameterMode::PARALLELIZATION_OFF";
			break;

		case PARALLELIZATION_ON:
			return "ManipulationPlannerParameterMode::PARALLELIZATION_ON";
			break;

		case SIMULATION_PLAN_ALL:
			return "ManipulationPlannerParameterMode::SIMULATION_PLAN_ALL";
			break;

		case SIMULATION_TEST_IK_ONLY:
			return "ManipulationPlannerParameterMode::SIMULATION_TEST_IK_ONLY";
			break;

		default:
			return "UNKNOWN!";
			break;
		}
	}

private:
	literal value;
};

inline std::ostream &operator<<(std::ostream &os,
		const ManipulationPlannerParameterMode &e)
{
	os << e.get_string();
	return os;
}

}
#endif
