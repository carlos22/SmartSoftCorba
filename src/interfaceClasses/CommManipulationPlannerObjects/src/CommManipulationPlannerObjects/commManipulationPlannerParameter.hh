//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.8.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------
//  Copyright (C) 2010 Jonas Brich
//
//        brich@mail.hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "CommManipulationPlannerObjects".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------

#ifndef _COMM_COMMMANIPULATIONPLANNEROBJECTS_COMMMANIPULATIONPLANNERPARAMETER_HH
#define _COMM_COMMMANIPULATIONPLANNEROBJECTS_COMMMANIPULATIONPLANNERPARAMETER_HH

#include <string>
#include <iostream>

// include files of classes

// include header-files of included communication objects

// include enums
#include <CommManipulationPlannerObjects/gen/enumManipulationPlannerParameterMode.hh>

// include client-side file generated by IDL compiler
#include "CommManipulationPlannerObjects/gen/smartCommManipulationPlannerParameterC.hh"

#define LISP_SEPARATOR " ()\n"

namespace CommManipulationPlannerObjects {

class CommManipulationPlannerParameter {
protected:
	CommManipulationPlannerObjectsIDL::CommManipulationPlannerParameter idl_CommManipulationPlannerParameter;

public:
	CommManipulationPlannerParameter() {
	}

	CommManipulationPlannerParameter(const CommManipulationPlannerObjectsIDL::CommManipulationPlannerParameter &obj) :
		idl_CommManipulationPlannerParameter(obj) {
	}

	virtual ~CommManipulationPlannerParameter() {
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);

	inline const CommManipulationPlannerObjectsIDL::CommManipulationPlannerParameter &get() const {
		return idl_CommManipulationPlannerParameter;
	}

	inline void set(const CommManipulationPlannerObjectsIDL::CommManipulationPlannerParameter &obj) {
		idl_CommManipulationPlannerParameter = obj;
	}

	static inline std::string identifier(void) {
		return "CommManipulationPlannerObjects::CommManipulationPlannerParameter";
	}

	//
	// user interfaces

	// ----------------------------------------------------
	//
	// handle tag to OpenRave
	//
	// input
	//	 ENV_CLEAR
	//   ENV_LOAD_OBJECTRECOGNITION ?id
	//   ENV_LOAD_FILE ?id
	//   ENV_SAVE_FILE ?id
	//   OBJ_DELETE ?id
	//	 OBJ_ADD ?id, type
	//	 OBJ_MOVE ?id, x_coord, y_coord, z_coord
	//   OBJ_COMPUTEGRASPTABLE ?id
	//   OPENRAVE_GRASPOBJ ?id
	//   OPENRAVE_RELEASEOBJ ?id
	// 	 PARALLELIZATION_ON
	//   PARALLELIZATION_OFF
	//   GRASPING_SIMPLE ?lowerHeightBound, upperHeightBound, lowerDepthBound, upperDepthBound, lowerAngleBound, upperAngleBound
	//   GRASPING_ADVANCED
	//   GRASPING_NONE
	//	 SIMULATION_TEST_IK_ONLY
	//	 SIMULATION_PLAN_ALL
	// output
	//   0  everything ok
	//  -1  format error occured
	// ----------------------------------------------------
	inline int set(std::string &inString) {
		char *param = (char *) NULL;
		char *input = (char *) NULL;

		int error = 0;

		input = (char *) inString.c_str();

		do {
			param = strsep(&input, LISP_SEPARATOR);
		} while ((param != NULL) && (strlen(param) == 0));

		// --------------------
		// set ENV_CLEAR
		// --------------------
		if (strcasecmp(param, "ENV_CLEAR") == 0) {
			idl_CommManipulationPlannerParameter.mode = ManipulationPlannerParameterMode(
					ManipulationPlannerParameterMode::ENV_CLEAR).get_value_idl();
		}
		// --------------------
		// set ENV_LOAD_OBJECTRECOGNITION(id)
		// --------------------
		else if (strcasecmp(param, "ENV_LOAD_OBJECTRECOGNITION") == 0) {
			idl_CommManipulationPlannerParameter.mode = ManipulationPlannerParameterMode(
					ManipulationPlannerParameterMode::ENV_LOAD_OBJECTRECOGNITION).get_value_idl();

			if (error == 0) {
				do {
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%d", &idl_CommManipulationPlannerParameter.parameter01) == 1)) {
					// everything ok
				} else {
					error = -1;
				}
			}
		}
		// --------------------
		// set ENV_LOAD_FILE(id)
		// --------------------
		else if (strcasecmp(param, "ENV_LOAD_FILE") == 0) {
			idl_CommManipulationPlannerParameter.mode = ManipulationPlannerParameterMode(
					ManipulationPlannerParameterMode::ENV_LOAD_FILE).get_value_idl();

			if (error == 0) {
				do {
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%d", &idl_CommManipulationPlannerParameter.parameter01) == 1)) {
					// everything ok
				} else {
					error = -1;
				}
			}
		}
		// --------------------
		// set OBJ_DELETE(id)
		// --------------------
		else if (strcasecmp(param, "OBJ_DELETE") == 0) {
			idl_CommManipulationPlannerParameter.mode = ManipulationPlannerParameterMode(
					ManipulationPlannerParameterMode::OBJ_DELETE).get_value_idl();

			if (error == 0) {
				do {
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%d", &idl_CommManipulationPlannerParameter.parameter01) == 1)) {
					// everything ok
				} else {
					error = -1;
				}
			}
		}
		// --------------------
		// set OBJ_ADD(id, type)
		// --------------------
		else if (strcasecmp(param, "OBJ_ADD") == 0) {
			idl_CommManipulationPlannerParameter.mode = ManipulationPlannerParameterMode(
					ManipulationPlannerParameterMode::OBJ_ADD).get_value_idl();

			if (error == 0) {
				do {
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%d", &idl_CommManipulationPlannerParameter.parameter01) == 1)) {
					// everything ok
				} else {
					error = -1;
				}

				do {
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL)) {
					TAO::String_Manager manager(param);
					idl_CommManipulationPlannerParameter.parameter08 = manager;
				} else {
					error = -1;
				}
			}
		}
		// -------------------------
		// set OBJ_MOVE(id, x, y, z)
		// -------------------------
		else if (strcasecmp(param, "OBJ_MOVE") == 0) {
			idl_CommManipulationPlannerParameter.mode = ManipulationPlannerParameterMode(
					ManipulationPlannerParameterMode::OBJ_MOVE).get_value_idl();

			if (error == 0) {
				do {
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%d", &idl_CommManipulationPlannerParameter.parameter01) == 1)) {
					// everything ok
				} else {
					error = -1;
				}

				do {
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%lf", &idl_CommManipulationPlannerParameter.parameter02) == 1)) {
					// everything ok
				} else {
					error = -1;
				}

				do {
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%lf", &idl_CommManipulationPlannerParameter.parameter03) == 1)) {
					// everything ok
				} else {
					error = -1;
				}

				do {
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%lf", &idl_CommManipulationPlannerParameter.parameter04) == 1)) {
					// everything ok
				} else {
					error = -1;
				}
			}
		}
		// --------------------
		// set ENV_SAVE_FILE(id)
		// --------------------
		else if (strcasecmp(param, "ENV_SAVE_FILE") == 0) {
			idl_CommManipulationPlannerParameter.mode = ManipulationPlannerParameterMode(
					ManipulationPlannerParameterMode::ENV_SAVE_FILE).get_value_idl();

			if (error == 0) {
				do {
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%d", &idl_CommManipulationPlannerParameter.parameter01) == 1)) {
					// everything ok
				} else {
					error = -1;
				}
			}
		}
		// --------------------
		// set OBJ_COMPUTEGRASPTABLE(id)
		// --------------------
		else if (strcasecmp(param, "OBJ_COMPUTEGRASPTABLE") == 0) {
			idl_CommManipulationPlannerParameter.mode = ManipulationPlannerParameterMode(
					ManipulationPlannerParameterMode::OBJ_COMPUTEGRASPTABLE).get_value_idl();

			if (error == 0) {
				do {
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%d", &idl_CommManipulationPlannerParameter.parameter01) == 1)) {
					// everything ok
				} else {
					error = -1;
				}
			}
		}
		// --------------------
		// set OPENRAVE_GRASPOBJ(id)
		// --------------------
		else if (strcasecmp(param, "OPENRAVE_GRASPOBJ") == 0) {
			idl_CommManipulationPlannerParameter.mode = ManipulationPlannerParameterMode(
					ManipulationPlannerParameterMode::OPENRAVE_GRASPOBJ).get_value_idl();

			if (error == 0) {
				do {
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%d", &idl_CommManipulationPlannerParameter.parameter01) == 1)) {
					// everything ok
				} else {
					error = -1;
				}
			}
		}
		// --------------------
		// set OPENRAVE_RELEASEOBJ(id)
		// --------------------
		else if (strcasecmp(param, "OPENRAVE_RELEASEOBJ") == 0) {
			idl_CommManipulationPlannerParameter.mode = ManipulationPlannerParameterMode(
					ManipulationPlannerParameterMode::OPENRAVE_RELEASEOBJ).get_value_idl();

			if (error == 0) {
				do {
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%d", &idl_CommManipulationPlannerParameter.parameter01) == 1)) {
					// everything ok
				} else {
					error = -1;
				}
			}
		}
		// --------------------
		// set PARALLELIZATION_ON
		// --------------------
		else if (strcasecmp(param, "PARALLELIZATION_ON") == 0) {
			idl_CommManipulationPlannerParameter.mode = ManipulationPlannerParameterMode(
					ManipulationPlannerParameterMode::PARALLELIZATION_ON).get_value_idl();
		}
		// --------------------
		// set PARALLELIZATION_OFF
		// --------------------
		else if (strcasecmp(param, "PARALLELIZATION_OFF") == 0) {
			idl_CommManipulationPlannerParameter.mode = ManipulationPlannerParameterMode(
					ManipulationPlannerParameterMode::PARALLELIZATION_OFF).get_value_idl();
		}
		// --------------------
		// set GRASPING_SIMPLE
		// --------------------
		else if (strcasecmp(param, "GRASPING_SIMPLE") == 0) {
			idl_CommManipulationPlannerParameter.mode = ManipulationPlannerParameterMode(
					ManipulationPlannerParameterMode::GRASPING_SIMPLE).get_value_idl();

			if (error == 0) {
				do {
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%lf", &idl_CommManipulationPlannerParameter.parameter02) == 1)) {
					// everything ok
				} else {
					error = -1;
				}

				do {
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%lf", &idl_CommManipulationPlannerParameter.parameter03) == 1)) {
					// everything ok
				} else {
					error = -1;
				}

				do {
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%lf", &idl_CommManipulationPlannerParameter.parameter04) == 1)) {
					// everything ok
				} else {
					error = -1;
				}

				do {
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%lf", &idl_CommManipulationPlannerParameter.parameter05) == 1)) {
					// everything ok
				} else {
					error = -1;
				}

				do {
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%lf", &idl_CommManipulationPlannerParameter.parameter06) == 1)) {
					// everything ok
				} else {
					error = -1;
				}

				do {
					param = strsep(&input, LISP_SEPARATOR);
				} while ((param != NULL) && (strlen(param) == 0));

				if ((param != NULL) && (sscanf(param, "%lf", &idl_CommManipulationPlannerParameter.parameter07) == 1)) {
					// everything ok
				} else {
					error = -1;
				}
			}
		}
		// --------------------
		// set GRASPING_ADVANCED
		// --------------------
		else if (strcasecmp(param, "GRASPING_ADVANCED") == 0) {
			idl_CommManipulationPlannerParameter.mode = ManipulationPlannerParameterMode(
					ManipulationPlannerParameterMode::GRASPING_ADVANCED).get_value_idl();
		}
		// --------------------
		// set GRASPING_NONE
		// --------------------
		else if (strcasecmp(param, "GRASPING_NONE") == 0) {
			idl_CommManipulationPlannerParameter.mode = ManipulationPlannerParameterMode(
					ManipulationPlannerParameterMode::GRASPING_NONE).get_value_idl();
		}
		// --------------------
		// set SIMULATION_TEST_IK_ONLY
		// --------------------
		else if (strcasecmp(param, "SIMULATION_TEST_IK_ONLY") == 0) {
			idl_CommManipulationPlannerParameter.mode = ManipulationPlannerParameterMode(
					ManipulationPlannerParameterMode::SIMULATION_TEST_IK_ONLY).get_value_idl();
		}
		// --------------------
		// set SIMULATION_PLAN_ALL
		// --------------------
		else if (strcasecmp(param, "SIMULATION_PLAN_ALL") == 0) {
			idl_CommManipulationPlannerParameter.mode = ManipulationPlannerParameterMode(
					ManipulationPlannerParameterMode::SIMULATION_PLAN_ALL).get_value_idl();
		}
		// --------------------
		// got garbage
		// --------------------
		else {
			error = -1;
		}

		return error;
	}

	/**
	 * Returns a tag which parameter is to set and the value for this parameter.
	 * @param tag Tag for the parameter
	 * @param value01 Variable in which the value for the parameter is set
	 */
	inline void get(ManipulationPlannerParameterMode &tag, int32_t &value01, double &value02, double &value03, double &value04,
			double &value05, double &value06, double &value07, std::string &type) const {
		tag = (ManipulationPlannerParameterMode) idl_CommManipulationPlannerParameter.mode;
		value01 = idl_CommManipulationPlannerParameter.parameter01;
		value02 = idl_CommManipulationPlannerParameter.parameter02;
		value03 = idl_CommManipulationPlannerParameter.parameter03;
		value04 = idl_CommManipulationPlannerParameter.parameter04;
		value05 = idl_CommManipulationPlannerParameter.parameter05;
		value06 = idl_CommManipulationPlannerParameter.parameter06;
		value07 = idl_CommManipulationPlannerParameter.parameter07;
		type = idl_CommManipulationPlannerParameter.parameter08;
	}

	/**
	 * Print the object to an output stream.
	 * @param os Output stream to which should be printed
	 */
	void print(std::ostream &os = std::cout) const;

};

//
// Implementation
//

inline std::ostream &operator<<(std::ostream &os, const CommManipulationPlannerParameter &param) {
	param.print(os);
	return os;
}
}
#endif
