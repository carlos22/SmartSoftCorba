//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.8.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------
//  Copyright (C) 2010 Jonas Brich
//
//        brich@mail.hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "CommManipulationPlannerObjects".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//-------------------------------------------------------------------------

#ifndef _COMM_COMMMANIPULATIONPLANNEROBJECTS_COMMMANIPULATIONTASKPLANNING_HH
#define _COMM_COMMMANIPULATIONPLANNEROBJECTS_COMMMANIPULATIONTASKPLANNING_HH

#include <string>
#include <iostream>

// include files of classes

// include header-files of included communication objects
#include <CommBasicObjects/commPose3d.hh>

// include enums


// include client-side file generated by IDL compiler
#include "CommManipulationPlannerObjects/gen/smartCommManipulationTaskPlanningC.hh"

namespace CommManipulationPlannerObjects
{

class CommManipulationTaskPlanning
{
protected:
	CommManipulationPlannerObjectsIDL::CommManipulationTaskPlanning
			idl_CommManipulationTaskPlanning;

public:
	CommManipulationTaskPlanning()
	{
	}

	CommManipulationTaskPlanning(
			const CommManipulationPlannerObjectsIDL::CommManipulationTaskPlanning &obj) :
		idl_CommManipulationTaskPlanning(obj)
	{
	}

	virtual ~CommManipulationTaskPlanning()
	{
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);

	inline const CommManipulationPlannerObjectsIDL::CommManipulationTaskPlanning &get() const
	{
		return idl_CommManipulationTaskPlanning;
	}

	inline void set(
			const CommManipulationPlannerObjectsIDL::CommManipulationTaskPlanning &obj)
	{
		idl_CommManipulationTaskPlanning = obj;
	}

	static inline std::string identifier(void)
	{
		return "CommManipulationPlannerObjects::CommManipulationTaskPlanning";
	}

	//
	// user interfaces

	inline void set_object_id(uint32_t id) {
		this->idl_CommManipulationTaskPlanning.objectId = id;
	}

	inline uint32_t get_object_id() const {
		return idl_CommManipulationTaskPlanning.objectId;
	}

	inline void set_end_pose(const double x, const double y, const double z, const double azimuth, const double elevation,
			const double roll, const double unit = 0.001) {
		this->idl_CommManipulationTaskPlanning.endPose.position.x = x * unit * 1000;
		this->idl_CommManipulationTaskPlanning.endPose.position.y = y * unit * 1000;
		this->idl_CommManipulationTaskPlanning.endPose.position.z = z * unit * 1000;

		this->idl_CommManipulationTaskPlanning.endPose.orientation.azimuth = azimuth;
		this->idl_CommManipulationTaskPlanning.endPose.orientation.elevation = elevation;
		this->idl_CommManipulationTaskPlanning.endPose.orientation.roll = roll;
	}

	inline void get_end_pose(double& x, double& y, double& z, double& azimuth, double& elevation, double& roll,
			const double unit = 0.001) const {
		x = this->idl_CommManipulationTaskPlanning.endPose.position.x * 0.001 / unit;
		y = this->idl_CommManipulationTaskPlanning.endPose.position.y * 0.001 / unit;
		z = this->idl_CommManipulationTaskPlanning.endPose.position.z * 0.001 / unit;

		azimuth = this->idl_CommManipulationTaskPlanning.endPose.orientation.azimuth;
		elevation = this->idl_CommManipulationTaskPlanning.endPose.orientation.elevation;
		roll = this->idl_CommManipulationTaskPlanning.endPose.orientation.roll;
	}

	inline void set_release_flag(bool flag) {
		this->idl_CommManipulationTaskPlanning.releaseObject = flag;
	}

	inline bool get_release_flag() const {
		return this->idl_CommManipulationTaskPlanning.releaseObject;
	}

	/**
	 * Print the object to an output stream.
	 * @param os Output stream to which should be printed
	 */
	void print(std::ostream &os = std::cout) const;

};

//
// Implementation
//

inline std::ostream &operator<<(std::ostream &os, const CommManipulationTaskPlanning &comm) {
	comm.print(os);
	return os;
}

}
#endif
