//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.8.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Library".
//  It provides standardized patterns for communication between
//  different components.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//
// --------------------------------------------------------------------------

#include "commPTUParameter.hh"

using namespace CommPTUObjects;

void CommPTUParameter::get(CORBA::Any &a) const {
	a <<= idl_CommPTUParameter;
}

void CommPTUParameter::set(const CORBA::Any &a) {
	CommPTUObjectsIDL::CommPTUParameter *tmp_cmd;
	if (a >>= tmp_cmd) {
		idl_CommPTUParameter = *tmp_cmd;
	}
}

std::string CommPTUParameter::tagToString(PTUTagType status) {
	switch (status) {
	case ::PTUTagType::UNSET:
		return "UNSET";

	case ::PTUTagType::RESET:
		return "RESET";

	case PTUTagType::ACCELERATION_PAN:
		return "ACCELERATION_PAN";

	case PTUTagType::ACCELERATION_TILT:
		return "ACCELERATION_TILT";

	case PTUTagType::SPEED_LIMIT_PAN:
		return "SPEED_LIMIT_PAN";

	case PTUTagType::SPEED_LIMIT_TILT:
		return "SPEED_LIMIT_TILT";

	case PTUTagType::SPEED_PAN:
		return "SPEED_PAN";

	case PTUTagType::SPEED_TILT:
		return "SPEED_TILT";

	case PTUTagType::START_UP_SPEED_PAN:
		return "START_UP_SPEED_PAN";

	case PTUTagType::START_UP_SPEED_TILT:
		return "START_UP_SPEED_TILT";

	case PTUTagType::SENSOR_OFFSET:
		return "SENSOR_OFFSET";

	}

	return "";
}

void CommPTUParameter::print(std::ostream &os) const {
	os << "CommPTUParameter (";
	os << "p1=" << idl_CommPTUParameter.parameter01 << ",p2=" << idl_CommPTUParameter.parameter02 << ",p3="
			<< idl_CommPTUParameter.parameter03 << ",p4=" << idl_CommPTUParameter.parameter04 << ",p5="
			<< idl_CommPTUParameter.parameter05 << ",p6=" << idl_CommPTUParameter.parameter06;
	os << "," << "flag=" << tagToString(idl_CommPTUParameter.tag);
	os << ")";
}
