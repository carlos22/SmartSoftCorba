//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.8.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Communication Library".
//  It provides standardized patterns for communication between
//  different components.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//
// --------------------------------------------------------------------------

#include "commPTUMoveRequest.hh"

using namespace CommPTUObjects;

void CommPTUMoveRequest::get(CORBA::Any &a) const
{
	a <<= idl_CommPTUMoveRequest;
}

void CommPTUMoveRequest::set(const CORBA::Any &a)
{
	CommPTUObjectsIDL::CommPTUMoveRequest *tmp_cmd;
	if (a >>= tmp_cmd)
	{
		idl_CommPTUMoveRequest = *tmp_cmd;
	}
}

std::string CommPTUMoveRequest::modeToString(PTUMoveFlag flag) {
	switch (flag) {

	case PTUMoveFlag::PAN_ABSOLUTE: {
		return "PAN_ABSOLUTE";
	}
	case PTUMoveFlag::PAN_RELATIVE: {
		return "PAN_RELATIVE";
	}
	case PTUMoveFlag::TILT_ABSOLUTE: {
		return "TILT_ABSOLUTE";
	}
	case PTUMoveFlag::TILT_RELATIVE: {
		return "TILT_RELATIVE";
	}
	case PTUMoveFlag::PAN_TILT_ABSOLUTE: {
		return "PAN_TILT_ABSOLUTE";
	}
	case PTUMoveFlag::PAN_TILT_RELATIVE: {
		return "PAN_TILT_RELATIVE";
	}
	case PTUMoveFlag::POSITION_ROBOT: {
		return "POSITION_ROBOT";
	}
	case PTUMoveFlag::POSITION_WORLD: {
		return "POSITION_WORLD";
	}
	}
}

void CommPTUMoveRequest::print(std::ostream &os) const {
	os << "CommPTUMoveRequest (\n";
	os << "pan=" << idl_CommPTUMoveRequest.pan << ",tilt=" << idl_CommPTUMoveRequest.tilt;
	os << ",\n" << "move_mode=" << modeToString(get_move_mode());
	os << "\n)";
}
