//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _COMMPTUOBJECTS_ENUM_HH_PTUMOVESTATUS
#define _COMMPTUOBJECTS_ENUM_HH_PTUMOVESTATUS

#include <CommPTUObjects/gen/enumPTUMoveStatusC.hh>
#include <string>
#include <ostream>

namespace CommPTUObjects
{

class PTUMoveStatus
{
public:
	enum literal
	{

		FAILURE = CommPTUObjectsIDL::LITERAL_FAILURE,

		HALTED = CommPTUObjectsIDL::LITERAL_HALTED,

		OK = CommPTUObjectsIDL::LITERAL_OK,

		PAN_OUT_OF_RANGE = CommPTUObjectsIDL::LITERAL_PAN_OUT_OF_RANGE,

		PAN_TILT_OUT_OF_RANGE = CommPTUObjectsIDL::LITERAL_PAN_TILT_OUT_OF_RANGE,

		TILT_OUT_OF_RANGE = CommPTUObjectsIDL::LITERAL_TILT_OUT_OF_RANGE
	};

	PTUMoveStatus()
	{
	}

	PTUMoveStatus(literal t)
	{
		value = t;
	}

	operator literal()
	{
		return value;
	}

	PTUMoveStatus(CommPTUObjectsIDL::ENUM_PTUMoveStatus t)
	{
		value = (literal) t;
	}

	bool operator ==(PTUMoveStatus& t)
	{
		return this->value == t.value;
	}

	CommPTUObjectsIDL::ENUM_PTUMoveStatus get_value_idl()
	{
		return (CommPTUObjectsIDL::ENUM_PTUMoveStatus) value;
	}

	literal get_value() const
	{
		return value;
	}

	std::string get_string() const
	{
		switch (value)
		{

		case FAILURE:
			return "PTUMoveStatus::FAILURE";
			break;

		case HALTED:
			return "PTUMoveStatus::HALTED";
			break;

		case OK:
			return "PTUMoveStatus::OK";
			break;

		case PAN_OUT_OF_RANGE:
			return "PTUMoveStatus::PAN_OUT_OF_RANGE";
			break;

		case PAN_TILT_OUT_OF_RANGE:
			return "PTUMoveStatus::PAN_TILT_OUT_OF_RANGE";
			break;

		case TILT_OUT_OF_RANGE:
			return "PTUMoveStatus::TILT_OUT_OF_RANGE";
			break;

		default:
			return "UNKNOWN!";
			break;
		}
	}

private:
	literal value;
};

inline std::ostream &operator<<(std::ostream &os, const PTUMoveStatus &e)
{
	os << e.get_string();
	return os;
}

}
#endif
