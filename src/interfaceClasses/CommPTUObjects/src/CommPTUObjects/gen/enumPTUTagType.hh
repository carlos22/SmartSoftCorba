//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.3
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _COMMPTUOBJECTS_ENUM_HH_PTUTAGTYPE
#define _COMMPTUOBJECTS_ENUM_HH_PTUTAGTYPE

#include <CommPTUObjects/gen/enumPTUTagTypeC.hh>
#include <string>
#include <ostream>

namespace CommPTUObjects
{

class PTUTagType
{
public:
	enum literal
	{

		ACCELERATION_PAN = CommPTUObjectsIDL::LITERAL_ACCELERATION_PAN,

		ACCELERATION_TILT = CommPTUObjectsIDL::LITERAL_ACCELERATION_TILT,

		RESET = CommPTUObjectsIDL::LITERAL_RESET,

		SENSOR_OFFSET = CommPTUObjectsIDL::LITERAL_SENSOR_OFFSET,

		SPEED_LIMIT_PAN = CommPTUObjectsIDL::LITERAL_SPEED_LIMIT_PAN,

		SPEED_LIMIT_TILT = CommPTUObjectsIDL::LITERAL_SPEED_LIMIT_TILT,

		SPEED_PAN = CommPTUObjectsIDL::LITERAL_SPEED_PAN,

		SPEED_TILT = CommPTUObjectsIDL::LITERAL_SPEED_TILT,

		START_UP_SPEED_PAN = CommPTUObjectsIDL::LITERAL_START_UP_SPEED_PAN,

		START_UP_SPEED_TILT = CommPTUObjectsIDL::LITERAL_START_UP_SPEED_TILT,

		UNSET = CommPTUObjectsIDL::LITERAL_UNSET
	};

	PTUTagType()
	{
	}

	PTUTagType(literal t)
	{
		value = t;
	}

	operator literal()
	{
		return value;
	}

	PTUTagType(CommPTUObjectsIDL::ENUM_PTUTagType t)
	{
		value = (literal) t;
	}

	bool operator ==(PTUTagType& t)
	{
		return this->value == t.value;
	}

	CommPTUObjectsIDL::ENUM_PTUTagType get_value_idl()
	{
		return (CommPTUObjectsIDL::ENUM_PTUTagType) value;
	}

	literal get_value() const
	{
		return value;
	}

	std::string get_string() const
	{
		switch (value)
		{

		case ACCELERATION_PAN:
			return "PTUTagType::ACCELERATION_PAN";
			break;

		case ACCELERATION_TILT:
			return "PTUTagType::ACCELERATION_TILT";
			break;

		case RESET:
			return "PTUTagType::RESET";
			break;

		case SENSOR_OFFSET:
			return "PTUTagType::SENSOR_OFFSET";
			break;

		case SPEED_LIMIT_PAN:
			return "PTUTagType::SPEED_LIMIT_PAN";
			break;

		case SPEED_LIMIT_TILT:
			return "PTUTagType::SPEED_LIMIT_TILT";
			break;

		case SPEED_PAN:
			return "PTUTagType::SPEED_PAN";
			break;

		case SPEED_TILT:
			return "PTUTagType::SPEED_TILT";
			break;

		case START_UP_SPEED_PAN:
			return "PTUTagType::START_UP_SPEED_PAN";
			break;

		case START_UP_SPEED_TILT:
			return "PTUTagType::START_UP_SPEED_TILT";
			break;

		case UNSET:
			return "PTUTagType::UNSET";
			break;

		default:
			return "UNKNOWN!";
			break;
		}
	}

private:
	literal value;
};

inline std::ostream &operator<<(std::ostream &os, const PTUTagType &e)
{
	os << e.get_string();
	return os;
}

}
#endif
