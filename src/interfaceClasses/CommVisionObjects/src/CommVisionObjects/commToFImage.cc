//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "CommManipulatorObjects".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------

#include "commToFImage.hh"

using namespace CommVisionObjects;

void CommToFImage::get(CORBA::Any &a) const
{
	a <<= idl_CommToFImage;
}

void CommToFImage::set(const CORBA::Any &a)
{
	CommVisionObjectsIDL::CommToFImage *tmp_cmd;
	if (a >>= tmp_cmd)
	{
		idl_CommToFImage = *tmp_cmd;
	}
}


void CommToFImage::save_xml(std::ostream &os, const std::string &indent) const {
	os << indent << "<tof_image>" << std::endl;
	get_sensor_pose().save_xml(os, indent + "  ");
	get_base_state().save_xml(os, indent + "  ");
	os << indent << "  <width>" << get_width() << "</width>" << std::endl;
	os << indent << "  <height>" << get_height() << "</height>" << std::endl;
	//os << indent << "  <size>" << get_size() << "</size>" << std::endl;
	os << indent << "  <image_size>" << get_image_size() << "</image_size>" << std::endl;

	os << indent << "  <min_distance>" << get_min_distance() << "</min_distance>" << std::endl;
	os << indent << "  <max_distance>" << get_max_distance() << "</max_distance>" << std::endl;
	os << indent << "  <opening_angle_x_axis>" << get_opening_angle_x_axis() << "</opening_angle_x_axis>" << std::endl;
	os << indent << "  <opening_angle_y_axis>" << get_opening_angle_y_axis() << "</opening_angle_y_axis>" << std::endl;
	os << indent << "  <integration_time>" << get_integration_time() << "</integration_time>" << std::endl;
	os << indent << "  <modulation_frequency>" << get_modulation_frequency() << "</modulation_frequency>" << std::endl;

	os << indent << "  <valid>" << (int) is_data_valid() << "</valid>" << std::endl;
	os << indent << "  <sequence_count>" << get_sequence_counter() << "</sequence_count>" << std::endl;

	os << indent << "  <distance_img>";
	os.write(reinterpret_cast<const char *> (get_distances()), get_image_size());
	os << "</distance_img>" << std::endl;

	os << indent << "  <aplitude_img>";
	os.write(reinterpret_cast<const char *> (get_amplitudes()), get_image_size());
	os << "</aplitude_img>" << std::endl;

	os << indent << "  <intensity_img>";
	os.write(reinterpret_cast<const char *> (get_intensities()), get_image_size());
	os << "</intensity_img>" << std::endl;

	os << indent << "  <cartesian_points>";
	os.write(reinterpret_cast<const char *> (get_coordinates()), get_image_size() * 3);
	os << "</cartesian_points>" << std::endl;

	os << indent << "</tof_image>" << std::endl;
}
