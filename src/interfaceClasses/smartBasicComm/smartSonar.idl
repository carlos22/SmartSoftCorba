// --------------------------------------------------------------------------
//
//  Copyright (C) 2003 Boris Kluge
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Basic Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  (partly based on work by Christian Schlegel and Pablo d'Angelo)
//
// --------------------------------------------------------------------------

#ifndef _SMART_IDL_SONAR
#define _SMART_IDL_SONAR

#include "smartTimeStamp.idl"
#include "smartBasePosition.idl"
#include "smartBaseState.idl"
#include "smartPosition3d.idl"
#include "smartDirection3d.idl"

//----------------------------------------
// Sonar 
//----------------------------------------

module SmartIDL 
{
  // Describe the position of a sonar sensor relative to the robot
  struct SonarSensorConfig
  {
    // the rigid robot component where the sonar is mounted (base or turret)
    RobotComponentEnum mount_point;

    // position of the sensor on the robot
    Position3d position;

    // direction of the sensor on the robot
    Direction3d direction;

    // half width of the sound beam
    double half_width; // [rad]
  };

  // Describe the configuration of the sonar system
  struct SonarSystemConfig
  {
    sequence<SonarSensorConfig> sonar_config;
  };

  // Measurement of a single sonar sensor
  struct SonarSensorData
  {
    unsigned short sensor_id;
    TimeStamp time_stamp;    // time of reading
    boolean is_valid;        // false if error occured, no echo returned etc.
    unsigned short distance; // [mm]
  };

  // Sonar System Measurement
  struct SonarSystemData
  {
    BaseState base_state;
    sequence<SonarSensorData> sonar_data;
  };

};

#endif

