// --------------------------------------------------------------------------
//
//  Copyright (C) 2003 Boris Kluge
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Basic Communication Classes".
//  It provides basic standardized data types for communication between
//  different components in the mobile robotics context. These classes
//  are designed to be used in conjunction with the SmartSoft Communication
//  Library.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//  (partly based on work by Christian Schlegel and Pablo d'Angelo)
//
// --------------------------------------------------------------------------

#ifndef _SMART_IDL_BASEPOSITION
#define _SMART_IDL_BASEPOSITION

module SmartIDL 
{
  enum RobotComponentEnum
  {
    ROBOT_BASE_COMPONENT, 
    ROBOT_STEER_COMPONENT, 
    ROBOT_TURRET_COMPONENT
  };

  // Describes the position and orientation of the robot
  // in the world coordinate system.
  // The robot is assumed to move horizontally without any tilt or roll
  struct BasePosition
  {

    // 3d position of a reference point on the robot in world coordinate system.
    double x;  // [mm]
    double y;  // [mm]
    double z;  // [mm]

    // Orientation of the robot in world coordinate system.
    //   Robots with differential drive: (Scout, Pioneer, many others)
    //     a_base == a_steer == a_turret
    //   Robots with turret: (RWI B21, Nomad 150/200, XR4000 etc.)
    //     (a_steer - a_base) and (a_turret - a_base) are assumed to be known without error.
    //     For the B21, a_steer == a_turret is fixed mechanically.
    //     a_base cannot be manipulated, but changes with time due to wheel slippage etc.
    // If this struct is used in a "Define/Update Position" command, 
    // only the a_base value is used, the other two values will be updated
    // relative to the new a_base using the exact offsets known by the base server.
    double a_base;   // [rad] current orientation of base
    double a_steer;  // [rad] current orientation of wheels
    double a_turret; // [rad] current orientation of turret/enclosure

    double m[3*3]; // covariance matrix for (x,y,a_base)

    unsigned long update_count;
  };

};

#endif

