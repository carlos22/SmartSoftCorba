//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.2.1
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// http://smart-robotics.sourceforge.net/
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//
//------------------------------------------------------------------------
//
//  Copyright (C) 2009 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "Katana Mobile Manipulation communication objects".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------
#include "commMoMaObject.hh"

using namespace Smart;

void CommMoMaObject::get(CORBA::Any &a) const
{
	a <<= moMaObject;
}

void CommMoMaObject::set(const CORBA::Any &a)
{
	SmartIDL::MoMaObject *tmp_cmd;
	if (a >>= tmp_cmd)
	{
		moMaObject = *tmp_cmd;
	}
}

void CommMoMaObject::setId(uint32_t id)
{
	moMaObject.id = id;
}

uint32_t CommMoMaObject::getId() const
{
	return moMaObject.id;
}

void CommMoMaObject::setObjectClass(const std::string& value)
{
	moMaObject.objectClass = value.c_str();
}

void CommMoMaObject::getObjectClass(std::string& value) const
{
	value = std::string(moMaObject.objectClass);
}

SmartIDL::MoMaPose& CommMoMaObject::getPose()
{
	return moMaObject.pose;
}

const SmartIDL::MoMaPose CommMoMaObject::getPose() const
{
	return moMaObject.pose;
}

void CommMoMaObject::setPose(double x, double y, double z, double yaw, double pitch, double roll)
{
	moMaObject.pose.x = x;
	moMaObject.pose.y = y;
	moMaObject.pose.z = z;

	moMaObject.pose.yaw = yaw;
	moMaObject.pose.pitch = pitch;
	moMaObject.pose.roll = roll;
}
