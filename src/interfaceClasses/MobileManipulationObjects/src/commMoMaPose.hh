//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.2.1
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// http://smart-robotics.sourceforge.net/
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//
//------------------------------------------------------------------------
//
//  Copyright (C) 2009 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "Katana Mobile Manipulation communication objects".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------
#ifndef _COMM_MOMAPOSE_HH
#define _COMM_MOMAPOSE_HH

#include <string>

// include client-side file generated by IDL compiler
#include "gen/smartMoMaPoseC.hh"

namespace Smart
{

class CommMoMaPose
{
protected:
	SmartIDL::MoMaPose moMaPose;

public:
	CommMoMaPose()
	{
		moMaPose.command = 0;
	}
	virtual ~CommMoMaPose()
	{
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);
	static inline std::string identifier(void)
	{
		return "Smart::MoMaPose";
	}

	//
	// user interfaces
	void setX(double value);
	double getX() const;

	void setY(double value);
	double getY() const;

	void setZ(double value);
	double getZ() const;

	void setYaw(double value);
	double getYaw() const;

	void setPitch(double value);
	double getPitch() const;

	void setRoll(double value);
	double getRoll() const;

	void setMotor1(double value);
	double getMotor1() const;

	void setMotor2(double value);
	double getMotor2() const;

	void setMotor3(double value);
	double getMotor3() const;

	void setMotor4(double value);
	double getMotor4() const;

	void setMotor5(double value);
	double getMotor5() const;

	void setMotors(double motor01, double motor02, double motor03, double motor04, double motor05);

	void setFlags(int flag);

	int getFlags() const;


	/**
	 * Command Id:
	 * 0 = no action
	 * 1 = open gripper
	 * 2 = close gripper
	 */
	void setCommand(uint32_t id);
	uint32_t getCommand() const;
};

}
#endif
