//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.2.1
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// http://smart-robotics.sourceforge.net/
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//
//------------------------------------------------------------------------
//
//  Copyright (C) 2009 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "Katana Mobile Manipulation communication objects".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------
#include "commMoMaManipulateState.hh"

using namespace Smart;

void CommMoMaManipulateState::get(CORBA::Any &a) const
{
	a <<= moMaManipulateState;
}

void CommMoMaManipulateState::set(const CORBA::Any &a)
{
	SmartIDL::MoMaManipulateState *tmp_cmd;
	if (a >>= tmp_cmd)
	{
		moMaManipulateState = *tmp_cmd;
	}
}


void CommMoMaManipulateState::setSize(uint32_t size)
{
	moMaManipulateState.state.length(size);
	moMaManipulateState.objectId.length(size);
}

uint32_t CommMoMaManipulateState::getSize() const
{
	return moMaManipulateState.state.length();
}

void CommMoMaManipulateState::setState(uint32_t index, const std::string& value)
{
	moMaManipulateState.state[index] = value.c_str();
}

void CommMoMaManipulateState::getState(uint32_t index, std::string& value) const
{
	value = std::string(moMaManipulateState.state[index]);
}


void CommMoMaManipulateState::setObjectId(uint32_t index, uint32_t objectId)
{
	moMaManipulateState.objectId[index] = objectId;
}

uint32_t CommMoMaManipulateState::getObjectId(uint32_t index) const
{
	return moMaManipulateState.objectId[index];
}
