//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.8.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "CommObjectRecognitonObjects".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------

#ifndef _COMM_COMMOBJECTRECOGNITIONOBJECTS_COMMOBJECTRECOGNITIONEVENTRESULT_HH
#define _COMM_COMMOBJECTRECOGNITIONOBJECTS_COMMOBJECTRECOGNITIONEVENTRESULT_HH

#include <string>
#include <sstream>
#include <iomanip>
#include <iostream>

// include files of classes

// include header-files of included communication objects

// include enums
#include <CommObjectRecognitionObjects/gen/enumObjectRecognitionBehavior.hh>
#include <CommObjectRecognitionObjects/gen/enumObjectRecognitionState.hh>

// include client-side file generated by IDL compiler
#include "CommObjectRecognitionObjects/gen/smartCommObjectRecognitionEventResultC.hh"

namespace CommObjectRecognitionObjects
{

class CommObjectRecognitionEventResult
{
protected:
	CommObjectRecognitionObjectsIDL::CommObjectRecognitionEventResult
			idl_CommObjectRecognitionEventResult;

public:
	CommObjectRecognitionEventResult()
	{
	}

	CommObjectRecognitionEventResult(
			const CommObjectRecognitionObjectsIDL::CommObjectRecognitionEventResult &obj) :
		idl_CommObjectRecognitionEventResult(obj)
	{
	}

	virtual ~CommObjectRecognitionEventResult()
	{
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);

	inline const CommObjectRecognitionObjectsIDL::CommObjectRecognitionEventResult &get() const
	{
		return idl_CommObjectRecognitionEventResult;
	}

	inline void set(
			const CommObjectRecognitionObjectsIDL::CommObjectRecognitionEventResult &obj)
	{
		idl_CommObjectRecognitionEventResult = obj;
	}

	static inline std::string identifier(void)
	{
		return "CommObjectRecognitionObjects::CommObjectRecognitionEventResult";
	}

	//
	// user interfaces

	/**
	 * Get the object as a lisp representation.
	 * ((behaviour ?b) (state ?s) (id ?id))
	 */
	void get(std::string &str) const {
		std::stringstream stream;

		stream << std::setprecision(0) << std::fixed;

		switch (idl_CommObjectRecognitionEventResult.behavior) {
		case CommObjectRecognitionObjectsIDL::LITERAL_SEARCH:
			stream << "((behaviour search)";
			break;
		case CommObjectRecognitionObjectsIDL::LITERAL_FULLSEARCH:
			stream << "((behaviour fullsearch)";
			break;
		case CommObjectRecognitionObjectsIDL::LITERAL_UNSET:
			stream << "((behaviour unset)";
			break;
		}

		switch (idl_CommObjectRecognitionEventResult.state) {
		case CommObjectRecognitionObjectsIDL::LITERAL_VISIBLE:
			stream << "(state visible)";
			break;
		case CommObjectRecognitionObjectsIDL::LITERAL_INVISIBLE:
			stream << "(state invisible)";
			break;
		case CommObjectRecognitionObjectsIDL::LITERAL_FINISHED:
			stream << "(state finished)";
			break;
		}

		stream << "(id ";
		for (uint32_t i = 0; i < get_object_id_size(); ++i) {
			stream << idl_CommObjectRecognitionEventResult.object_id[i] << " ";
		}
		stream << "))";

		str = stream.str();
	}

	/**
	 * Set the current behavior.
	 * 		fullsearch = return all objects found in the scene, although obstacles.
	 * 		search = search only until the first object is found.
	 * 		unset = not specified.
	 */
	inline void set_behavior(ObjectRecognitionBehavior behavior) {
		idl_CommObjectRecognitionEventResult.behavior = behavior.get_value_idl();
	}

	/**
	 * Get the current behavior.
	 * 		fullsearch = return all objects found in the scene, although obstacles.
	 * 		search = search only until the first object is found.
	 * 		unset = not specified.
	 */
	inline ObjectRecognitionBehavior get_behavior() const {
		return idl_CommObjectRecognitionEventResult.behavior;
	}

	/**
	 * Set the current state.
	 * 		invisible =
	 * 		visible =
	 * 		finished = the object recognition is done.
	 */
	inline void set_state(ObjectRecognitionState state) {
		idl_CommObjectRecognitionEventResult.state = state.get_value_idl();
	}

	/**
	 * Get the current state.
	 * 		invisible =
	 * 		visible =
	 * 		finished = the object recognition is done.
	 */
	inline ObjectRecognitionState get_state() const {
		return idl_CommObjectRecognitionEventResult.state;
	}

	/**
	 * Set the size of the object id list.
	 */
	inline void set_object_id_size(uint32_t size) {
		idl_CommObjectRecognitionEventResult.object_id.length(size);
	}

	/**
	 * Get the size of the object id list.
	 */
	inline uint32_t get_object_id_size() const {
		return idl_CommObjectRecognitionEventResult.object_id.length();
	}

	/**
	 * Set the unique object id at pos index.
	 */
	inline void set_object_id(uint32_t index, uint32_t id) {
		idl_CommObjectRecognitionEventResult.object_id[index] = id;
	}

	/**
	 * Get the unique object id at pos index.
	 */
	inline uint32_t get_object_id(uint32_t index) const {
		return idl_CommObjectRecognitionEventResult.object_id[index];
	}

	inline void set_environment_id(uint32_t id) {
		idl_CommObjectRecognitionEventResult.environment_id = id;
	}

	inline uint32_t get_environment_id() const {
		return idl_CommObjectRecognitionEventResult.environment_id;
	}

	/**
	 * Print the object to an output stream.
	 * @param os Output stream to which should be printed
	 */
	void print(std::ostream &os = std::cout) const;
};

}
#endif
