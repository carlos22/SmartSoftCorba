//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.8.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "CommObjectRecognitonObjects".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------

#ifndef _COMM_COMMOBJECTRECOGNITIONOBJECTS_COMMOBJECTRECOGNITIONOBJECTPROPERTIES_HH
#define _COMM_COMMOBJECTRECOGNITIONOBJECTS_COMMOBJECTRECOGNITIONOBJECTPROPERTIES_HH

#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>

// include files of classes

// include header-files of included communication objects
#include <CommBasicObjects/commPose3d.hh>
#include <CommBasicObjects/commPosition3d.hh>

// include enums


// include client-side file generated by IDL compiler
#include "CommObjectRecognitionObjects/gen/smartCommObjectRecognitionObjectPropertiesC.hh"

namespace CommObjectRecognitionObjects
{

class CommObjectRecognitionObjectProperties
{
protected:
	CommObjectRecognitionObjectsIDL::CommObjectRecognitionObjectProperties
			idl_CommObjectRecognitionObjectProperties;

public:
	CommObjectRecognitionObjectProperties()
	{
	}

	CommObjectRecognitionObjectProperties(
			const CommObjectRecognitionObjectsIDL::CommObjectRecognitionObjectProperties &obj) :
		idl_CommObjectRecognitionObjectProperties(obj)
	{
	}

	operator CommObjectRecognitionObjectsIDL::CommObjectRecognitionObjectProperties() const
	{
		return idl_CommObjectRecognitionObjectProperties;
	}

	virtual ~CommObjectRecognitionObjectProperties()
	{
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);

	static inline std::string identifier(void)
	{
		return "CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties";
	}

	//
	// user interfaces

	/**
	 * Check if this object is valid.
	 * Invalid object properties may be sent if the object id could not be resolved by the component.
	 */
	inline bool is_valid() const {
		return idl_CommObjectRecognitionObjectProperties.is_valid;
	}

	/**
	 * Get the object as a lisp representation.
	 * (ok((id ?id)(type ?type)(pose ?x ?y ?z ?azimuth ?elevation ?roll)(dimension ?x ?y ?z)))
	 */
	void get(std::string& str) const {
		std::stringstream stream;
		stream << std::setprecision(3) << std::fixed;

		stream << "(ok((id " << idl_CommObjectRecognitionObjectProperties.object_id << ")";
		stream << "(type " << idl_CommObjectRecognitionObjectProperties.object_type << ")";

//		stream << "(color ";
//		switch (idl_CommObjectRecognitionObjectProperties.object_color) {
//		case CommObjectRecognitionObjectsIDL::LITERAL_RED:
//			stream << "red";
//			break;
//		case CommObjectRecognitionObjectsIDL::LITERAL_GREEN:
//			stream << "green";
//			break;
//		case CommObjectRecognitionObjectsIDL::LITERAL_BLUE:
//			stream << "blue";
//			break;
//		default:
//			stream << "no_color";
//			break;
//		}
//		stream << ")";

		stream << "(pose " << idl_CommObjectRecognitionObjectProperties.pose.position.x;
		stream << " " << idl_CommObjectRecognitionObjectProperties.pose.position.y;
		stream << " " << idl_CommObjectRecognitionObjectProperties.pose.position.z;
		stream << " " << idl_CommObjectRecognitionObjectProperties.pose.orientation.azimuth;
		stream << " " << idl_CommObjectRecognitionObjectProperties.pose.orientation.elevation;
		stream << " " << idl_CommObjectRecognitionObjectProperties.pose.orientation.roll << ")";

		stream << "(dimension " << idl_CommObjectRecognitionObjectProperties.dimension.x;
		stream << " " << idl_CommObjectRecognitionObjectProperties.dimension.y;
		stream << " " << idl_CommObjectRecognitionObjectProperties.dimension.z << ")";

		stream << "))";

		str = stream.str();
	}

	/**
	 * Set the properties to valid/invalid
	 */
	inline void set_valid(bool valid) {
		idl_CommObjectRecognitionObjectProperties.is_valid = valid;
	}

	/**
	 * Set the unique id of the object.
	 */
	inline void set_id(uint32_t id) {
		idl_CommObjectRecognitionObjectProperties.object_id = id;
	}

	/**
	 * Get the unique id of the object.
	 */
	inline uint32_t get_id() const {
		return idl_CommObjectRecognitionObjectProperties.object_id;
	}

	/**
	 * Set the type of the object.
	 */
	inline void set_type(const std::string& type) {
		idl_CommObjectRecognitionObjectProperties.object_type = type.c_str();
	}

	/**
	 * Get the type of the object.
	 */
	inline void get_type(std::string& type) const {
		type = idl_CommObjectRecognitionObjectProperties.object_type;
	}

	/**
	 * Set the 6D pose of the object in the robot coordinate system
	 */
	inline void set_pose(const CommBasicObjects::CommPose3d& pose) {
		idl_CommObjectRecognitionObjectProperties.pose = pose;
	}

	/**
	 * Get the 6D pose of the object in the robot coordinate system
	 */
	inline CommBasicObjects::CommPose3d get_pose() const {
		return CommBasicObjects::CommPose3d(idl_CommObjectRecognitionObjectProperties.pose);
	}

	/**
	 * Set the dimension(with, height, depth) of the object.
	 */
	inline void set_dimension(const double x, const double y, const double z, const double unit = 0.001) {
		idl_CommObjectRecognitionObjectProperties.dimension.x = x * unit * 1000;
		idl_CommObjectRecognitionObjectProperties.dimension.y = y * unit * 1000;
		idl_CommObjectRecognitionObjectProperties.dimension.z = z * unit * 1000;
	}

	/**
	 * Get the dimension(with, height, depth) of the object.
	 */
	inline void get_dimension(double& x, double& y, double& z, const double unit = 0.001) {
		x = idl_CommObjectRecognitionObjectProperties.dimension.x * 0.001 / unit;
		y = idl_CommObjectRecognitionObjectProperties.dimension.y * 0.001 / unit;
		z = idl_CommObjectRecognitionObjectProperties.dimension.z * 0.001 / unit;
	}

	void set_beliefs_size(int size) {
		idl_CommObjectRecognitionObjectProperties.beliefs.length(size);
	}

	int get_beliefs_size() const {
		return 	idl_CommObjectRecognitionObjectProperties.beliefs.length();
	}

	void set_belief(int index, std::string type, double probability) {
		idl_CommObjectRecognitionObjectProperties.beliefs[index].type = type.c_str();
		idl_CommObjectRecognitionObjectProperties.beliefs[index].probability = probability;
	}

	void get_belief(int index, std::string &type, double &probability) const {
		type = idl_CommObjectRecognitionObjectProperties.beliefs[index].type;
		probability = idl_CommObjectRecognitionObjectProperties.beliefs[index].probability;
	}



	/**
	 * Print the object to an output stream.
	 * @param os Output stream to which should be printed
	 */
	void print(std::ostream &os = std::cout) const;

};

//
// Implementation
//

inline std::ostream &operator<<(std::ostream &os, const CommObjectRecognitionObjectProperties &obj) {
	obj.print(os);
	return os;
}


}
#endif
