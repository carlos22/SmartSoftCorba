//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.4
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _COMMOBJECTRECOGNITIONOBJECTS_ENUM_HH_OBJECTRECOGNITIONMODE
#define _COMMOBJECTRECOGNITIONOBJECTS_ENUM_HH_OBJECTRECOGNITIONMODE

#include <CommObjectRecognitionObjects/gen/enumObjectRecognitionModeC.hh>
#include <string>
#include <ostream>

namespace CommObjectRecognitionObjects
{

class ObjectRecognitionMode
{
public:
	enum literal
	{

		ADDALGORITHM = CommObjectRecognitionObjectsIDL::LITERAL_ADDALGORITHM,

		ADDOBJECT = CommObjectRecognitionObjectsIDL::LITERAL_ADDOBJECT,

		ADDSENSOR = CommObjectRecognitionObjectsIDL::LITERAL_ADDSENSOR,

		BEHAVIOR = CommObjectRecognitionObjectsIDL::LITERAL_BEHAVIOR,

		BELIEF_THRESHOLD = CommObjectRecognitionObjectsIDL::LITERAL_BELIEF_THRESHOLD,

		CLOUD = CommObjectRecognitionObjectsIDL::LITERAL_CLOUD,

		DELALGORITHMS = CommObjectRecognitionObjectsIDL::LITERAL_DELALGORITHMS,

		DELOBJECTS = CommObjectRecognitionObjectsIDL::LITERAL_DELOBJECTS,

		DELSENSORS = CommObjectRecognitionObjectsIDL::LITERAL_DELSENSORS,

		RECOGNIZE = CommObjectRecognitionObjectsIDL::LITERAL_RECOGNIZE
	};

	ObjectRecognitionMode()
	{
	}

	ObjectRecognitionMode(literal t)
	{
		value = t;
	}

	operator literal()
	{
		return value;
	}

	ObjectRecognitionMode(
			CommObjectRecognitionObjectsIDL::ENUM_ObjectRecognitionMode t)
	{
		value = (literal) t;
	}

	bool operator ==(ObjectRecognitionMode& t)
	{
		return this->value == t.value;
	}

	CommObjectRecognitionObjectsIDL::ENUM_ObjectRecognitionMode get_value_idl()
	{
		return (CommObjectRecognitionObjectsIDL::ENUM_ObjectRecognitionMode) value;
	}

	literal get_value() const
	{
		return value;
	}

	std::string get_string() const
	{
		switch (value)
		{

		case ADDALGORITHM:
			return "ObjectRecognitionMode::ADDALGORITHM";
			break;

		case ADDOBJECT:
			return "ObjectRecognitionMode::ADDOBJECT";
			break;

		case ADDSENSOR:
			return "ObjectRecognitionMode::ADDSENSOR";
			break;

		case BEHAVIOR:
			return "ObjectRecognitionMode::BEHAVIOR";
			break;

		case BELIEF_THRESHOLD:
			return "ObjectRecognitionMode::BELIEF_THRESHOLD";
			break;

		case CLOUD:
			return "ObjectRecognitionMode::CLOUD";
			break;

		case DELALGORITHMS:
			return "ObjectRecognitionMode::DELALGORITHMS";
			break;

		case DELOBJECTS:
			return "ObjectRecognitionMode::DELOBJECTS";
			break;

		case DELSENSORS:
			return "ObjectRecognitionMode::DELSENSORS";
			break;

		case RECOGNIZE:
			return "ObjectRecognitionMode::RECOGNIZE";
			break;

		default:
			return "UNKNOWN!";
			break;
		}
	}

private:
	literal value;
};

inline std::ostream &operator<<(std::ostream &os,
		const ObjectRecognitionMode &e)
{
	os << e.get_string();
	return os;
}

}
#endif
