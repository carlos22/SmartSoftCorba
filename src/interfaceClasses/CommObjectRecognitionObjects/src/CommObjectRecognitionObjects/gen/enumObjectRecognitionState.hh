//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.4
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _COMMOBJECTRECOGNITIONOBJECTS_ENUM_HH_OBJECTRECOGNITIONSTATE
#define _COMMOBJECTRECOGNITIONOBJECTS_ENUM_HH_OBJECTRECOGNITIONSTATE

#include <CommObjectRecognitionObjects/gen/enumObjectRecognitionStateC.hh>
#include <string>
#include <ostream>

namespace CommObjectRecognitionObjects
{

class ObjectRecognitionState
{
public:
	enum literal
	{

		FINISHED = CommObjectRecognitionObjectsIDL::LITERAL_FINISHED,

		INVISIBLE = CommObjectRecognitionObjectsIDL::LITERAL_INVISIBLE,

		VISIBLE = CommObjectRecognitionObjectsIDL::LITERAL_VISIBLE
	};

	ObjectRecognitionState()
	{
	}

	ObjectRecognitionState(literal t)
	{
		value = t;
	}

	operator literal()
	{
		return value;
	}

	ObjectRecognitionState(
			CommObjectRecognitionObjectsIDL::ENUM_ObjectRecognitionState t)
	{
		value = (literal) t;
	}

	bool operator ==(ObjectRecognitionState& t)
	{
		return this->value == t.value;
	}

	CommObjectRecognitionObjectsIDL::ENUM_ObjectRecognitionState get_value_idl()
	{
		return (CommObjectRecognitionObjectsIDL::ENUM_ObjectRecognitionState) value;
	}

	literal get_value() const
	{
		return value;
	}

	std::string get_string() const
	{
		switch (value)
		{

		case FINISHED:
			return "ObjectRecognitionState::FINISHED";
			break;

		case INVISIBLE:
			return "ObjectRecognitionState::INVISIBLE";
			break;

		case VISIBLE:
			return "ObjectRecognitionState::VISIBLE";
			break;

		default:
			return "UNKNOWN!";
			break;
		}
	}

private:
	literal value;
};

inline std::ostream &operator<<(std::ostream &os,
		const ObjectRecognitionState &e)
{
	os << e.get_string();
	return os;
}

}
#endif
