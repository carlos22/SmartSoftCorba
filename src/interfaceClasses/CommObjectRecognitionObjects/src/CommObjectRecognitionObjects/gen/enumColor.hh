//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _COMMOBJECTRECOGNITIONOBJECTS_ENUM_HH_COLOR
#define _COMMOBJECTRECOGNITIONOBJECTS_ENUM_HH_COLOR

#include <CommObjectRecognitionObjects/gen/enumColorC.hh>
#include <string>
#include <ostream>

namespace CommObjectRecognitionObjects
{

class Color
{
public:
	enum literal
	{

		BLUE = CommObjectRecognitionObjectsIDL::LITERAL_BLUE,

		GREEN = CommObjectRecognitionObjectsIDL::LITERAL_GREEN,

		NO_COLOR = CommObjectRecognitionObjectsIDL::LITERAL_NO_COLOR,

		RED = CommObjectRecognitionObjectsIDL::LITERAL_RED
	};

	Color()
	{
	}

	Color(literal t)
	{
		value = t;
	}

	operator literal()
	{
		return value;
	}

	Color(CommObjectRecognitionObjectsIDL::ENUM_Color t)
	{
		value = (literal) t;
	}

	bool operator ==(Color& t)
	{
		return this->value == t.value;
	}

	CommObjectRecognitionObjectsIDL::ENUM_Color get_value_idl()
	{
		return (CommObjectRecognitionObjectsIDL::ENUM_Color) value;
	}

	literal get_value() const
	{
		return value;
	}

	std::string get_string() const
	{
		switch (value)
		{

		case BLUE:
			return "Color::BLUE";
			break;

		case GREEN:
			return "Color::GREEN";
			break;

		case NO_COLOR:
			return "Color::NO_COLOR";
			break;

		case RED:
			return "Color::RED";
			break;

		default:
			return "UNKNOWN!";
			break;
		}
	}

private:
	literal value;
};

inline std::ostream &operator<<(std::ostream &os, const Color &e)
{
	os << e.get_string();
	return os;
}

}
#endif
