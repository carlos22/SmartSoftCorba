//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _COMMOBJECTRECOGNITIONOBJECTS_ENUM_HH_OBJECTRECOGNITIONBEHAVIOR
#define _COMMOBJECTRECOGNITIONOBJECTS_ENUM_HH_OBJECTRECOGNITIONBEHAVIOR

#include <CommObjectRecognitionObjects/gen/enumObjectRecognitionBehaviorC.hh>
#include <string>
#include <ostream>

namespace CommObjectRecognitionObjects
{

class ObjectRecognitionBehavior
{
public:
	enum literal
	{

		FULLSEARCH = CommObjectRecognitionObjectsIDL::LITERAL_FULLSEARCH,

		SEARCH = CommObjectRecognitionObjectsIDL::LITERAL_SEARCH,

		UNSET = CommObjectRecognitionObjectsIDL::LITERAL_UNSET
	};

	ObjectRecognitionBehavior()
	{
	}

	ObjectRecognitionBehavior(literal t)
	{
		value = t;
	}

	operator literal()
	{
		return value;
	}

	ObjectRecognitionBehavior(
			CommObjectRecognitionObjectsIDL::ENUM_ObjectRecognitionBehavior t)
	{
		value = (literal) t;
	}

	bool operator ==(ObjectRecognitionBehavior& t)
	{
		return this->value == t.value;
	}

	CommObjectRecognitionObjectsIDL::ENUM_ObjectRecognitionBehavior get_value_idl()
	{
		return (CommObjectRecognitionObjectsIDL::ENUM_ObjectRecognitionBehavior) value;
	}

	literal get_value() const
	{
		return value;
	}

	std::string get_string() const
	{
		switch (value)
		{

		case FULLSEARCH:
			return "ObjectRecognitionBehavior::FULLSEARCH";
			break;

		case SEARCH:
			return "ObjectRecognitionBehavior::SEARCH";
			break;

		case UNSET:
			return "ObjectRecognitionBehavior::UNSET";
			break;

		default:
			return "UNKNOWN!";
			break;
		}
	}

private:
	literal value;
};

inline std::ostream &operator<<(std::ostream &os,
		const ObjectRecognitionBehavior &e)
{
	os << e.get_string();
	return os;
}

}
#endif
