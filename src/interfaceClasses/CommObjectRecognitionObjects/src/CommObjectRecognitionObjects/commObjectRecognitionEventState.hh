//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.8.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "CommObjectRecognitonObjects".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------

#ifndef _COMM_COMMOBJECTRECOGNITIONOBJECTS_COMMOBJECTRECOGNITIONEVENTSTATE_HH
#define _COMM_COMMOBJECTRECOGNITIONOBJECTS_COMMOBJECTRECOGNITIONEVENTSTATE_HH

#include <CommObjectRecognitionObjects/gen/enumObjectRecognitionBehavior.hh>
#include <CommObjectRecognitionObjects/gen/enumObjectRecognitionState.hh>

#include <vector>

namespace CommObjectRecognitionObjects {

class CommObjectRecognitionEventState {

protected:
	std::vector<uint32_t> object_id;
	uint32_t environment_id;
	ObjectRecognitionState state;
	ObjectRecognitionBehavior behavior;

public:
	CommObjectRecognitionEventState() :
		state(ObjectRecognitionState::INVISIBLE), behavior(ObjectRecognitionBehavior::UNSET) {
	}

	virtual ~CommObjectRecognitionEventState() {
	}

	//
	// user interfaces

	/**
	 * Set the current behavior.
	 * 		fullsearch = return all objects found in the scene, although obstacles.
	 * 		search = search only until the first object is found.
	 * 		unset = not specified.
	 */
	inline void set_behavior(ObjectRecognitionBehavior behavior) {
		this->behavior = behavior;
	}

	/**
	 * Get the current behavior.
	 * 		fullsearch = return all objects found in the scene, although obstacles.
	 * 		search = search only until the first object is found.
	 * 		unset = not specified.
	 */
	inline ObjectRecognitionBehavior get_behavior() const {
		return behavior;
	}

	/**
	 * Set the current state.
	 * 		invisible =
	 * 		visible =
	 * 		finished =
	 */
	inline void set_state(ObjectRecognitionState state) {
		this->state = state;
	}

	/**
	 * Get the current state.
	 * 		invisible =
	 * 		visible =
	 * 		finished =
	 */
	inline ObjectRecognitionState get_state() const {
		return state;
	}

	/**
	 * Set the size of the object id list.
	 */
	inline void set_object_id_size(uint32_t size) {
		object_id.resize(size);
	}

	/**
	 * Get the size of the object id list.
	 */
	inline uint32_t get_object_id_size() const {
		return object_id.size();
	}

	/**
	 * Set the unique object id at pos index.
	 */
	inline void set_object_id(uint32_t index, uint32_t id) {
		object_id[index] = id;
	}

	/**
	 * Get the unique object id at pos index.
	 */
	inline uint32_t get_object_id(uint32_t index) const {
		return object_id[index];
	}

	inline void set_environment_id(uint32_t id) {
		environment_id = id;
	}

	inline uint32_t get_environment_id() const {
		return environment_id;
	}
};

}
#endif
