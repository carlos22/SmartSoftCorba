//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//--------------------------------------------------------------------------
//
//  Copyright (C) 2010 Jonas Brich
//
//        brich@mail.hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "Unicap Video Server component".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------

#include "ImageQueryHandler.hh"
#include "gen/SmartUnicapImageServer.hh"
#include "Unicap.hh"

#include <iostream>

void ImageQueryHandler::handleQuery(CHS::QueryServer<Smart::CommMutableVideoImage, Smart::CommVoid> & server,
		const CHS::QueryId id, const Smart::CommMutableVideoImage & request) throw () {

	// Hold own reference and set it to invalid. If no new data is available the request is sent back as invalid.
	Smart::CommMutableVideoImage image = request;
	image.set_data_invalid();
	int status = 0;

	// Component Active then get new image
	if (COMP->componentActive) {
		// If Newest and Timed active get image from global Reference otherwise get it directly from Unicap
		if (!COMP->ini.push_newest.active && !COMP->ini.push_timed.active) {
			status = UNICAPINZ->getImage(image);
		} else {
			COMP->NewestImageMutex.acquire();
			Smart::CommMutableVideoImage* newestImage = COMP->newestImage;
			COMP->NewestImageMutex.release();

			if (newestImage != NULL) {
				image.set_data(newestImage->get_data());
				image.set_sequence_counter((unsigned long int) newestImage->get_sequence_counter());
				status = 0;
			}
		}
	}

	if (status == 0) {
		server.answer(id, Smart::CommVoid());
		if (COMP->ini.component.debug_info) {
			std::cout << "Query: Answer sent with ID: " << id << std::endl;
		}
	} else {
		switch (status) {
		case -1:
			std::cerr << "Error: (QueryHandler) Failed to queue image buffer.\n";
			break;
		case -2:
			std::cerr << "Error: (QueryHandler) Failed to wait for queued buffer.\n";
			break;
		default:
			std::cerr << "Error: (QueryHandler) Undefined Error.\n";
			break;
		}
	}
}
