//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the workflow.
//--------------------------------------------------------------------------

#include "SmartUnicapImageServer.hh"

// constructor
SmartUnicapImageServer::SmartUnicapImageServer()
{
	std::cout << "constructor SmartUnicapImageServer\n";

	ini.imageQueryServer.serviceName = "imageQuery";
	ini.component.name = "smartUnicapImageServer";
	ini.component.debug_info = false;
	ini.image.height = 768;
	ini.image.debug_info = false;
	ini.image.format = "Y(Mono)";
	ini.image.width = 1024;
	ini.hardware_properties.shutter = 0.014300;
	ini.hardware_properties.saturation = 128;
	ini.hardware_properties.trigger_mode = 0;
	ini.hardware_properties.autoflag_white_balance_mode = false;
	ini.hardware_properties.framerate = 15;
	ini.hardware_properties.white_balance_v = 2000;
	ini.hardware_properties.autoflag_shutter = false;
	ini.hardware_properties.auto_exposure = 100;
	ini.hardware_properties.gamma = 128;
	ini.hardware_properties.trigger_polarity = 0;
	ini.hardware_properties.sharpness = 3;
	ini.hardware_properties.white_balance_mode = 3;
	ini.hardware_properties.white_balance_u = 2000;
	ini.hardware_properties.gain = 100;
	ini.hardware_properties.brightness = 16;
	ini.hardware_properties.hue = 128;
	ini.hardware.camera_type = "FireWire";
	ini.hardware.debug_info = false;
	ini.hardware.identifier = "SONY DFW-X710 v1.03A 2917744";
	ini.hardware.device = "/dev/raw1394";
}

void SmartUnicapImageServer::init(int argc, char *argv[])
{
	try
	{
		component = new CHS::SmartComponent("SmartUnicapImageServer", argc,
				argv);
		loadParameter(argc, argv);

		// create ports
		imageQueryServer = new CHS::QueryServer<Smart::CommMutableVideoImage,
				Smart::CommVoid>(component, ini.imageQueryServer.serviceName,
				imageQueryHandler);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void SmartUnicapImageServer::run()
{
	compHandler.onStartup();
	component->run();
	delete component;
}

void SmartUnicapImageServer::loadParameter(int argc, char *argv[])
{
	CHS::SmartParameter parameter;

	// load parameters
	try
	{
		// check if paramfile is given as argument
		bool paramFile = false;
		std::string str;
		for (int i = 0; i < argc; i++)
		{
			str = argv[i];
			if (str.find("filename") != std::string::npos)
				paramFile = true;
		}

		// if paramfile is given as argument
		if (paramFile == true)
		{
			std::cout << "load parameter file from argv \n";
			parameter.addFile(argc, argv, "filename", false);
		}
		// else load standard paramfile
		else
		{
			std::cout << "load SmartUnicapImageServer.ini parameter file\n";
			parameter.addFile("SmartUnicapImageServer.ini");
		}

		// than add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLine("", argc, argv);

		// print all known parameters
		parameter.print(); // TODO remove this


		// load parameter
		parameter.getString("imageQueryServer", "serviceName",
				ini.imageQueryServer.serviceName);
		parameter.getString("component", "name", ini.component.name);
		parameter.getTruthValue("component", "debug_info",
				ini.component.debug_info);
		parameter.getInt("image", "height", ini.image.height);
		parameter.getTruthValue("image", "debug_info", ini.image.debug_info);
		parameter.getString("image", "format", ini.image.format);
		parameter.getInt("image", "width", ini.image.width);
		parameter.getDouble("hardware_properties", "shutter",
				ini.hardware_properties.shutter);
		parameter.getDouble("hardware_properties", "saturation",
				ini.hardware_properties.saturation);
		parameter.getInt("hardware_properties", "trigger_mode",
				ini.hardware_properties.trigger_mode);
		parameter.getTruthValue("hardware_properties",
				"autoflag_white_balance_mode",
				ini.hardware_properties.autoflag_white_balance_mode);
		parameter.getDouble("hardware_properties", "framerate",
				ini.hardware_properties.framerate);
		parameter.getDouble("hardware_properties", "white_balance_v",
				ini.hardware_properties.white_balance_v);
		parameter.getTruthValue("hardware_properties", "autoflag_shutter",
				ini.hardware_properties.autoflag_shutter);
		parameter.getDouble("hardware_properties", "auto_exposure",
				ini.hardware_properties.auto_exposure);
		parameter.getDouble("hardware_properties", "gamma",
				ini.hardware_properties.gamma);
		parameter.getInt("hardware_properties", "trigger_polarity",
				ini.hardware_properties.trigger_polarity);
		parameter.getDouble("hardware_properties", "sharpness",
				ini.hardware_properties.sharpness);
		parameter.getDouble("hardware_properties", "white_balance_mode",
				ini.hardware_properties.white_balance_mode);
		parameter.getDouble("hardware_properties", "white_balance_u",
				ini.hardware_properties.white_balance_u);
		parameter.getDouble("hardware_properties", "gain",
				ini.hardware_properties.gain);
		parameter.getDouble("hardware_properties", "brightness",
				ini.hardware_properties.brightness);
		parameter.getDouble("hardware_properties", "hue",
				ini.hardware_properties.hue);
		parameter.getString("hardware", "camera_type", ini.hardware.camera_type);
		parameter.getTruthValue("hardware", "debug_info",
				ini.hardware.debug_info);
		parameter.getString("hardware", "identifier", ini.hardware.identifier);
		parameter.getString("hardware", "device", ini.hardware.device);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (const CHS::ParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

