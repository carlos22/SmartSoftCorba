//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the workflow.
//--------------------------------------------------------------------------

#ifndef _SMARTUNICAPIMAGESERVER_HH
#define _SMARTUNICAPIMAGESERVER_HH

#include <iostream>
#include "smartSoft.hh"
#include "../SmartUnicapImageServerCore.hh"
// include communication objects
#include "externalCommObjectHeaders.hh"
// include tasks	
// include handler
#include "../CompHandler.hh"
#include "../ImageQueryHandler.hh"

#define COMP SmartUnicapImageServer::instance()

class SmartUnicapImageServer: public SmartUnicapImageServerCore
{
private:
	static SmartUnicapImageServer _smartUnicapImageServer;

	// constructor
	SmartUnicapImageServer();

	// copy-constructor
	SmartUnicapImageServer(const SmartUnicapImageServer& cc);

	// destructor
	~SmartUnicapImageServer()
	{
	}
	;

	// load parameter from ini file
	void loadParameter(int argc, char *argv[]);

	// instantiate handler
	CompHandler compHandler;
	ImageQueryHandler imageQueryHandler;

	// ThreadQueueHandler 


public:
	// component
	CHS::SmartComponent *component;

	// create mutex


	// create condition mutex


	// instantiate tasks

	// ports
	CHS::QueryServer<Smart::CommMutableVideoImage, Smart::CommVoid>
			*imageQueryServer;

	void init(int argc, char *argv[]);
	void run();

	// return singleton instance
	static SmartUnicapImageServer* instance()
	{
		return (SmartUnicapImageServer*) &_smartUnicapImageServer;
	}

	// ini parameter
	struct
	{

		struct
		{
			std::string serviceName;
		} imageQueryServer;

		struct
		{
			bool debug_info;
			std::string name;
		} component;
		struct
		{
			std::string camera_type;
			bool debug_info;
			std::string device;
			std::string identifier;
		} hardware;
		struct
		{
			double auto_exposure;
			bool autoflag_shutter;
			bool autoflag_white_balance_mode;
			double brightness;
			double framerate;
			double gain;
			double gamma;
			double hue;
			double saturation;
			double sharpness;
			double shutter;
			unsigned long trigger_mode;
			unsigned long trigger_polarity;
			double white_balance_mode;
			double white_balance_u;
			double white_balance_v;
		} hardware_properties;
		struct
		{
			bool debug_info;
			std::string format;
			unsigned long height;
			unsigned long width;
		} image;
	} ini;

};
#endif
