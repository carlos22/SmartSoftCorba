//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//--------------------------------------------------------------------------
//
//  Copyright (C) 2010 Jonas Brich
//
//        brich@mail.hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "Unicap Video Server component".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------

#include "CompHandler.hh"
#include "gen/SmartUnicapImageServer.hh"

#include <iostream>

// include communication objects
#include "externalCommObjectHeaders.hh"

#include "Unicap.hh"

void CompHandler::onStartup() {

	// Init Unicap ...
	int status = UNICAPINZ->init();

	if (status == 0) {
		std::cout << "Unicap successful init!\n";
	} else {
		std::cout << "Unicap init failed!" << std::endl;
		switch (status) {
		case -1:
			std::cerr << "Error: (CompHandler) Specified device not found. Cannot find Camera.\n";
			break;
		case -2:
			std::cerr << "Error: (CompHandler) Cannot open Camera.\n";
			break;
		case -3:
			std::cerr << "Error: (CompHandler) Specified format not found.\n";
			break;
		case -4:
			std::cerr << "Error: (CompHandler) Format cannot be set.\n";
			break;
		case -5:
			std::cerr << "Error: (CompHandler) Property cannot be set.\n";
			break;
		case -6:
			std::cerr << "Error: (CompHandler) Format for video capturing cannot be get.\n";
			break;
		case -7:
			std::cerr << "Error: (CompHandler) Format for video capturing cannot be set.\n";
			break;
		default:
			std::cerr << "Error: (CompHandler) Undefined Error.\n";
			break;
		}
	}

	if (COMP->stateServer->activate() != CHS::SMART_OK) {
		std::cerr << "Error: (CompHandler) activate state.\n";
	}

	if (COMP->ini.push_newest.active || COMP->ini.push_timed.active) {
		COMP->imageTask.open();
	}

	if (COMP->ini.push_newest.active) {
		std::cout << "Push Newest initialized.\n";
	}


}
