//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2009 Andreas Steck, Matthias Lutz
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//        lutz@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft SpeechOutput component".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#include "SpeechOutputTask.hh"
#include "gen/SmartTTSLoquendo.hh"

#include <iostream>
#include <list>
#include <cstdio>

#include "loqtts.h"

SpeechOutputTask::SpeechOutputTask()
{
	std::cout << "constructor SpeechOutputTask\n";
}

int SpeechOutputTask::svc()
{
    ttsHandleType hReader;      /* Reader handle */
    ttsResultType r;            /* Error code returned by TTS APIs */

    while(true)
    {
      // wait for queue entry
      COMP->_queue_sem.acquire();

      // pop queue entry
      COMP->_queue_mutex.acquire();
      SmartTTSLoquendo::QueueEntry entry = COMP->_queue.front();
      COMP->_queue.pop_front();
      COMP->_queue_mutex.release();

      // process queue entry:
      CommBasicObjects::CommPropertySet answer;

      // check time stamp
      if(entry.msg.get_discard_time().is_before(CommBasicObjects::CommTimeStamp::now()))
      {
	std::cout << "entry.msg.get_discard_time().is_before(Smart::CommTimeStamp::now())\n";
        answer.set("success",false);
        answer.set("discarded",true);
      }
      else
      {
        std::string result;

    	/* Initializes a LoquendoTTS Reader using the implicit session */
	r = ttsNewReader(&hReader, NULL);
	if (r != tts_OK)
	{
           fprintf(stderr, "%s\n", ttsGetErrorMessage(r));
           ttsDeleteSession(NULL); /* deallocates all tts resources  */
           return r;
       	}

    	/* Sets the persona parameters using mother tongue and default style */
	r = ttsLoadPersona(hReader, COMP->ini.speech.voice.c_str(), NULL, NULL);
	if(r != tts_OK)
    	{
           fprintf(stderr, "%s\n", ttsGetErrorMessage(r));
           ttsDeleteSession(NULL); /* deallocates all tts resources */
           return r;
        }

    	/* Sends samples directly to the audio board */
    	r = ttsSetAudio(hReader, "LTTS7AudioBoard", NULL, 44100, tts_LINEAR, tts_STEREO, 0);
	/* Sends the sample to audio file */
//    	r = ttsSetAudio(hReader, "LTTS7AudioFile", "Loquendo_audio_output.wav", 44100, tts_ALAW, tts_MONO, 0);

    	if(r != tts_OK)
    	{
           fprintf(stderr, "%s\n", ttsGetErrorMessage(r));
           ttsDeleteSession(NULL); /* deallocates all tts resources  */
           return r;
       	}


	std::string msg = entry.msg.get_message();

	char* tmp = new char[msg.length()+1];
        unsigned int i;
        for(i=0; i < msg.length(); ++i)
		{tmp[i] = msg[i];}
        tmp[i] = 0;


    	/* Converts text to speech */
    	r = ttsRead(
           hReader,        /* Reader handle */
           tmp,
           ttsFALSE, /* bAsync */
           ttsFALSE, /* bFromFile */
           NULL);  /* ttsRead keeps control until the end */
       	if (r != tts_OK)
          fprintf(stderr, "%s\n", ttsGetErrorMessage(r));
        ttsDeleteSession(NULL); /* deallocates all tts resources  */

      }
      std::cout<<"after speech loquendo"<<std::endl;
      // answer query, unless request was plain "send"
      if(entry.query_server)
      {
	std::cout<<"entry.query_server->answer(entry.id, answer);\n";
        entry.query_server->answer(entry.id, answer);
      }
      else
      {
        std::cout<<"no answer send"<<std::endl;
      }
    }
    return 0;

}
