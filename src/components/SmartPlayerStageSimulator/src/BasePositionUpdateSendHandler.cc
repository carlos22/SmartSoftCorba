//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//--------------------------------------------------------------------------


//--------------------------------------------------------------------------
//
//  Copyright (C) 2009 Andreas Steck, Matthias Lutz
//
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotic Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public License
//  as published by the Free Software Foundation; either version 2.1
//  of the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public License along
//  with this library; if not, write to the Free Software Foundation, Inc.,
//  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
//--------------------------------------------------------------------------

//----------------------------------------------------------------------------
//
// CREDITS:
//
// The code for the communication with the pioneer robot was taken from the
// Playerstage Project, which is distributed under GPL, and you can find at
// http://playerstage.sourceforge.net/
//
// Player - One Hell of a Robot Server
// Copyright (C) 2000
//    Brian Gerkey, Kasper Stoy, Richard Vaughan, & Andrew Howard
//
//----------------------------------------------------------------------------
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
//----------------------------------------------------------------------------






#include "BasePositionUpdateSendHandler.hh"
#include "gen/SmartPlayerStageSimulator.hh"

#include <iostream>

void BasePositionUpdateSendHandler::handleSend(
		const CommBasicObjects::CommBasePositionUpdate &r) throw()
{
	CommBasicObjects::CommBasePosition oldPos          = r.get_old_position();
	CommBasicObjects::CommBasePosition correctedPos    = r.get_corrected_position();
	CommBasicObjects::CommBasePosition newCorrectedPos;

    // robot motion between current position and the position the laserscan (selfloc-scan) was taken
    double deltaX = COMP->robotPos.get_x() - COMP->oldPos.get_x();
    double deltaY = COMP->robotPos.get_y() - COMP->oldPos.get_y();
    double deltaA = COMP->piToPiRad( COMP->robotPos.get_base_alpha() )  - COMP->piToPiRad( oldPos.get_base_alpha() );
    deltaA = COMP->piToPiRad( deltaA );

    newCorrectedPos.set_x( correctedPos.get_x() + deltaX );
    newCorrectedPos.set_y( correctedPos.get_y() + deltaY );
    newCorrectedPos.set_base_alpha( COMP->piToPiRad(correctedPos.get_base_alpha() + deltaA) );

    // calculate covMatrix
    COMP->updateCovMatrix( correctedPos, newCorrectedPos );
    // now in newCorrectedPos exists the new covMatrix

    // robot motion once more. this is because of the motion while calculating covM
    deltaX = COMP->robotPos.get_x() - COMP->oldPos.get_x();
    deltaY = COMP->robotPos.get_y() - COMP->oldPos.get_y();
    deltaA = COMP->piToPiRad( COMP->robotPos.get_base_alpha() ) - COMP->piToPiRad( oldPos.get_base_alpha() );
    deltaA = COMP->piToPiRad( deltaA );

    newCorrectedPos.set_x( correctedPos.get_x() + deltaX );
    newCorrectedPos.set_y( correctedPos.get_y() + deltaY );
    newCorrectedPos.set_base_alpha( COMP->piToPiRad( COMP->piToPiRad(correctedPos.get_base_alpha()) + deltaA) );

    // update of the robot Position
    COMP->RobotPosLock.acquire();
    COMP->robotPos = newCorrectedPos;
    COMP->oldPos = COMP->robotPos;

    // set odometry of robot
    COMP->position_2d_proxy->SetOdometry(COMP->robotPos.get_x()/1000.0, COMP->robotPos.get_y()/1000.0, COMP->robotPos.get_base_alpha());



    printf("Pos        (cnt=%lu) ( %9.4f %9.4f %6.2f deg)\n", correctedPos.get_update_count(),
             newCorrectedPos.get_x(), newCorrectedPos.get_y(), newCorrectedPos.get_base_alpha() /M_PI*180.0 );

    printf("corrected covM  (0,0)(1,1)(2,2): %8.1f; %8.1f; %8.1f \n", correctedPos.get_cov(0,0),
             correctedPos.get_cov(1,1), correctedPos.get_cov(2,2) );

    //mutexRobotPos.release();
    COMP->RobotPosLock.release();
}
