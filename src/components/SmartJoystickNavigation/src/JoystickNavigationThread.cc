//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------


// --------------------------------------------------------------------------
//
//  Copyright (C) 2003 Boris Kluge
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this program; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------


#include "JoystickNavigationThread.hh"
#include "gen/SmartJoystickNavigation.hh"

#include <iostream>

#include <CommBasicObjects/commJoystick.hh>

JoystickNavigationThread::JoystickNavigationThread()
{
	std::cout << "constructor JoystickNavigationThread\n";
}

int JoystickNavigationThread::svc()
{
	  CommBasicObjects::CommJoystick js;
	  CommBasicObjects::CommNavigationVelocity vel;
	  CHS::StatusCode status;

	  status = COMP->joystick_client->subscribe();
	  if(status!=CHS::SMART_OK)
	  {
	    std::cerr << "ERROR: failed to subscribe (" << CHS::StatusCodeConversion(status) << ")" << std::endl;
	    return -1;
	  }

	  while(true)
	  {
	    status = COMP->joystick_client->getUpdateWait(js);
	    if(status!=CHS::SMART_OK)
	    {
	      std::cerr << "ERROR: failed to get update (" << CHS::StatusCodeConversion(status) << ")" << std::endl;
	      break;
	    }
	    vel.set_v(js.get_y() * COMP->ini.settings.max_velocity, 1.0);
	    vel.set_omega(-js.get_x() * COMP->ini.settings.max_steering);
	    status = COMP->navigation_client->send(vel);
	    if(status!=CHS::SMART_OK)
	    {
	      std::cerr << "ERROR: failed to send velocity (" << CHS::StatusCodeConversion(status) << ")" << std::endl;
	      break;
	    }
	    else
	    {
	      std::cout << vel << " sent." << std::endl;
	    }
	  }

	  status = COMP->joystick_client->unsubscribe();
	  if(status!=CHS::SMART_OK)
	  {
	    std::cerr << "WARNING: failed to unsubscribe (" << CHS::StatusCodeConversion(status) << ")" << std::endl;
	  }

	  return 0;

}
