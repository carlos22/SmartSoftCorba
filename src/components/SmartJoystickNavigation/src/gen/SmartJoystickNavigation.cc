//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "SmartJoystickNavigation.hh"

// constructor
SmartJoystickNavigation::SmartJoystickNavigation()
{
	std::cout << "constructor of SmartJoystickNavigation\n";

	ini.component.name = "SmartJoystickNavigation";

	ini.joystick_client.serverName = "SmartJoystickServer";
	ini.joystick_client.serviceName = "joystick";
	ini.navigation_client.serverName = "SmartCdlServer";
	ini.navigation_client.serviceName = "navVel";
	ini.settings.max_steering = 1.2;
	ini.settings.max_velocity = 1.0;
}

void SmartJoystickNavigation::init(int argc, char *argv[])
{
	try
	{
		loadParameter(argc, argv);
		component = new CHS::SmartComponent(ini.component.name, argc, argv);

		std::cout << "Component SmartJoystickNavigation is named "
				<< ini.component.name << "." << std::endl;

		// create ports
		joystick_client = new CHS::PushNewestClient<
				CommBasicObjects::CommJoystick>(component);
		navigation_client = new CHS::SendClient<
				CommBasicObjects::CommNavigationVelocity>(component);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void SmartJoystickNavigation::run()
{
	compHandler.onStartup();
	component->run();
	delete component;
}

void SmartJoystickNavigation::loadParameter(int argc, char *argv[])
{
	/* 
	 Parameters can be specified via command line -filename=<filename>
	 
	 With this parameter present:
	 - The component will look for the file in the current working directory, 
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found
	 
	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc   
	 */
	CHS::SmartParameter parameter;

	// load parameters
	try
	{
		// check if paramfile is given as argument
		bool paramFile = false;
		std::string str;
		for (int i = 0; i < argc; i++)
		{
			str = argv[i];
			if (str.find("filename") != std::string::npos)
				paramFile = true;
		}

		// if paramfile is given as argument
		if (paramFile == true)
		{
			std::cout << "load parameter file from argv \n";
			parameter.addFile(argc, argv, "filename", false);
		}
		// else load standard paramfile
		else
		{
			std::cout << "load SmartJoystickNavigation.ini parameter file\n";
			parameter.addFile("SmartJoystickNavigation.ini");
		}

		// than add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLine("", argc, argv);

		// print all known parameters
		parameter.print(); // TODO remove this


		// load parameter
		parameter.getString("component", "name", ini.component.name);

		parameter.getString("joystick_client", "serverName",
				ini.joystick_client.serverName);
		parameter.getString("joystick_client", "serviceName",
				ini.joystick_client.serviceName);
		parameter.getString("navigation_client", "serverName",
				ini.navigation_client.serverName);
		parameter.getString("navigation_client", "serviceName",
				ini.navigation_client.serviceName);
		parameter.getDouble("settings", "max_steering",
				ini.settings.max_steering);
		parameter.getDouble("settings", "max_velocity",
				ini.settings.max_velocity);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (const CHS::ParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

