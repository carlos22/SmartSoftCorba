//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _SMARTJOYSTICKNAVIGATION_HH
#define _SMARTJOYSTICKNAVIGATION_HH

#include <iostream>
#include "smartSoft.hh"
#include "../SmartJoystickNavigationCore.hh"
// include communication objects
#include <CommBasicObjects/commJoystick.hh>

#include <CommBasicObjects/commNavigationVelocity.hh>

// include tasks	

#include "../JoystickNavigationThread.hh"
// include handler
#include "../CompHandler.hh"

#define COMP SmartJoystickNavigation::instance()

class SmartJoystickNavigation: public SmartJoystickNavigationCore
{
private:
	static SmartJoystickNavigation _smartJoystickNavigation;

	// constructor
	SmartJoystickNavigation();

	// copy-constructor
	SmartJoystickNavigation(const SmartJoystickNavigation& cc);

	// destructor
	~SmartJoystickNavigation()
	{
	}
	;

	// load parameter from ini file
	void loadParameter(int argc, char *argv[]);

	// instantiate handler
	CompHandler compHandler;

	// ThreadQueueHandler 

public:
	// component
	CHS::SmartComponent *component;

	// create mutex


	// create condition mutex


	// instantiate tasks

	JoystickNavigationThread joystickNavigationThread;

	// ports
	CHS::PushNewestClient<CommBasicObjects::CommJoystick> *joystick_client;
	CHS::SendClient<CommBasicObjects::CommNavigationVelocity>
			*navigation_client;

	void init(int argc, char *argv[]);
	void run();

	// return singleton instance
	static SmartJoystickNavigation* instance()
	{
		return (SmartJoystickNavigation*) &_smartJoystickNavigation;
	}

	// ini parameter
	struct ini_ini
	{

		// component struct
		struct ini_component
		{
			// the name of the component
			std::string name;
		} component;

		struct ini_joystick_client
		{
			std::string serverName;
			std::string serviceName;
		} joystick_client;

		struct ini_navigation_client
		{
			std::string serverName;
			std::string serviceName;
		} navigation_client;

		struct ini_settings
		{

			/**
			 * [rad/s]
			 */
			double max_steering;

			/**
			 * [m/s]
			 */
			double max_velocity;
		} settings;
	} ini;

};
#endif
