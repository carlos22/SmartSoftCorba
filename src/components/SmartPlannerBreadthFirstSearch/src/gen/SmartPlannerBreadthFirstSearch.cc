//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.4
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "SmartPlannerBreadthFirstSearch.hh"

// constructor
SmartPlannerBreadthFirstSearch::SmartPlannerBreadthFirstSearch() :
	PlannerTrigger(PlannerTriggerLock)
{
	std::cout << "constructor of SmartPlannerBreadthFirstSearch\n";

	ini.component.name = "SmartPlannerBreadthFirstSearch";

	ini.paramServer.serviceName = "param";
	ini.plannerEventServer.serviceName = "plannerEvent";
	ini.plannerGoalServer.serviceName = "goal";
	ini.stateServer.serviceName = "state";
	ini.baseClient.serverName = "SmartPioneerBaseServer";
	ini.baseClient.serviceName = "basestate";
	ini.baseClient.interval = 1;
	ini.curMapClient.serverName = "SmartMapperGridMap";
	ini.curMapClient.serviceName = "currentGridMap";
	ini.Settings.no_path_event_timeout = 5.0;
}

void SmartPlannerBreadthFirstSearch::init(int argc, char *argv[])
{
	try
	{
		loadParameter(argc, argv);
		component = new CHS::SmartComponent(ini.component.name, argc, argv);

		std::cout << "Component SmartPlannerBreadthFirstSearch is named "
				<< ini.component.name << "." << std::endl;

		// create ports
		baseClient = new CHS::PushTimedClient<CommBasicObjects::CommBaseState>(
				component);
		curMapClient = new CHS::PushNewestClient<
				CommNavigationObjects::CommGridMap>(component);

		paramServer = new CHS::SendServer<
				CommNavigationObjects::CommPlannerParameter>(component,
				ini.paramServer.serviceName, parameterHandler);

		plannerEventServer = new CHS::EventServer<
				CommNavigationObjects::CommPlannerEventParameter,
				CommNavigationObjects::CommPlannerEventResult,
				CommNavigationObjects::PlannerEventState>(component,
				ini.plannerEventServer.serviceName, plannerTestHandler);
		plannerGoalServer = new CHS::PushNewestServer<
				CommNavigationObjects::CommPlannerGoal>(component,
				ini.plannerGoalServer.serviceName);
		stateServer = new CHS::SmartStateServer(component,
				ini.stateServer.serviceName, stateChangeHandler);
		// define states for stateServer (CHS::SmartStateServer) 
		if (stateServer->defineStates("pathplanning", "pathplanning")
				!= CHS::SMART_OK)
			std::cerr << "ERROR: define state" << std::endl;
		wiringSlave = new CHS::WiringSlave(component);

		// add client port to wiring slave
		baseClient->add(wiringSlave, "baseClient");
		curMapClient->add(wiringSlave, "curMapClient");

		// create timer
		double fractpart, intpart;
		// setup plannerTriggerTimer
		fractpart = modf(0.25, &intpart);
		component->getTimerThread().scheduleTimer(plannerTriggerTimer,
				(void*) 0, ACE_Time_Value(0, 0), ACE_Time_Value(intpart,
						(int) (fractpart * 1000* 1000 )));

	}
	catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	}
	catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void SmartPlannerBreadthFirstSearch::run()
{
	compHandler.onStartup();
	component->run();
	delete component;
}

void SmartPlannerBreadthFirstSearch::loadParameter(int argc, char *argv[])
{
	/* 
	 Parameters can be specified via command line -filename=<filename>
	 
	 With this parameter present:
	 - The component will look for the file in the current working directory, 
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found
	 
	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc   
	 */
	CHS::SmartParameter parameter;

	// load parameters
	try
	{
		// check if paramfile is given as argument
		bool paramFile = false;
		std::string str;
		for (int i = 0; i < argc; i++)
		{
			str = argv[i];
			if (str.find("filename") != std::string::npos)
				paramFile = true;
		}

		// if paramfile is given as argument
		if (paramFile == true)
		{
			std::cout << "load parameter file from argv \n";
			parameter.addFile(argc, argv, "filename", false);
		}
		// else load standard paramfile
		else
		{
			std::cout
					<< "load SmartPlannerBreadthFirstSearch.ini parameter file\n";
			parameter.addFile("SmartPlannerBreadthFirstSearch.ini");
		}

		// than add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLine("", argc, argv);

		// print all known parameters
		parameter.print(); // TODO remove this


		// load parameter
		parameter.getString("component", "name", ini.component.name);

		parameter.getString("paramServer", "serviceName",
				ini.paramServer.serviceName);
		parameter.getString("plannerEventServer", "serviceName",
				ini.plannerEventServer.serviceName);
		parameter.getString("plannerGoalServer", "serviceName",
				ini.plannerGoalServer.serviceName);
		parameter.getString("stateServer", "serviceName",
				ini.stateServer.serviceName);
		parameter.getString("baseClient", "serverName",
				ini.baseClient.serverName);
		parameter.getString("baseClient", "serviceName",
				ini.baseClient.serviceName);
		parameter.getInt("baseClient", "interval", ini.baseClient.interval);
		parameter.getString("curMapClient", "serverName",
				ini.curMapClient.serverName);
		parameter.getString("curMapClient", "serviceName",
				ini.curMapClient.serviceName);
		parameter.getDouble("Settings", "no_path_event_timeout",
				ini.Settings.no_path_event_timeout);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (const CHS::ParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

