//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------
//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------
#include "DevicePoseStateTask.hh"
#include "gen/SmartPTUServer.hh"

#include <EulerTransformationMatrices.hh>

#include <iostream>

DevicePoseStateTask::DevicePoseStateTask() {
}

int DevicePoseStateTask::svc() {
	double pan, tilt;

	arma::mat ptuRobotOffset;
	// calculate transformation matrix for robot offset
	EulerTransformationMatrices::create_zyx_matrix(COMP->ini.PTU.x, COMP->ini.PTU.y, COMP->ini.PTU.z,
			COMP->ini.PTU.azimuth, COMP->ini.PTU.elevation, COMP->ini.PTU.roll, ptuRobotOffset);

	CommBasicObjects::CommBasePosition default_base_position;
	default_base_position.set_x(COMP->ini.base.x);
	default_base_position.set_y(COMP->ini.base.y);
	default_base_position.set_z(COMP->ini.base.z);
	default_base_position.set_base_alpha(COMP->ini.base.base_a);
	default_base_position.set_steer_alpha(COMP->ini.base.steer_a);
	default_base_position.set_turret_alpha(COMP->ini.base.turret_a);

	CommBasicObjects::CommBaseVelocity zero_velocity;
	zero_velocity.set_v(0);
	zero_velocity.set_omega_base(0);
	zero_velocity.set_omega_steer(0);
	zero_velocity.set_omega_turret(0);

	CommBasicObjects::CommBaseState base_state;
	CommBasicObjects::CommDevicePoseState device_state;

	while (1) {
		// wait here when the component is not active
		COMP->stateServer->acquire("active");
		COMP->stateServer->release("active");

		COMP->newPtuPos.acquire();

		if (COMP->ini.base.on_base) {
			CHS::SmartGuard guard(COMP->baseStateTask.base_mutex);
			base_state = COMP->baseStateTask.base_state;
			guard.release();
		} else {
			// wait until the ptu moves. (because it is a push newest)
			base_state.set_base_position(default_base_position);
			base_state.set_base_raw_position(default_base_position);
			base_state.set_base_velocity(zero_velocity);
			base_state.set_time_stamp(CommBasicObjects::CommTimeStamp::now());
		}

		COMP->ptu.getPos(pan, tilt);

		// calculate device pose on robot
		arma::mat pose(4,4);
		pose.zeros();
		pose(3,3) = 1;

		EulerTransformationMatrices::create_zyx_matrix(pan, -tilt, 0, pose);
		pose = ptuRobotOffset * pose;
		CommBasicObjects::CommPose3d sensor_pose(pose);

		device_state.set_device_pose3d_robot(sensor_pose);
		device_state.set_base_state(base_state);

		COMP->devicePoseStateServer->put(device_state);
	}
	return 0;
}
