//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.8.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------
//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------
#include "BaseStateTask.hh"
#include "gen/SmartPTUServer.hh"

#include <iostream>

BaseStateTask::BaseStateTask() {
	std::cout << "constructor BaseStateTask\n";
}

int BaseStateTask::svc() {
	CommBasicObjects::CommBaseState local_base_state;

	while (1) {
		CHS::StatusCode statusCode;

		// wait for a new base state.
		statusCode = COMP->baseStateClient->getUpdateWait(local_base_state);
		if (statusCode != CHS::SMART_OK) {
			std::cerr << "ERROR during base get update state: " << CHS::StatusCodeConversion(statusCode) << "\n";
		}

		CHS::SmartGuard guard(base_mutex);
		base_state = local_base_state;
		guard.release();

		COMP->newPtuPos.release();
	}
	return 0;
}
