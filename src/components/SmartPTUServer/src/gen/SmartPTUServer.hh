//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.4
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _SMARTPTUSERVER_HH
#define _SMARTPTUSERVER_HH

#include <iostream>
#include "smartSoft.hh"
#include "../SmartPTUServerCore.hh"
// include communication objects
#include <CommBasicObjects/commBaseState.hh>
#include <CommBasicObjects/commDevicePoseState.hh>
#include <CommBasicObjects/commVoid.hh>
#include <CommPTUObjects/commPTUGoalEventParameter.hh>
#include <CommPTUObjects/commPTUGoalEventResult.hh>
#include <CommPTUObjects/commPTUMoveRequest.hh>
#include <CommPTUObjects/commPTUMoveResponse.hh>
#include <CommPTUObjects/commPTUParameter.hh>
#include <CommPTUObjects/pTUGoalEventState.hh>
// include tasks	

#include "../BaseStateTask.hh"
#include "../DevicePoseStateTask.hh"
// include handler
#include "../CompHandler.hh"
#include "../GoalEventTestHandler.hh"
#include "../MoveQueryHandler.hh"
#include "../MoveSendHandler.hh"
#include "../ParamHandler.hh"
#include "../StateChangeHandler.hh"

#define COMP SmartPTUServer::instance()

class SmartPTUServer: public SmartPTUServerCore
{
private:
	static SmartPTUServer _smartPTUServer;

	// constructor
	SmartPTUServer();

	// copy-constructor
	SmartPTUServer(const SmartPTUServer& cc);

	// destructor
	~SmartPTUServer()
	{
	}
	;

	// load parameter from ini file
	void loadParameter(int argc, char *argv[]);

	// instantiate handler
	CompHandler compHandler;
	GoalEventTestHandler goalEventTestHandler;
	MoveQueryHandler moveQueryHandler;
	MoveSendHandler moveSendHandler;
	ParamHandler paramHandler;
	StateChangeHandler stateChangeHandler;

	// ThreadQueueHandler 
	CHS::ThreadQueueQueryHandler<CommPTUObjects::CommPTUMoveRequest,
			CommPTUObjects::CommPTUMoveResponse> *threadMoveQueryHandler;

	CHS::ThreadQueueSendHandler<CommPTUObjects::CommPTUMoveRequest>
			*threadMoveSendHandler;

public:
	// component
	CHS::SmartComponent *component;

	// create mutex
	CHS::SmartMutex PTUMutex;
	CHS::SmartMutex ParamMutex;

	// create condition mutex


	// instantiate tasks

	BaseStateTask baseStateTask;
	DevicePoseStateTask devicePoseStateTask;

	// ports
	CHS::PushTimedClient<CommBasicObjects::CommBaseState> *baseStateClient;
	CHS::QueryClient<CommBasicObjects::CommVoid,
			CommBasicObjects::CommBaseState> *baseStateQueryClient;
	CHS::PushNewestServer<CommBasicObjects::CommDevicePoseState>
			*devicePoseStateServer;
	CHS::EventServer<CommPTUObjects::CommPTUGoalEventParameter,
			CommPTUObjects::CommPTUGoalEventResult,
			CommPTUObjects::PTUGoalEventState> *goalEventServer;
	CHS::QueryServer<CommPTUObjects::CommPTUMoveRequest,
			CommPTUObjects::CommPTUMoveResponse> *moveQueryServer;
	CHS::SendServer<CommPTUObjects::CommPTUMoveRequest> *moveSendServer;
	CHS::SendServer<CommPTUObjects::CommPTUParameter> *paramServer;
	CHS::SmartStateServer *stateServer;
	CHS::WiringSlave *wiringSlave;

	void init(int argc, char *argv[]);
	void run();

	// return singleton instance
	static SmartPTUServer* instance()
	{
		return (SmartPTUServer*) &_smartPTUServer;
	}

	// ini parameter
	struct ini_ini
	{

		// component struct
		struct ini_component
		{
			// the name of the component
			std::string name;
		} component;

		struct ini_devicePoseStateServer
		{
			std::string serviceName;
		} devicePoseStateServer;

		struct ini_goalEventServer
		{
			std::string serviceName;
		} goalEventServer;

		struct ini_moveQueryServer
		{
			std::string serviceName;
		} moveQueryServer;

		struct ini_moveSendServer
		{
			std::string serviceName;
		} moveSendServer;

		struct ini_paramServer
		{
			std::string serviceName;
		} paramServer;

		struct ini_stateServer
		{
			std::string serviceName;
		} stateServer;

		struct ini_baseStateClient
		{
			std::string serverName;
			std::string serviceName;
			long interval;
		} baseStateClient;

		struct ini_baseStateQueryClient
		{
			std::string serverName;
			std::string serviceName;
		} baseStateQueryClient;

		struct ini_PTU
		{

			/**
			 * The azimuth angle of the ptu on the robot. [rad] Default = 0
			 */
			double azimuth;

			/**
			 * The device which represents the ptu. Default = /dev/ttyS0
			 */
			std::string device;

			/**
			 * The elevation angle of the ptu on the robot. [rad] Default = 0
			 */
			double elevation;

			/**
			 * The roll angle of the ptu on the robot. [rad] Default = 0
			 */
			double roll;

			bool verbose;

			/**
			 * The x position of the ptu on the robot. [mm] Default = 0
			 */
			long x;

			/**
			 * The y position of the ptu on the robot. [mm] Default = 0
			 */
			long y;

			/**
			 * The z position of the ptu on the robot. [mm] Default = 0
			 */
			long z;
		} PTU;

		struct ini_base
		{

			/**
			 * If on_base = false this represents the base angle of the robot. [mm] Default = 0
			 */
			double base_a;

			/**
			 * Flag which indicates if the ptu is on a robot. Default = true
			 */
			bool on_base;

			/**
			 * If on_base = false this represents the steering angle of the robot. [mm] Default = 0
			 */
			double steer_a;

			/**
			 * If on_base = false this represents the turret angle of the robot. [mm] Default = 0
			 */
			double turret_a;

			/**
			 * If on_base = false this represents the x position of the robot. [mm] Default = 0
			 */
			long x;

			/**
			 * If on_base = false this represents the y position of the robot. [mm] Default = 0
			 */
			long y;

			/**
			 * If on_base = false this represents the z position of the robot. [mm] Default = 0
			 */
			long z;
		} base;

		struct ini_hardware
		{

			/**
			 * Acceleration of the pan axis. [rad per sec^2] Default = 1.795
			 */
			double acceleration_pan;

			/**
			 * Acceleration of the tilt axis. [rad per sec^2] Default = 1.795
			 */
			double acceleration_tilt;

			/**
			 * Max speed the pan axis can move. [rad per sec] Default = 2.604
			 */
			double max_speed_pan;

			/**
			 * Max speed the tilt axis can move. [rad per sec] Default = 2.604
			 */
			double max_speed_tilt;

			/**
			 * Min speed the pan axis can move. [rad per sec] Default = 0.028
			 */
			double min_speed_pan;

			/**
			 * Min speed the tilt axis can move. [rad per sec] Default = 0.028
			 */
			double min_speed_tilt;

			/**
			 * Speed the pan axis should move. [rad per sec] Default = 1.0
			 */
			double speed_pan;

			/**
			 * Speed the tilt axis should move. [rad per sec] Default = 1.0
			 */
			double speed_tilt;

			/**
			 * Start up speed of the pan axis. [rad per sec] Default = 0.2
			 */
			double start_up_speed_pan;

			/**
			 * Start up speed of the tilt axis. [rad per sec] Default = 0.2
			 */
			double start_up_speed_tilt;
		} hardware;
	} ini;

};
#endif
