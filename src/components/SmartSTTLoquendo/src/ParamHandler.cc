//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2009 Andreas Steck, Matthias Lutz
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft SpeechOutput component".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

//----------------------------------------------------------------------------
//
// CREDITS:
//
// The code for the communication with Loquendo was gracefully provided by the
// robocup team NimbRo of the University of Bonn in Germany.
// http://www.ais.uni-bonn.de/nimbro/
//
//----------------------------------------------------------------------------




#include "ParamHandler.hh"
#include "gen/SmartSTTLoquendo.hh"
#include "loquendo.cc"

#include <iostream>

void ParamHandler::handleSend(
		const CommSpeechObjects::CommSpeechInputParameter &r) throw()
{
    CommSpeechObjects::SpeechInputTagType tag;
    std::string p1;
    r.get(tag,p1);

    lasrxResultType nRetCode = LASRX_RETCODE_OK;

    switch (tag)
    {
      /////////////////////////////////////////////////////////////////////
      // CDL_SET_GRAMMER
      case  CommSpeechObjects::SpeechInputTagType::SPEECH_SET_GRAMMAR:
      {

        std::cout << "SPEECH_SET_GRAMMER "
                  << "Parameters: " << p1 <<" \n";


        COMP->cvRecog.blockingUser(true);
        lasrxStop(COMP->hInstance_global);
        COMP->recLock.acquire();

        if ((nRetCode = __DeleteRO(COMP->hInstance_global, LASRX_EX_RO_NAME)) != 0)
        {
           __ReportError("main", "ERROR deleting recognition object\n");
           lasrxDeleteInstance(COMP->hInstance_global);
           //lasrxDeleteSession(hSession);
           exit(-1);
        }

        if ((nRetCode = __BuildRO(COMP->hInstance_global, &p1[0], LASRX_EX_RO_NAME)) != 0)
	{
          __ReportError("main", "ERROR building recognition object\n");
          lasrxDeleteInstance(COMP->hInstance_global);
          //lasrxDeleteSession(hSession);
          exit(-1);
        }

        COMP->recLock.release();
        COMP->cvRecog.blockingUser(false);

        break;
      }


      /////////////////////////////////////////////////////////////////////
      // default
      default:
      {
        break;
      }

    } // switch


}
