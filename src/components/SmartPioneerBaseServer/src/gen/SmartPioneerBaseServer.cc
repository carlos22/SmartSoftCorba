//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "SmartPioneerBaseServer.hh"

// constructor
SmartPioneerBaseServer::SmartPioneerBaseServer()
{
	std::cout << "constructor of SmartPioneerBaseServer\n";

	ini.component.name = "SmartPioneerBaseServer";

	ini.basePositionServer.serviceName = "basestate";
	ini.basePositionServer.cycle = 0.1;
	ini.basePositionUpdateServer.serviceName = "positionUpdate";
	ini.baseQueryServer.serviceName = "basestatequery";
	ini.navigationVelocityServer.serviceName = "navigationvelocity";
	ini.paramServer.serviceName = "param";
	ini.robot.enable_motors = true;
	ini.robot.enable_sonar = false;
	ini.robot.maxRotVel = 300;
	ini.robot.maxRotVelAcc = 100;
	ini.robot.maxRotVelDecel = 100;
	ini.robot.maxVel = 1000;
	ini.robot.maxVelAcc = 300;
	ini.robot.maxVelDecel = 300;
	ini.robot.robotType = "p3dx";
	ini.robot.serialport = "/dev/ttyS0";
}

void SmartPioneerBaseServer::init(int argc, char *argv[])
{
	try
	{
		loadParameter(argc, argv);
		component = new CHS::SmartComponent(ini.component.name, argc, argv);

		std::cout << "Component SmartPioneerBaseServer is named "
				<< ini.component.name << "." << std::endl;

		// create ports
		basePositionServer = new CHS::PushTimedServer<
				CommBasicObjects::CommBaseState>(component,
				ini.basePositionServer.serviceName, baseStateHandler,
				ini.basePositionServer.cycle);

		basePositionUpdateServer = new CHS::SendServer<
				CommBasicObjects::CommBasePositionUpdate>(component,
				ini.basePositionUpdateServer.serviceName,
				basePositionUpdateHandler);

		baseQueryServer = new CHS::QueryServer<CommBasicObjects::CommVoid,
				CommBasicObjects::CommBaseState>(component,
				ini.baseQueryServer.serviceName, baseStateQueryHandler);

		navigationVelocityServer = new CHS::SendServer<
				CommBasicObjects::CommNavigationVelocity>(component,
				ini.navigationVelocityServer.serviceName,
				navigationVelocityHandler);

		paramServer = new CHS::SendServer<CommBasicObjects::CommBaseParameter>(
				component, ini.paramServer.serviceName, parameterHandler);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void SmartPioneerBaseServer::run()
{
	compHandler.onStartup();
	component->run();
	delete component;
}

void SmartPioneerBaseServer::loadParameter(int argc, char *argv[])
{
	/* 
	 Parameters can be specified via command line -filename=<filename>
	 
	 With this parameter present:
	 - The component will look for the file in the current working directory, 
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found
	 
	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc   
	 */
	CHS::SmartParameter parameter;

	// load parameters
	try
	{
		// check if paramfile is given as argument
		bool paramFile = false;
		std::string str;
		for (int i = 0; i < argc; i++)
		{
			str = argv[i];
			if (str.find("filename") != std::string::npos)
				paramFile = true;
		}

		// if paramfile is given as argument
		if (paramFile == true)
		{
			std::cout << "load parameter file from argv \n";
			parameter.addFile(argc, argv, "filename", false);
		}
		// else load standard paramfile
		else
		{
			std::cout << "load SmartPioneerBaseServer.ini parameter file\n";
			parameter.addFile("SmartPioneerBaseServer.ini");
		}

		// than add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLine("", argc, argv);

		// print all known parameters
		parameter.print(); // TODO remove this


		// load parameter
		parameter.getString("component", "name", ini.component.name);

		parameter.getString("basePositionServer", "serviceName",
				ini.basePositionServer.serviceName);
		parameter.getDouble("basePositionServer", "cycle",
				ini.basePositionServer.cycle);
		parameter.getString("basePositionUpdateServer", "serviceName",
				ini.basePositionUpdateServer.serviceName);
		parameter.getString("baseQueryServer", "serviceName",
				ini.baseQueryServer.serviceName);
		parameter.getString("navigationVelocityServer", "serviceName",
				ini.navigationVelocityServer.serviceName);
		parameter.getString("paramServer", "serviceName",
				ini.paramServer.serviceName);
		parameter.getTruthValue("robot", "enable_motors",
				ini.robot.enable_motors);
		parameter.getTruthValue("robot", "enable_sonar", ini.robot.enable_sonar);
		parameter.getInt("robot", "maxRotVel", ini.robot.maxRotVel);
		parameter.getInt("robot", "maxRotVelAcc", ini.robot.maxRotVelAcc);
		parameter.getInt("robot", "maxRotVelDecel", ini.robot.maxRotVelDecel);
		parameter.getInt("robot", "maxVel", ini.robot.maxVel);
		parameter.getInt("robot", "maxVelAcc", ini.robot.maxVelAcc);
		parameter.getInt("robot", "maxVelDecel", ini.robot.maxVelDecel);
		parameter.getString("robot", "robotType", ini.robot.robotType);
		parameter.getString("robot", "serialport", ini.robot.serialport);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (const CHS::ParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

