//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Copyright (C) 2008 Christian Schlegel, Andreas Steck
//                2009 Andreas Steck
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotic Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public License
//  as published by the Free Software Foundation; either version 2.1
//  of the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public License along
//  with this library; if not, write to the Free Software Foundation, Inc.,
//  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
//--------------------------------------------------------------------------

#include "CompHandler.hh"
#include "gen/SmartPioneerBaseServer.hh"

#include <iostream>

// include communication objects

void CompHandler::onStartup()
{
    int robotType = -1;
    if( strcmp("p3dx", COMP->ini.robot.robotType.c_str() ) == 0 )
    {
      robotType = ROBOT_TYPE_P3DX;
    }
    else if( strcmp("p3dxsh", COMP->ini.robot.robotType.c_str() ) == 0 )
    {
      robotType = ROBOT_TYPE_P3DX_SH;
    }
    else if( strcmp("p3atsh", COMP->ini.robot.robotType.c_str() ) == 0 )
    {
      robotType = ROBOT_TYPE_P3AT_SH;
    }
    COMP->robot = new Robot(robotType);

	COMP->robot->openSerial( COMP->ini.robot.serialport,
			COMP->ini.robot.enable_motors,
			COMP->ini.robot.enable_sonar);

	COMP->robot->setParameters(	COMP->ini.robot.maxVel,
			COMP->ini.robot.maxRotVel,
			COMP->ini.robot.maxVelAcc,
			COMP->ini.robot.maxVelDecel,
			COMP->ini.robot.maxRotVelAcc,
			COMP->ini.robot.maxRotVelDecel );

	COMP->robot->open();

	// start push timed server
	COMP->basePositionServer->start();
}
