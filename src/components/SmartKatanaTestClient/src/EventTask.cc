//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//--------------------------------------------------------------------------

//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "SmartKatanaTestClient component".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------

#include "EventTask.hh"
#include "gen/SmartKatanaTestClient.hh"

#include <iostream>

EventTask::EventTask()
{
	std::cout << "constructor EventTask\n";
}

int EventTask::svc()
{
	// activate event
	CommManipulatorObjects::CommManipulatorEventParameter parameter;
	parameter.set_event(CommManipulatorObjects::ManipulatorEvent::COLLISION);
	CHS::EventId id;

	COMP->manipulatorEventClient->activate(CHS::continuous, parameter, id);

	CHS::StatusCode status;
	CommManipulatorObjects::CommManipulatorEventResult result;
	while (1)
	{

		//		Smart::CommMobileManipulatorState state;
		//		COMP->posePushTimedClient->getUpdate(state);
		//		state.get_manipulator_state().print();

		status = COMP->manipulatorEventClient->getEvent(id, result);
		if (status == CHS::SMART_OK)
		{
			std::cout << "Katana Collision!\n";
		}
		else
		{
			std::cout << CHS::StatusCodeConversion(status) << "\n";
		}
	}
	return 0;
}
