//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _SMARTKATANATESTCLIENT_HH
#define _SMARTKATANATESTCLIENT_HH

#include <iostream>
#include "smartSoft.hh"
#include "../SmartKatanaTestClientCore.hh"
// include communication objects
#include <CommBasicObjects/commMobileLaserScan.hh>

#include <CommBasicObjects/commVoid.hh>

#include <CommManipulationPlannerObjects/commManipulationPlannerEventParameter.hh>

#include <CommManipulationPlannerObjects/commManipulationPlannerEventResult.hh>

#include <CommManipulationPlannerObjects/commManipulationPlannerParameter.hh>

#include <CommManipulatorObjects/commManipulatorEventParameter.hh>

#include <CommManipulatorObjects/commManipulatorEventResult.hh>

#include <CommManipulatorObjects/commManipulatorId.hh>

#include <CommManipulatorObjects/commManipulatorParameter.hh>

#include <CommManipulatorObjects/commManipulatorRequestScan3d.hh>

#include <CommManipulatorObjects/commManipulatorTrajectory.hh>

#include <CommManipulatorObjects/commMobileManipulatorState.hh>

#include <CommObjectRecognitionObjects/commObjectRecognitionEventResult.hh>

#include <CommObjectRecognitionObjects/commObjectRecognitionId.hh>

#include <CommObjectRecognitionObjects/commObjectRecognitionObjectProperties.hh>

#include <CommObjectRecognitionObjects/commObjectRecognitionParameter.hh>

#include <CommVisionObjects/comm3dPointCloud.hh>

// include tasks	

#include "../EventTask.hh"
#include "../KatanaGoalTask.hh"
#include "../PoseTask.hh"
#include "../TestTask.hh"
#include "../ViewerTask.hh"
// include handler
#include "../CompHandler.hh"

#define COMP SmartKatanaTestClient::instance()

class SmartKatanaTestClient: public SmartKatanaTestClientCore
{
private:
	static SmartKatanaTestClient _smartKatanaTestClient;

	// constructor
	SmartKatanaTestClient();

	// copy-constructor
	SmartKatanaTestClient(const SmartKatanaTestClient& cc);

	// destructor
	~SmartKatanaTestClient()
	{
	}
	;

	// load parameter from ini file
	void loadParameter(int argc, char *argv[]);

	// instantiate handler
	CompHandler compHandler;

	// ThreadQueueHandler 

public:
	// component
	CHS::SmartComponent *component;

	// create mutex
	CHS::SmartMutex ViewerMutex;

	// create condition mutex


	// instantiate tasks

	EventTask eventTask;
	KatanaGoalTask katanaGoalTask;
	PoseTask poseTask;
	TestTask testTask;
	ViewerTask viewerTask;

	// ports
	CHS::PushTimedClient<CommBasicObjects::CommMobileLaserScan>
			*laserPushTimedClient;
	CHS::QueryClient<CommBasicObjects::CommVoid,
			CommBasicObjects::CommMobileLaserScan> *laserQueryClient;
	CHS::SmartStateClient *laserStateClient;
	CHS::EventClient<CommManipulatorObjects::CommManipulatorEventParameter,
			CommManipulatorObjects::CommManipulatorEventResult>
			*manipulatorEventClient;
	CHS::SendClient<CommManipulatorObjects::CommManipulatorParameter>
			*manipulatorParamClient;
	CHS::PushTimedClient<CommManipulatorObjects::CommMobileManipulatorState>
			*manipulatorPosePushTimedClient;
	CHS::SendClient<CommManipulatorObjects::CommManipulatorRequestScan3d>
			*manipulatorRequestScan3dSendClient;
	CHS::QueryClient<CommManipulatorObjects::CommManipulatorId,
			CommVisionObjects::Comm3dPointCloud> *manipulatorScan3dQueryClient;
	CHS::EventClient<CommBasicObjects::CommVoid,
			CommManipulatorObjects::CommManipulatorId>
			*manipulatorScanEventClient;
	CHS::SmartStateClient *manipulatorStateClient;
	CHS::SendClient<CommManipulatorObjects::CommManipulatorTrajectory>
			*manipulatorTrajectorySendClient;
	CHS::EventClient<
			CommManipulationPlannerObjects::CommManipulationPlannerEventParameter,
			CommManipulationPlannerObjects::CommManipulationPlannerEventResult>
			*openRaveEventClient;
	CHS::SendClient<
			CommManipulationPlannerObjects::CommManipulationPlannerParameter>
			*openRaveParameterClient;
	CHS::SmartStateClient *openRaveStateClient;
	CHS::SendClient<CommManipulatorObjects::CommManipulatorTrajectory>
			*openRaveTrajectorySendClient;
	CHS::EventClient<CommBasicObjects::CommVoid,
			CommObjectRecognitionObjects::CommObjectRecognitionEventResult>
			*recognitionEventClient;
	CHS::SendClient<
			CommObjectRecognitionObjects::CommObjectRecognitionParameter>
			*recognitionParameterClient;
	CHS::QueryClient<CommObjectRecognitionObjects::CommObjectRecognitionId,
			CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties>
			*recognitionPropertyQueryClient;
	CHS::SmartStateClient *recognitionStateClient;

	void init(int argc, char *argv[]);
	void run();

	// return singleton instance
	static SmartKatanaTestClient* instance()
	{
		return (SmartKatanaTestClient*) &_smartKatanaTestClient;
	}

	// ini parameter
	struct ini_ini
	{

		// component struct
		struct ini_component
		{
			// the name of the component
			std::string name;
		} component;

		struct ini_laserPushTimedClient
		{
			std::string serverName;
			std::string serviceName;
			long interval;
		} laserPushTimedClient;

		struct ini_laserQueryClient
		{
			std::string serverName;
			std::string serviceName;
		} laserQueryClient;

		struct ini_laserStateClient
		{
			std::string serverName;
			std::string serviceName;
		} laserStateClient;

		struct ini_manipulatorEventClient
		{
			std::string serverName;
			std::string serviceName;
		} manipulatorEventClient;

		struct ini_manipulatorParamClient
		{
			std::string serverName;
			std::string serviceName;
		} manipulatorParamClient;

		struct ini_manipulatorPosePushTimedClient
		{
			std::string serverName;
			std::string serviceName;
			long interval;
		} manipulatorPosePushTimedClient;

		struct ini_manipulatorRequestScan3dSendClient
		{
			std::string serverName;
			std::string serviceName;
		} manipulatorRequestScan3dSendClient;

		struct ini_manipulatorScan3dQueryClient
		{
			std::string serverName;
			std::string serviceName;
		} manipulatorScan3dQueryClient;

		struct ini_manipulatorScanEventClient
		{
			std::string serverName;
			std::string serviceName;
		} manipulatorScanEventClient;

		struct ini_manipulatorStateClient
		{
			std::string serverName;
			std::string serviceName;
		} manipulatorStateClient;

		struct ini_manipulatorTrajectorySendClient
		{
			std::string serverName;
			std::string serviceName;
		} manipulatorTrajectorySendClient;

		struct ini_openRaveEventClient
		{
			std::string serverName;
			std::string serviceName;
		} openRaveEventClient;

		struct ini_openRaveParameterClient
		{
			std::string serverName;
			std::string serviceName;
		} openRaveParameterClient;

		struct ini_openRaveStateClient
		{
			std::string serverName;
			std::string serviceName;
		} openRaveStateClient;

		struct ini_openRaveTrajectorySendClient
		{
			std::string serverName;
			std::string serviceName;
		} openRaveTrajectorySendClient;

		struct ini_recognitionEventClient
		{
			std::string serverName;
			std::string serviceName;
		} recognitionEventClient;

		struct ini_recognitionParameterClient
		{
			std::string serverName;
			std::string serviceName;
		} recognitionParameterClient;

		struct ini_recognitionPropertyQueryClient
		{
			std::string serverName;
			std::string serviceName;
		} recognitionPropertyQueryClient;

		struct ini_recognitionStateClient
		{
			std::string serverName;
			std::string serviceName;
		} recognitionStateClient;

		struct ini_connect_services
		{

			/**
			 * paints all points into the opengl window. no points are removed.
			 */
			bool continous_scan;

			bool laser_connected;

			bool manipulator_connected;

			bool object_recognition_connected;

			bool openrave_connected;

			bool show_opengl_window;
		} connect_services;
	} ini;

};
#endif
