//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "SmartKatanaTestClient.hh"

// constructor
SmartKatanaTestClient::SmartKatanaTestClient()
{
	std::cout << "constructor of SmartKatanaTestClient\n";

	ini.component.name = "SmartKatanaTestClient";

	ini.laserPushTimedClient.serverName = "SmartLaserHokuyoURGServer";
	ini.laserPushTimedClient.serviceName = "scan";
	ini.laserPushTimedClient.interval = 1;
	ini.laserQueryClient.serverName = "SmartLaserHokuyoURGServer";
	ini.laserQueryClient.serviceName = "scan";
	ini.laserStateClient.serverName = "SmartLaserHokuyoURGServer";
	ini.laserStateClient.serviceName = "state";
	ini.manipulatorEventClient.serverName = "SmartKatanaServer";
	ini.manipulatorEventClient.serviceName = "eventServer";
	ini.manipulatorParamClient.serverName = "SmartKatanaServer";
	ini.manipulatorParamClient.serviceName = "param";
	ini.manipulatorPosePushTimedClient.serverName = "SmartKatanaServer";
	ini.manipulatorPosePushTimedClient.serviceName = "currentPose";
	ini.manipulatorPosePushTimedClient.interval = 1;
	ini.manipulatorRequestScan3dSendClient.serverName = "SmartKatanaServer";
	ini.manipulatorRequestScan3dSendClient.serviceName = "request3dscan";
	ini.manipulatorScan3dQueryClient.serverName = "SmartKatanaServer";
	ini.manipulatorScan3dQueryClient.serviceName = "3dscan";
	ini.manipulatorScanEventClient.serverName = "SmartKatanaServer";
	ini.manipulatorScanEventClient.serviceName = "newScan";
	ini.manipulatorStateClient.serverName = "SmartKatanaServer";
	ini.manipulatorStateClient.serviceName = "state";
	ini.manipulatorTrajectorySendClient.serverName = "SmartKatanaServer";
	ini.manipulatorTrajectorySendClient.serviceName = "performTrajectory";
	ini.openRaveEventClient.serverName = "SmartOpenRave";
	ini.openRaveEventClient.serviceName = "eventServer";
	ini.openRaveParameterClient.serverName = "SmartOpenRave";
	ini.openRaveParameterClient.serviceName = "param";
	ini.openRaveStateClient.serverName = "SmartOpenRave";
	ini.openRaveStateClient.serviceName = "stateServer";
	ini.openRaveTrajectorySendClient.serverName = "SmartOpenRave";
	ini.openRaveTrajectorySendClient.serviceName = "pathPlanning";
	ini.recognitionEventClient.serverName
			= "Smart3dPointCloudObjectRecognition";
	ini.recognitionEventClient.serviceName = "eventServer";
	ini.recognitionParameterClient.serverName
			= "Smart3dPointCloudObjectRecognition";
	ini.recognitionParameterClient.serviceName = "param";
	ini.recognitionPropertyQueryClient.serverName
			= "Smart3dPointCloudObjectRecognition";
	ini.recognitionPropertyQueryClient.serviceName = "objectFeatures";
	ini.recognitionStateClient.serverName
			= "Smart3dPointCloudObjectRecognition";
	ini.recognitionStateClient.serviceName = "state";
	ini.connect_services.continous_scan = false;
	ini.connect_services.laser_connected = true;
	ini.connect_services.manipulator_connected = true;
	ini.connect_services.object_recognition_connected = false;
	ini.connect_services.openrave_connected = false;
	ini.connect_services.show_opengl_window = true;
}

void SmartKatanaTestClient::init(int argc, char *argv[])
{
	try
	{
		loadParameter(argc, argv);
		component = new CHS::SmartComponent(ini.component.name, argc, argv);

		std::cout << "Component SmartKatanaTestClient is named "
				<< ini.component.name << "." << std::endl;

		// create ports
		laserPushTimedClient = new CHS::PushTimedClient<
				CommBasicObjects::CommMobileLaserScan>(component);
		laserQueryClient = new CHS::QueryClient<CommBasicObjects::CommVoid,
				CommBasicObjects::CommMobileLaserScan>(component);
		laserStateClient = new CHS::SmartStateClient(component);

		manipulatorEventClient = new CHS::EventClient<
				CommManipulatorObjects::CommManipulatorEventParameter,
				CommManipulatorObjects::CommManipulatorEventResult>(component);

		manipulatorParamClient = new CHS::SendClient<
				CommManipulatorObjects::CommManipulatorParameter>(component);
		manipulatorPosePushTimedClient = new CHS::PushTimedClient<
				CommManipulatorObjects::CommMobileManipulatorState>(component);
		manipulatorRequestScan3dSendClient
				= new CHS::SendClient<
						CommManipulatorObjects::CommManipulatorRequestScan3d>(
						component);
		manipulatorScan3dQueryClient = new CHS::QueryClient<
				CommManipulatorObjects::CommManipulatorId,
				CommVisionObjects::Comm3dPointCloud>(component);

		manipulatorScanEventClient = new CHS::EventClient<
				CommBasicObjects::CommVoid,
				CommManipulatorObjects::CommManipulatorId>(component);

		manipulatorStateClient = new CHS::SmartStateClient(component);
		manipulatorTrajectorySendClient = new CHS::SendClient<
				CommManipulatorObjects::CommManipulatorTrajectory>(component);

		openRaveEventClient
				= new CHS::EventClient<
						CommManipulationPlannerObjects::CommManipulationPlannerEventParameter,
						CommManipulationPlannerObjects::CommManipulationPlannerEventResult>(
						component);

		openRaveParameterClient
				= new CHS::SendClient<
						CommManipulationPlannerObjects::CommManipulationPlannerParameter>(
						component);
		openRaveStateClient = new CHS::SmartStateClient(component);
		openRaveTrajectorySendClient = new CHS::SendClient<
				CommManipulatorObjects::CommManipulatorTrajectory>(component);

		recognitionEventClient
				= new CHS::EventClient<
						CommBasicObjects::CommVoid,
						CommObjectRecognitionObjects::CommObjectRecognitionEventResult>(
						component);

		recognitionParameterClient = new CHS::SendClient<
				CommObjectRecognitionObjects::CommObjectRecognitionParameter>(
				component);
		recognitionPropertyQueryClient
				= new CHS::QueryClient<
						CommObjectRecognitionObjects::CommObjectRecognitionId,
						CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties>(
						component);
		recognitionStateClient = new CHS::SmartStateClient(component);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void SmartKatanaTestClient::run()
{
	compHandler.onStartup();
	component->run();
	delete component;
}

void SmartKatanaTestClient::loadParameter(int argc, char *argv[])
{
	/* 
	 Parameters can be specified via command line -filename=<filename>
	 
	 With this parameter present:
	 - The component will look for the file in the current working directory, 
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found
	 
	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc   
	 */
	CHS::SmartParameter parameter;

	// load parameters
	try
	{
		// check if paramfile is given as argument
		bool paramFile = false;
		std::string str;
		for (int i = 0; i < argc; i++)
		{
			str = argv[i];
			if (str.find("filename") != std::string::npos)
				paramFile = true;
		}

		// if paramfile is given as argument
		if (paramFile == true)
		{
			std::cout << "load parameter file from argv \n";
			parameter.addFile(argc, argv, "filename", false);
		}
		// else load standard paramfile
		else
		{
			std::cout << "load SmartKatanaTestClient.ini parameter file\n";
			parameter.addFile("SmartKatanaTestClient.ini");
		}

		// than add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLine("", argc, argv);

		// print all known parameters
		parameter.print(); // TODO remove this


		// load parameter
		parameter.getString("component", "name", ini.component.name);

		parameter.getString("laserPushTimedClient", "serverName",
				ini.laserPushTimedClient.serverName);
		parameter.getString("laserPushTimedClient", "serviceName",
				ini.laserPushTimedClient.serviceName);
		parameter.getInt("laserPushTimedClient", "interval",
				ini.laserPushTimedClient.interval);
		parameter.getString("laserQueryClient", "serverName",
				ini.laserQueryClient.serverName);
		parameter.getString("laserQueryClient", "serviceName",
				ini.laserQueryClient.serviceName);
		parameter.getString("laserStateClient", "serverName",
				ini.laserStateClient.serverName);
		parameter.getString("laserStateClient", "serviceName",
				ini.laserStateClient.serviceName);
		parameter.getString("manipulatorEventClient", "serverName",
				ini.manipulatorEventClient.serverName);
		parameter.getString("manipulatorEventClient", "serviceName",
				ini.manipulatorEventClient.serviceName);
		parameter.getString("manipulatorParamClient", "serverName",
				ini.manipulatorParamClient.serverName);
		parameter.getString("manipulatorParamClient", "serviceName",
				ini.manipulatorParamClient.serviceName);
		parameter.getString("manipulatorPosePushTimedClient", "serverName",
				ini.manipulatorPosePushTimedClient.serverName);
		parameter.getString("manipulatorPosePushTimedClient", "serviceName",
				ini.manipulatorPosePushTimedClient.serviceName);
		parameter.getInt("manipulatorPosePushTimedClient", "interval",
				ini.manipulatorPosePushTimedClient.interval);
		parameter.getString("manipulatorRequestScan3dSendClient", "serverName",
				ini.manipulatorRequestScan3dSendClient.serverName);
		parameter.getString("manipulatorRequestScan3dSendClient",
				"serviceName",
				ini.manipulatorRequestScan3dSendClient.serviceName);
		parameter.getString("manipulatorScan3dQueryClient", "serverName",
				ini.manipulatorScan3dQueryClient.serverName);
		parameter.getString("manipulatorScan3dQueryClient", "serviceName",
				ini.manipulatorScan3dQueryClient.serviceName);
		parameter.getString("manipulatorScanEventClient", "serverName",
				ini.manipulatorScanEventClient.serverName);
		parameter.getString("manipulatorScanEventClient", "serviceName",
				ini.manipulatorScanEventClient.serviceName);
		parameter.getString("manipulatorStateClient", "serverName",
				ini.manipulatorStateClient.serverName);
		parameter.getString("manipulatorStateClient", "serviceName",
				ini.manipulatorStateClient.serviceName);
		parameter.getString("manipulatorTrajectorySendClient", "serverName",
				ini.manipulatorTrajectorySendClient.serverName);
		parameter.getString("manipulatorTrajectorySendClient", "serviceName",
				ini.manipulatorTrajectorySendClient.serviceName);
		parameter.getString("openRaveEventClient", "serverName",
				ini.openRaveEventClient.serverName);
		parameter.getString("openRaveEventClient", "serviceName",
				ini.openRaveEventClient.serviceName);
		parameter.getString("openRaveParameterClient", "serverName",
				ini.openRaveParameterClient.serverName);
		parameter.getString("openRaveParameterClient", "serviceName",
				ini.openRaveParameterClient.serviceName);
		parameter.getString("openRaveStateClient", "serverName",
				ini.openRaveStateClient.serverName);
		parameter.getString("openRaveStateClient", "serviceName",
				ini.openRaveStateClient.serviceName);
		parameter.getString("openRaveTrajectorySendClient", "serverName",
				ini.openRaveTrajectorySendClient.serverName);
		parameter.getString("openRaveTrajectorySendClient", "serviceName",
				ini.openRaveTrajectorySendClient.serviceName);
		parameter.getString("recognitionEventClient", "serverName",
				ini.recognitionEventClient.serverName);
		parameter.getString("recognitionEventClient", "serviceName",
				ini.recognitionEventClient.serviceName);
		parameter.getString("recognitionParameterClient", "serverName",
				ini.recognitionParameterClient.serverName);
		parameter.getString("recognitionParameterClient", "serviceName",
				ini.recognitionParameterClient.serviceName);
		parameter.getString("recognitionPropertyQueryClient", "serverName",
				ini.recognitionPropertyQueryClient.serverName);
		parameter.getString("recognitionPropertyQueryClient", "serviceName",
				ini.recognitionPropertyQueryClient.serviceName);
		parameter.getString("recognitionStateClient", "serverName",
				ini.recognitionStateClient.serverName);
		parameter.getString("recognitionStateClient", "serviceName",
				ini.recognitionStateClient.serviceName);
		parameter.getTruthValue("connect_services", "continous_scan",
				ini.connect_services.continous_scan);
		parameter.getTruthValue("connect_services", "laser_connected",
				ini.connect_services.laser_connected);
		parameter.getTruthValue("connect_services", "manipulator_connected",
				ini.connect_services.manipulator_connected);
		parameter.getTruthValue("connect_services",
				"object_recognition_connected",
				ini.connect_services.object_recognition_connected);
		parameter.getTruthValue("connect_services", "openrave_connected",
				ini.connect_services.openrave_connected);
		parameter.getTruthValue("connect_services", "show_opengl_window",
				ini.connect_services.show_opengl_window);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (const CHS::ParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

