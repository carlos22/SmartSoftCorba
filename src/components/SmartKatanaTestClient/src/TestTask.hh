//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "SmartKatanaTestClient component".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------

#ifndef _TESTTASK_HH
#define _TESTTASK_HH

#include "gen/TestTaskCore.hh"
#include <CommManipulatorObjects/commManipulatorTrajectory.hh>

class TestTask: public TestTaskCore {

public:
	TestTask();
	int svc();

private:
	/**
	 * Move the Manipulator between two points.
	 */
	void move2Points();

	/**
	 * First perform a trajectory with the manipulator,
	 * which is afterwards repeated by the manipulator.
	 */
	void reproduceTrajectory();

	/**
	 * Allows the user two move the manipulator with his hands.
	 */
	void demonstration();

	/**
	 * Tests if the laser scanner works.
	 */
	void laserTest();

	/**
	 * Shows a 3d point cloud that was captured by the manipulator
	 * mounted laser scanner.
	 */
	void show3dPointCloud();

	/**
	 * Shows the laser scan of a laser ranger in real time.
	 */
	void showLaserScan();

	/**
	 * Captures a 3d point cloud and based on this cloud it performs
	 * the object recognition
	 */
	void recognizeObjects();

	void learnNewObject();

	void openRaveChangeState();
	void openRaveSave();
	void openRaveLoad();
	void openRaveDeleteObject();
	void openRaveAddObject();
	void openRaveMoveObject();
	void openRaveComputeGraspTable();
	void openRaveMoveBetweenTwoPoints();
	void openRaveTestSimulation();

	int stackMugs();

	bool stackMugs_WaitForOpenRave(CHS::EventId id);
	bool stackMugs_GraspObject(int objectId, CHS::EventId id);
	void stackMugs_iterateGraspPosition(double body_x, double body_y, double body_z, CommManipulatorObjects::CommManipulatorTrajectory &trajectory, CHS::EventId id);
	bool stackMugs_SetGrasping(CHS::EventId id, bool activate);
};

#endif
