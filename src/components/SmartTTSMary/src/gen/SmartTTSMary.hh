//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.4
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _SMARTTTSMARY_HH
#define _SMARTTTSMARY_HH

#include <iostream>
#include "smartSoft.hh"
#include "../SmartTTSMaryCore.hh"
// include communication objects
#include <CommBasicObjects/commPropertySet.hh>
#include <CommSpeechObjects/commSpeechOutputMessage.hh>
// include tasks	

#include "../SpeechTask.hh"
// include handler
#include "../CompHandler.hh"
#include "../QueryHandler.hh"
#include "../SendHandler.hh"

#define COMP SmartTTSMary::instance()

class SmartTTSMary: public SmartTTSMaryCore
{
private:
	static SmartTTSMary _smartTTSMary;

	// constructor
	SmartTTSMary();

	// copy-constructor
	SmartTTSMary(const SmartTTSMary& cc);

	// destructor
	~SmartTTSMary()
	{
	}
	;

	// load parameter from ini file
	void loadParameter(int argc, char *argv[]);

	// instantiate handler
	CompHandler compHandler;
	QueryHandler queryHandler;
	SendHandler sendHandler;

	// ThreadQueueHandler 


public:
	// component
	CHS::SmartComponent *component;

	// create mutex


	// create condition mutex


	// instantiate tasks

	SpeechTask speechTask;

	// ports
	CHS::QueryServer<CommSpeechObjects::CommSpeechOutputMessage,
			CommBasicObjects::CommPropertySet> *queryServer;
	CHS::SendServer<CommSpeechObjects::CommSpeechOutputMessage> *sendServer;

	void init(int argc, char *argv[]);
	void run();

	// return singleton instance
	static SmartTTSMary* instance()
	{
		return (SmartTTSMary*) &_smartTTSMary;
	}

	// ini parameter
	struct ini_ini
	{

		// component struct
		struct ini_component
		{
			// the name of the component
			std::string name;
		} component;

		struct ini_queryServer
		{
			std::string serviceName;
		} queryServer;

		struct ini_sendServer
		{
			std::string serviceName;
		} sendServer;

		struct ini_mary
		{

			std::string audioType;

			std::string audioplayer;

			std::string inputType;

			std::string maryServerHost;

			long maryServerPort;

			std::string outputType;

			std::string voiceType;
		} mary;
	} ini;

};
#endif
