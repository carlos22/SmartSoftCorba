//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "SmartTTSMary.hh"

// constructor
SmartTTSMary::SmartTTSMary()
{
	std::cout << "constructor of SmartTTSMary\n";

	ini.component.name = "SmartTTSMary";

	ini.queryServer.serviceName = "text2speech";
	ini.sendServer.serviceName = "text2speech";
	ini.mary.audioType = "WAVE";
	ini.mary.audioplayer = "aplay";
	ini.mary.inputType = "TEXT_EN";
	ini.mary.maryServerHost = "localhost";
	ini.mary.maryServerPort = 59125;
	ini.mary.outputType = "AUDIO";
	ini.mary.voiceType = "hmm-slt";
}

void SmartTTSMary::init(int argc, char *argv[])
{
	try
	{
		loadParameter(argc, argv);
		component = new CHS::SmartComponent(ini.component.name, argc, argv);

		std::cout << "Component SmartTTSMary is named " << ini.component.name
				<< "." << std::endl;

		// create ports
		queryServer = new CHS::QueryServer<
				CommSpeechObjects::CommSpeechOutputMessage,
				CommBasicObjects::CommPropertySet>(component,
				ini.queryServer.serviceName, queryHandler);

		sendServer = new CHS::SendServer<
				CommSpeechObjects::CommSpeechOutputMessage>(component,
				ini.sendServer.serviceName, sendHandler);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void SmartTTSMary::run()
{
	compHandler.onStartup();
	component->run();
	delete component;
}

void SmartTTSMary::loadParameter(int argc, char *argv[])
{
	/* 
	 Parameters can be specified via command line -filename=<filename>
	 
	 With this parameter present:
	 - The component will look for the file in the current working directory, 
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found
	 
	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc   
	 */
	CHS::SmartParameter parameter;

	// load parameters
	try
	{
		// check if paramfile is given as argument
		bool paramFile = false;
		std::string str;
		for (int i = 0; i < argc; i++)
		{
			str = argv[i];
			if (str.find("filename") != std::string::npos)
				paramFile = true;
		}

		// if paramfile is given as argument
		if (paramFile == true)
		{
			std::cout << "load parameter file from argv \n";
			parameter.addFile(argc, argv, "filename", false);
		}
		// else load standard paramfile
		else
		{
			std::cout << "load SmartTTSMary.ini parameter file\n";
			parameter.addFile("SmartTTSMary.ini");
		}

		// than add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLine("", argc, argv);

		// print all known parameters
		parameter.print(); // TODO remove this


		// load parameter
		parameter.getString("component", "name", ini.component.name);

		parameter.getString("queryServer", "serviceName",
				ini.queryServer.serviceName);
		parameter.getString("sendServer", "serviceName",
				ini.sendServer.serviceName);
		parameter.getString("mary", "audioType", ini.mary.audioType);
		parameter.getString("mary", "audioplayer", ini.mary.audioplayer);
		parameter.getString("mary", "inputType", ini.mary.inputType);
		parameter.getString("mary", "maryServerHost", ini.mary.maryServerHost);
		parameter.getInt("mary", "maryServerPort", ini.mary.maryServerPort);
		parameter.getString("mary", "outputType", ini.mary.outputType);
		parameter.getString("mary", "voiceType", ini.mary.voiceType);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (const CHS::ParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

