//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.8.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

#include "RobotTask.hh"
#include "gen/SmartLaserBaseEmpty.hh"

#include <iostream>

RobotTask::RobotTask()
{
	std::cout << "constructor RobotTask\n";
}

int RobotTask::svc()
{
	std::cout << "RobotTask::svc()" << std::endl;
	CommBasicObjects::CommMobileLaserScan scan;
	CommBasicObjects::CommNavigationVelocity vel;
	CHS::StatusCode status;

	while (1)
	{
		std::cout << "Hello from RobotTask!\n";

		// wait for scan (PushNewest)
		status = COMP->laserClient->getUpdateWait(scan);
		if (status != CHS::SMART_OK) {
			// error getting laser scan
			std::cout << "blocking wait  status " << CHS::StatusCodeConversion(status) << " not ok => retry ..." << std::endl;
		} else {
			// got laser scan
			std::cout << "got scan with " << scan.get_scan_size() << " beams" << std::endl;

		}

		// write commands to robot: move forward for one second and quit
		vel.set_v(300, 0.001);
		vel.set_omega(0.2);
		COMP->navVelSendClient->send(vel);
		std::cout << "send velocity = " << vel << std::endl;

		sleep(3);

		vel.set_v(0, 0.001);
		vel.set_omega(0);
		COMP->navVelSendClient->send(vel);
		std::cout << "send velocity = " << vel << std::endl;
		exit(0);


	}
	return 0;
}
