//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _SMARTLASERBASEEMPTY_HH
#define _SMARTLASERBASEEMPTY_HH

#include <iostream>
#include "smartSoft.hh"
#include "../SmartLaserBaseEmptyCore.hh"
// include communication objects
#include <CommBasicObjects/commMobileLaserScan.hh>

#include <CommBasicObjects/commNavigationVelocity.hh>

// include tasks	

#include "../RobotTask.hh"
#include "../RobotTask2.hh"
#include "../RobotTask3.hh"
#include "../RobotTask4.hh"
// include handler
#include "../CompHandler.hh"

#define COMP SmartLaserBaseEmpty::instance()

class SmartLaserBaseEmpty: public SmartLaserBaseEmptyCore
{
private:
	static SmartLaserBaseEmpty _smartLaserBaseEmpty;

	// constructor
	SmartLaserBaseEmpty();

	// copy-constructor
	SmartLaserBaseEmpty(const SmartLaserBaseEmpty& cc);

	// destructor
	~SmartLaserBaseEmpty()
	{
	}
	;

	// load parameter from ini file
	void loadParameter(int argc, char *argv[]);

	// instantiate handler
	CompHandler compHandler;

	// ThreadQueueHandler 

public:
	// component
	CHS::SmartComponent *component;

	// create mutex


	// create condition mutex


	// instantiate tasks

	RobotTask robotTask;
	RobotTask2 robotTask2;
	RobotTask3 robotTask3;
	RobotTask4 robotTask4;

	// ports
	CHS::PushNewestClient<CommBasicObjects::CommMobileLaserScan> *laserClient;
	CHS::SendClient<CommBasicObjects::CommNavigationVelocity> *navVelSendClient;

	void init(int argc, char *argv[]);
	void run();

	// return singleton instance
	static SmartLaserBaseEmpty* instance()
	{
		return (SmartLaserBaseEmpty*) &_smartLaserBaseEmpty;
	}

	// ini parameter
	struct ini_ini
	{

		// component struct
		struct ini_component
		{
			// the name of the component
			std::string name;
		} component;

		struct ini_laserClient
		{
			std::string serverName;
			std::string serviceName;
		} laserClient;

		struct ini_navVelSendClient
		{
			std::string serverName;
			std::string serviceName;
		} navVelSendClient;

	} ini;

};
#endif
