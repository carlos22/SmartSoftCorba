//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------
//  Copyright (C) 2010 Jonas Brich
//
//        brich@mail.hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "SmartOpenRave component".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//-------------------------------------------------------------------------

//#include <mrpt/core.h>

#include "DemonstrationTask.hh"
#include "gen/SmartOpenRave.hh"
#include "OpenRave.hh"
#include "ManipulatorFactory.hh"

#include <iostream>

DemonstrationTask::DemonstrationTask() {
}

int DemonstrationTask::svc() {
	OPENRAVE->syncManipulator();
	Smart::CommMobileManipulatorState manipulatorState;
	CHS::StatusCode status;

	SpecificManipulator::Manipulator* specificManipulator = NULL;
	try {
		specificManipulator = MANIPULATORFACTORY->createManipulatorClass(COMP->ini.OpenRave.robotName);
	} catch (std::exception& e) {
		return -1;
	}
	while (1) {
		COMP->stateServer->acquire("demonstration");
		status = COMP->manipulatorStatePushTimedClient->getUpdateWait(manipulatorState);
		while (status != CHS::SMART_OK) {
			ErrorHandler::handleMessage("Timed update of ManipulatorState could not be get. [svc in DemonstrationTask]",
					ErrorHandler::WARNING);
		}

		/**
		 * TODO: Test only
		 *//*
		std::cout << "-------------------------------------------------------------------.\n";
		double x = 0;
		double y = 0;
		double z = 0;
		double azimuth = 0;
		double elevation = 0;
		double roll = 0;
		manipulatorState.get_manipulator_state().get_pose_TCP_robot(x, y, z, azimuth, elevation, roll);
		std::cout << "TCP Robot ZXY (CommObj): " << x << ", " << y << ", " << z << ", " << azimuth << ", " << elevation << ", "
				<< roll << std::endl;
		double zxz_azimuth = 0;
		double zxz_elevation = 0;
		double zxz_roll = 0;
		EulerTransformationMatrices::zyx_to_zxz_angles(azimuth, elevation, roll, zxz_azimuth, zxz_elevation, zxz_roll);
		std::cout << "TCP Robot ZXZ (CommObj): " << x << ", " << y << ", " << z << ", " << zxz_azimuth << ", " << zxz_elevation
				<< ", " << zxz_roll << std::endl;

		arma::mat zyx_matrix(4, 4);
		arma::mat zxz_matrix(4, 4);
		EulerTransformationMatrices::create_zxz_matrix(x, y, z, azimuth, elevation, roll, zyx_matrix);
		EulerTransformationMatrices::create_zxz_matrix(x, y, z, zxz_azimuth, zxz_elevation, zxz_roll, zxz_matrix);
		zyx_matrix.print(std::cout, "TCP Matrix Robot ZXY (CommObj): ");
		zxz_matrix.print(std::cout, "TCP Matrix Robot ZXZ (CommObj): ");

		mrpt::math::CPose3D commPose;
		commPose.setFromValues(x, y, z, azimuth, elevation, roll);

		std::cout << "TCP Matrix MRPT Pose ZXY (CommObj): " << commPose << std::endl;

		TransformMatrix transform;
		OPENRAVE->getRobotTransform(transform);
		std::cout << "TCP Matrix Robot OpenRave (OpenRave): " << transform << std::endl;
		double matrix[16];

		for (int i = 1; i < 12; ++i) {
			if (i % 4 == 0)
				continue;
			matrix[i - 1] = transform.m[i - 1];
		}
		matrix[3] = transform.trans.x;
		matrix[7] = transform.trans.y;
		matrix[11] = transform.trans.z;
		matrix[15] = transform.trans.w;

		mrpt::math::CMatrixDouble tmp(4, 4, matrix);
		mrpt::math::CPose3D ravePose(tmp);
		std::cout << "TCP Matrix MRPT Pose (OpenRave): " << ravePose << std::endl;

		x = 0;
		y = 0;
		z = 0;
		azimuth = 0;
		elevation = 0;
		roll = 0;

		x = ravePose.x();
		y = ravePose.y();
		z = ravePose.z();
		ravePose.getYawPitchRoll(azimuth, elevation, roll);
		std::cout << "TCP Robot (OpenRave): " << x << ", " << y << ", " << z << ", " << azimuth << ", " << elevation << ", "
				<< roll << std::endl;
*/		/*
		 * Test end
		 */

		std::vector<dReal> manipulatorAngles;
		// Get all Angles from the real Manipulator
		for (u_int32_t i = 0; i < manipulatorState.get_manipulator_state().get_joint_count(); ++i) {
			manipulatorAngles.push_back(manipulatorState.get_manipulator_state().get_joint_angle(i));
		}
		manipulatorAngles.push_back(manipulatorState.get_manipulator_state().get_gripper_angle());

		// Make conversion from robot arm joint angles to OpenRave joint angles
		if (specificManipulator->convertRealAnglesToOpenRaveAngles(manipulatorAngles, manipulatorAngles)) {
			// Move the robot arm in OpenRave to the same position of real robot arm
			try {
				OPENRAVE->moveManipulatorToPosition(manipulatorAngles, true);
			} catch (openrave_exception& e) {
				ErrorHandler::handleMessage(e.message(), ErrorHandler::ERROR);
			}
		}
		COMP->stateServer->release("demonstration");
	}
	return 0;
}
