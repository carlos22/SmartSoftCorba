//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------
//  Copyright (C) 2010 Jonas Brich
//
//        brich@mail.hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "SmartOpenRave component".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//-------------------------------------------------------------------------

#include "DemonstrationTask.hh"
#include "gen/SmartOpenRave.hh"
#include "OpenRave.hh"
#include "ManipulatorFactory.hh"

#include <iostream>

DemonstrationTask::DemonstrationTask() {
}

int DemonstrationTask::svc() {
	OPENRAVE->syncManipulator();
	CommManipulatorObjects::CommMobileManipulatorState manipulatorState;
	CHS::StatusCode status;

	SpecificManipulator::Manipulator* specificManipulator = NULL;
	try {
		specificManipulator = MANIPULATORFACTORY->createManipulatorClass(COMP->ini.OpenRave.robotName);
	} catch (std::exception& e) {
		return -1;
	}
	while (1) {
		COMP->stateServer->acquire("demonstration");
		COMP->stateServer->release("demonstration");
		if (!COMP->ini.PortParameter.withManipulator) {
			ErrorHandler::handleMessage(
					"No real manipulator is attached. Demonstration Modus not possible. [svc in DemonstrationTask]",
					ErrorHandler::INFO);
			continue;
		}
		status = COMP->manipulatorStatePushTimedClient->getUpdateWait(manipulatorState);
		if (status != CHS::SMART_OK) {
			ErrorHandler::handleMessage("Timed update of ManipulatorState could not be get. [svc in DemonstrationTask]",
					ErrorHandler::WARNING);
		}
		std::vector<dReal> manipulatorAngles;
		// Get all Angles from the real Manipulator
		for (u_int32_t i = 0; i < manipulatorState.get_manipulator_state().get_joint_count(); ++i) {
			manipulatorAngles.push_back(manipulatorState.get_manipulator_state().get_joint_angle(i));
		}
		manipulatorAngles.push_back(manipulatorState.get_manipulator_state().get_gripper_angle());

		// Make conversion from robot arm joint angles to OpenRave joint angles
		if (specificManipulator->convertRealAnglesToOpenRaveAngles(manipulatorAngles, manipulatorAngles)) {
			// Move the robot arm in OpenRave to the same position of real robot arm
			try {
				OPENRAVE->moveManipulatorToPosition(manipulatorAngles, true);
			} catch (openrave_exception& e) {
				ErrorHandler::handleMessage(e.message(), ErrorHandler::ERROR);
			}
		}

	}
	return 0;
}
