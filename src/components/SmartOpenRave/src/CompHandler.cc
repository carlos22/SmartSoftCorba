//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------
//  Copyright (C) 2010 Jonas Brich
//
//        brich@mail.hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "SmartOpenRave component".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//-------------------------------------------------------------------------

#include "CompHandler.hh"
#include "gen/SmartOpenRave.hh"

#include <iostream>

// include communication objects
#include <CommManipulationPlannerObjects/commManipulationPlannerEventParameter.hh>
#include <CommManipulationPlannerObjects/commManipulationPlannerEventResult.hh>
#include <CommManipulationPlannerObjects/commManipulationPlannerEventState.hh>
#include <CommManipulationPlannerObjects/commManipulationPlannerParameter.hh>
#include <CommManipulationPlannerObjects/commManipulationTaskPlanning.hh>

#include <CommManipulatorObjects/commManipulatorEventParameter.hh>
#include <CommManipulatorObjects/commManipulatorEventResult.hh>
#include <CommManipulatorObjects/commManipulatorTrajectory.hh>
#include <CommManipulatorObjects/commMobileManipulatorState.hh>

#include <CommObjectRecognitionObjects/commObjectRecognitionEnvironment.hh>
#include <CommObjectRecognitionObjects/commObjectRecognitionId.hh>
#include <CommObjectRecognitionObjects/commObjectRecognitionObjectProperties.hh>

#include "OpenRave.hh"

void CompHandler::onStartup() {
	CHS::StatusCode status;

	/*
	 * Connect only if manipulator flag is set in ini file.
	 */
	if (COMP->ini.PortParameter.withManipulator) {
		std::cout << "connecting to: " << COMP->ini.trajectorySendClient.serverName << "; "
				<< COMP->ini.trajectorySendClient.serviceName << std::endl;
		status = COMP->trajectorySendClient->connect(COMP->ini.trajectorySendClient.serverName,
				COMP->ini.trajectorySendClient.serviceName);
		while (status != CHS::SMART_OK) {
			usleep(500000);
			status = COMP->trajectorySendClient->connect(COMP->ini.trajectorySendClient.serverName,
					COMP->ini.trajectorySendClient.serviceName);
		}
		std::cout << "connected.\n";

		std::cout << "connecting to: " << COMP->ini.manipulatorStatePushTimedClient.serverName << "; "
				<< COMP->ini.manipulatorStatePushTimedClient.serviceName << std::endl;
		status = COMP->manipulatorStatePushTimedClient->connect(COMP->ini.manipulatorStatePushTimedClient.serverName,
				COMP->ini.manipulatorStatePushTimedClient.serviceName);
		while (status != CHS::SMART_OK) {
			usleep(500000);
			status = COMP->manipulatorStatePushTimedClient->connect(COMP->ini.manipulatorStatePushTimedClient.serverName,
					COMP->ini.manipulatorStatePushTimedClient.serviceName);
		}
		std::cout << "connected.\n";

		COMP->manipulatorStatePushTimedClient->subscribe(COMP->ini.manipulatorStatePushTimedClient.interval);

		std::cout << "connecting to: " << COMP->ini.manipulatorEventClient.serverName << "; "
				<< COMP->ini.manipulatorEventClient.serviceName << std::endl;
		status = COMP->manipulatorEventClient->connect(COMP->ini.manipulatorEventClient.serverName,
				COMP->ini.manipulatorEventClient.serviceName);
		while (status != CHS::SMART_OK) {
			usleep(500000);
			status = COMP->manipulatorEventClient->connect(COMP->ini.manipulatorEventClient.serverName,
					COMP->ini.manipulatorEventClient.serviceName);
		}
		std::cout << "connected.\n";
	}

	/*
	 * Connect only if object recognition flag is set in ini file.
	 */
	if (COMP->ini.PortParameter.withObjectRecognition) {
		std::cout << "connecting to: " << COMP->ini.objectQueryClient.serverName << "; "
				<< COMP->ini.objectQueryClient.serviceName << std::endl;
		status
				= COMP->objectQueryClient->connect(COMP->ini.objectQueryClient.serverName,
						COMP->ini.objectQueryClient.serviceName);
		while (status != CHS::SMART_OK) {
			usleep(500000);
			status = COMP->objectQueryClient->connect(COMP->ini.objectQueryClient.serverName,
					COMP->ini.objectQueryClient.serviceName);
		}
		std::cout << "connected.\n";

		std::cout << "connecting to: " << COMP->ini.environmentQueryClient.serverName << "; "
				<< COMP->ini.environmentQueryClient.serviceName << std::endl;
		status = COMP->environmentQueryClient->connect(COMP->ini.environmentQueryClient.serverName,
				COMP->ini.environmentQueryClient.serviceName);
		while (status != CHS::SMART_OK) {
			usleep(500000);
			status = COMP->environmentQueryClient->connect(COMP->ini.environmentQueryClient.serverName,
					COMP->ini.environmentQueryClient.serviceName);
		}
		std::cout << "connected.\n";
	}

	// activate state server
	if (COMP->stateServer->activate() != CHS::SMART_OK) {
		ErrorHandler::handleMessage("activate state server.", ErrorHandler::ERROR);
	}

	try {
		// Initialize OpenRave
		OPENRAVE->init();
	} catch (openrave_exception& e) {
		ErrorHandler::handleMessage(e.message(), ErrorHandler::ERROR);
		return;
	}

	// Run demonstration task
	COMP->demonstrationTask.open();
	COMP->parameterTask.open();

	// Activate OpenRave GUI only if flag is set in ini file.
	if (COMP->ini.OpenRave.gui_active) {
		COMP->gUITask.open();
	}
}
