//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------
//  Copyright (C) 2010 Jonas Brich
//
//        brich@mail.hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "SmartOpenRave component".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//------------------------------------------------------------------------

#include "ParameterServerHandler.hh"
#include "gen/SmartOpenRave.hh"
#include <CommManipulationPlannerObjects/commManipulationPlannerParameter.hh>
#include "OpenRave.hh"

void ParameterServerHandler::handleSend(const CommManipulationPlannerObjects::CommManipulationPlannerParameter &r) throw() {
	// Only accept parameters when in demonstration or neutral mode
	if (!(COMP->stateServer->tryAcquire("nonneutral") == CHS::SMART_OK))
	{
		COMP->parameterTask.pushParam(r);
		CommManipulationPlannerObjects::ManipulationPlannerParameterMode tag;
		int id = 0;
		double x = 0;
		double y = 0;
		double z = 0;
		double w = 0;
		double lowerAngle = 0;
		double upperAngle = 0;
		double lowerRoll = 0;
		double upperRoll = 0;
		std::string type;

		r.get(tag, id, x, y, z, w, lowerAngle, upperAngle, type, lowerRoll, upperRoll);

		std::cout << "PARAMETER pushed " << tag.get_string() << std::endl;
	} else {
		ErrorHandler::handleMessage("######## Component in nonneutral state. Parameter ignored! #########", ErrorHandler::INFO, COMP->ini.OpenRave.debugOpenRave);
	}
	COMP->stateServer->release("nonneutral");
	ErrorHandler::handleMessage("ParameterHandler finished.", ErrorHandler::INFO, COMP->ini.OpenRave.debugOpenRave);
}
