//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.4
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2011 Andreas Steck, Matthias Lutz
//
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Mapper/GridMapper component".
//  It provides mapping services based on grid maps. The current map
//  represents the latest snapshot of the local surrounding based on
//  laserscans. The current map can be preoccupied by the longterm map.
//  The longterm map is a simple occupancy grid map.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------





#include "ObjectQueryHandler.hh"
#include "gen/SmartOpenRave.hh"
#include "OpenRave.hh"

#include <iostream>

void ObjectQueryHandler::handleQuery(
		CHS::QueryServer<
				CommObjectRecognitionObjects::CommObjectRecognitionId,
				CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties> & server,
		const CHS::QueryId id,
		const CommObjectRecognitionObjects::CommObjectRecognitionId & request) throw ()
{
	CommObjectRecognitionObjects::CommObjectRecognitionObjectProperties answer;
	TransformMatrix transform;
	CommBasicObjects::CommPose3d pose;

	COMP->parameterTask.waitQueueEmpty();

	if(OPENRAVE->getPositonOfKinbody(request.get_id(),transform))
	{
		answer.set_id(request.get_id());
		answer.set_type("UNKOWN");

		pose.set_x(transform.trans.x, 1);
		pose.set_y(transform.trans.y, 1);
		pose.set_z(transform.trans.z, 1);
		pose.set_azimuth(0);
		pose.set_elevation(0);
		pose.set_roll(0);
		answer.set_pose(pose);

		answer.set_dimension(0, 0, 1);

		answer.set_valid(true);
	}else{
		answer.set_valid(false);
	}

	server.answer(id, answer);
}
