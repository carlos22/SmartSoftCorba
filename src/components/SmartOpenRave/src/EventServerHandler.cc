//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------
//  Copyright (C) 2010 Jonas Brich
//
//        brich@mail.hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "SmartOpenRave component".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//------------------------------------------------------------------------

#include "EventServerHandler.hh"
#include "gen/SmartOpenRave.hh"

#include <iostream>

bool EventServerHandler::testEvent(Smart::CommManipulationPlannerEventParameter &p, Smart::CommManipulationPlannerEventResult &r,
		const Smart::CommManipulationPlannerEventState &s) throw() {
	bool result = false;

	Smart::ManipulationPlannerEvent oldState, newState;

	oldState = p.get_event();
	newState = s.get_event();

	if (oldState == newState) {
		// no state change -> no event
		result = false;
	} else {
		// memorize new state (state change) for currently tested event
		// each activated event has its own parameter
		p.set_event(newState);
		// set result
		r.set_event(newState);
		result = true;
	}

	// true --> send event
	// false --> don't send event
	return result;
}
