//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _SMARTSTTDUMMY_HH
#define _SMARTSTTDUMMY_HH

#include <iostream>
#include "smartSoft.hh"
#include "../SmartSTTDummyCore.hh"
// include communication objects
#include <CommSpeechObjects/commSpeechInputEventParameter.hh>

#include <CommSpeechObjects/commSpeechInputEventResult.hh>

#include <CommSpeechObjects/commSpeechInputParameter.hh>

#include <CommSpeechObjects/speechInputEventState.hh>

// include tasks	

#include "../SpeechInputTask.hh"
// include handler
#include "../CompHandler.hh"
#include "../EventTestHandler.hh"
#include "../ParameterHandler.hh"
#include "../StateHandler.hh"

#define COMP SmartSTTDummy::instance()

class SmartSTTDummy: public SmartSTTDummyCore
{
private:
	static SmartSTTDummy _smartSTTDummy;

	// constructor
	SmartSTTDummy();

	// copy-constructor
	SmartSTTDummy(const SmartSTTDummy& cc);

	// destructor
	~SmartSTTDummy()
	{
	}
	;

	// load parameter from ini file
	void loadParameter(int argc, char *argv[]);

	// instantiate handler
	CompHandler compHandler;
	EventTestHandler eventTestHandler;
	ParameterHandler parameterHandler;
	StateHandler stateHandler;

	// ThreadQueueHandler 


public:
	// component
	CHS::SmartComponent *component;

	// create mutex


	// create condition mutex


	// instantiate tasks

	SpeechInputTask speechInputTask;

	// ports
	CHS::EventServer<CommSpeechObjects::CommSpeechInputEventParameter,
			CommSpeechObjects::CommSpeechInputEventResult,
			CommSpeechObjects::SpeechInputEventState> *eventServer;
	CHS::SendServer<CommSpeechObjects::CommSpeechInputParameter>
			*parameterServer;
	CHS::SmartStateServer *stateServer;

	void init(int argc, char *argv[]);
	void run();

	// return singleton instance
	static SmartSTTDummy* instance()
	{
		return (SmartSTTDummy*) &_smartSTTDummy;
	}

	// ini parameter
	struct ini_ini
	{

		// component struct
		struct ini_component
		{
			// the name of the component
			std::string name;
		} component;

		struct ini_eventServer
		{
			std::string serviceName;
		} eventServer;

		struct ini_parameterServer
		{
			std::string serviceName;
		} parameterServer;

		struct ini_stateServer
		{
			std::string serviceName;
		} stateServer;

		struct ini_Settings
		{

			std::string grammar_file;
		} Settings;
	} ini;

};
#endif
