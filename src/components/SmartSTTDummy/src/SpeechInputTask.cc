//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2010 Andreas Steck
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft STT Dummy component".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------



#include "SpeechInputTask.hh"
#include "gen/SmartSTTDummy.hh"

#include <iostream>

SpeechInputTask::SpeechInputTask()
{
	std::cout << "constructor SpeechInputTask\n";
}

double SpeechInputTask::parseDouble(const std::string& str) {
	std::istringstream is(str);
	double value;
	is >> value;

	return value;
}

void SpeechInputTask::printList() {
	for (size_t i = 0; i < inputVector.size(); ++i) {
		std::cout << " " << i << ": " << inputVector[i].semantic << " -- \""
				<< inputVector[i].text << "\"" << std::endl;
	}
}

void SpeechInputTask::readFile(std::string file) {
	std::string line;
	int begin = 0;
	int end = 0;

	inputVector.clear();
	std::ifstream myfile(file.c_str());

	if (myfile.is_open()) {
		while (!myfile.eof()) {
			SpeechInput input;
			begin = 0;
			end = 0;

			getline(myfile, line);
			if (line.size() > 0) {
				end = line.find(';', begin);
				input.semantic = line.substr(begin, end - begin);

				begin = end + 1;
				end = line.find(';', begin);
				input.confidence = parseDouble(line.substr(begin, end - begin));

				begin = end + 1;
				end = line.find(';', begin);
				input.text = line.substr(begin, end - begin);

				begin = end + 1;
				end = line.find(';', begin);
				input.topic = line.substr(begin, end - begin);

				inputVector.push_back(input);
			}
		}
	}
}

int SpeechInputTask::svc()
{
    CommSpeechObjects::SpeechInputEventState speechInputEventState;
    int mainMenuItem;

    std::cout << "------------------------------------------------------------------------\n";
    std::cout << "| smartSpeechRecognitionDummyServer                                    |\n";

    while (1)
    {
      std::cout << "------------------------------------------------------------------------\n";
      std::cout << "Main Menu:\n";

	  readFile(COMP->ini.Settings.grammar_file);
      printList();

      std::cout << "\nplease choose number:  ";
      cin >> mainMenuItem;

	  if (mainMenuItem < inputVector.size()) {
          	speechInputEventState.set_semantic(inputVector[mainMenuItem].semantic);
          	speechInputEventState.set_confidence(inputVector[mainMenuItem].confidence);
          	speechInputEventState.set_text(inputVector[mainMenuItem].text);
          	speechInputEventState.set_topic(inputVector[mainMenuItem].topic);

      		std::cout << "send...\n";
      		CHS::StatusCode status = COMP->eventServer->put(speechInputEventState);
      		if(status != CHS::SMART_OK)
      			cout << "ERROR IN COMMUNICATION! " << CHS::StatusCodeConversion(status) << std::endl;
      	}
    }

    return 0;

}
