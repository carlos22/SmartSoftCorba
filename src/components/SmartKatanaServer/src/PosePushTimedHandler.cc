//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//
//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "SmartKatana component".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------


#include "PosePushTimedHandler.hh"
#include "gen/SmartKatanaServer.hh"

#include <iostream>

#include "Katana.hh"

PosePushTimedHandler::PosePushTimedHandler() {
	CommBasicObjects::CommBasePosition default_base_position;
	default_base_position.set_x(COMP->ini.base.x);
	default_base_position.set_y(COMP->ini.base.y);
	default_base_position.set_z(COMP->ini.base.z);
	default_base_position.set_base_alpha(COMP->ini.base.base_a);
	default_base_position.set_steer_alpha(COMP->ini.base.steer_a);
	default_base_position.set_turret_alpha(COMP->ini.base.turret_a);

	CommBasicObjects::CommBaseVelocity zero_velocity;
	zero_velocity.set_v(0);
	zero_velocity.set_omega_base(0);
	zero_velocity.set_omega_steer(0);
	zero_velocity.set_omega_turret(0);

	default_baseState.set_base_position(default_base_position);
	default_baseState.set_base_velocity(zero_velocity);
}

void PosePushTimedHandler::handlePushTimer(CHS::PushTimedServer<
		CommManipulatorObjects::CommMobileManipulatorState> & server) throw() {

	// only push state when component is activated
	COMP->stateServer->acquire("nonneutral");

	CommManipulatorObjects::CommManipulatorState state;
	CommManipulatorObjects::CommMobileManipulatorState mobileState;

	// get current state from Katana
	KATANA->getCurrentState(state);
	mobileState.set_manipulator_state(state);

	// if baseServer is activated in the ini file get the baseState
	if (COMP->ini.base.on_base) {
		CHS::StatusCode status;
		CommBasicObjects::CommBaseState baseState;
		status = COMP->basePushTimedClient->getUpdate(baseState);

		if (status == CHS::SMART_OK) {
			mobileState.set_base_state(baseState);
		} else {
			mobileState.set_base_state(default_baseState);
			mobileState.set_valid(false);
		}
	} else {
		mobileState.set_base_state(default_baseState);
	}

	server.put(mobileState);

	// only push state when component is activated
	COMP->stateServer->release("nonneutral");
}
