//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.4
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------


// --------------------------------------------------------------------------
//
//  Copyright (C) 2011 Andreas Steck, Matthias Lutz
//
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Mapper/GridMapper component".
//  It provides mapping services based on grid maps. The current map
//  represents the latest snapshot of the local surrounding based on
//  laserscans. The current map can be preoccupied by the longterm map.
//  The longterm map is a simple occupancy grid map.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#include "PoseQueryHandler.hh"
#include "gen/SmartKatanaServer.hh"

#include <iostream>

#include "Katana.hh"

PoseQueryHandler::PoseQueryHandler() {
	CommBasicObjects::CommBasePosition default_base_position;
	default_base_position.set_x(COMP->ini.base.x);
	default_base_position.set_y(COMP->ini.base.y);
	default_base_position.set_z(COMP->ini.base.z);
	default_base_position.set_base_alpha(COMP->ini.base.base_a);
	default_base_position.set_steer_alpha(COMP->ini.base.steer_a);
	default_base_position.set_turret_alpha(COMP->ini.base.turret_a);

	CommBasicObjects::CommBaseVelocity zero_velocity;
	zero_velocity.set_v(0);
	zero_velocity.set_omega_base(0);
	zero_velocity.set_omega_steer(0);
	zero_velocity.set_omega_turret(0);

	default_baseState.set_base_position(default_base_position);
	default_baseState.set_base_velocity(zero_velocity);
}

void PoseQueryHandler::handleQuery(CHS::QueryServer<CommBasicObjects::CommVoid,
		CommManipulatorObjects::CommMobileManipulatorState> & server,
		const CHS::QueryId id, const CommBasicObjects::CommVoid & request) throw ()
{

	CHS::StatusCode status;
	CommManipulatorObjects::CommMobileManipulatorState answer;
	CommManipulatorObjects::CommManipulatorState state;


	if (COMP->ini.katana.verbose)
	{
		std::cout << "Query Request received.." << std::endl;
	}


	// get current state from Katana
	//TODO brauchen wir hier einen LOCK ????
	//-->jetzt nicht mehr
	KATANA->getCurrentState(state,true);
	answer.set_manipulator_state(state);
	answer.set_valid(true);

	// if baseServer is activated in the ini file get the baseState
	if (COMP->ini.base.on_base) {
		CHS::StatusCode status;
		CommBasicObjects::CommBaseState baseState;
		status = COMP->basePushTimedClient->getUpdate(baseState);

		if (status == CHS::SMART_OK) {
			answer.set_base_state(baseState);
		} else {
			std::cout<<"Error getting base state: "<<CHS::StatusCodeConversion(status)<<std::endl;
			answer.set_base_state(default_baseState);
			//answer.set_valid(false);
			//TODO Hack due to comm failure
			answer.set_valid(true);
		}
	} else {
		answer.set_base_state(default_baseState);
	}


	//answer.set(result);
	if (COMP->ini.katana.verbose && answer.get_manipulator_state().is_valid())
	{
		if(answer.is_valid() && answer.get_manipulator_state().is_valid()){
			std::cout << "Query Request send valid.."<< std::endl;
		}
		else{
			std::cout << "Query Request send NOT valid.."<< std::endl;
		}
	}
	server.answer(id, answer);
}
