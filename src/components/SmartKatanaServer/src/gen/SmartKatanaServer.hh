//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _SMARTKATANASERVER_HH
#define _SMARTKATANASERVER_HH

#include <iostream>
#include "smartSoft.hh"
#include "../SmartKatanaServerCore.hh"
// include communication objects
#include "externalCommObjectHeaders.hh"
#include <comm3dPointCloud.hh>

#include <commManipulatorEventParameter.hh>

#include <commManipulatorEventResult.hh>

#include <commManipulatorId.hh>

#include <commManipulatorParameter.hh>

#include <commManipulatorRequestScan3d.hh>

#include <commManipulatorTrajectory.hh>

#include <commMobileManipulatorState.hh>

#include <manipulatorEventState.hh>

#include <scanEventState.hh>

// include tasks	

// include handler
#include "../CompHandler.hh"
#include "../RequestScan3dHandler.hh"
#include "../ParamHandler.hh"
#include "../TrajectorySendHandler.hh"
#include "../StateChangeHandler.hh"
#include "../Scan3dHandler.hh"
#include "../PosePushTimedHandler.hh"
#include "../ScanEventTestHandler.hh"
#include "../EventTestHandler.hh"

#define COMP SmartKatanaServer::instance()

class SmartKatanaServer: public SmartKatanaServerCore
{
private:
	static SmartKatanaServer _smartKatanaServer;

	// constructor
	SmartKatanaServer();

	// copy-constructor
	SmartKatanaServer(const SmartKatanaServer& cc);

	// destructor
	~SmartKatanaServer()
	{
	}
	;

	// load parameter from ini file
	void loadParameter(int argc, char *argv[]);

	// instantiate handler
	CompHandler compHandler;
	RequestScan3dHandler requestScan3dHandler;
	ParamHandler paramHandler;
	TrajectorySendHandler trajectorySendHandler;
	StateChangeHandler stateChangeHandler;
	Scan3dHandler scan3dHandler;
	PosePushTimedHandler posePushTimedHandler;
	ScanEventTestHandler scanEventTestHandler;
	EventTestHandler eventTestHandler;

	// ThreadQueueHandler 
	CHS::ThreadQueueSendHandler<Smart::CommManipulatorTrajectory>
			*threadTrajectorySendHandler;

	CHS::ThreadQueueSendHandler<Smart::CommManipulatorRequestScan3d>
			*threadRequestScan3dHandler;

	CHS::ThreadQueueQueryHandler<Smart::CommManipulatorId,
			Smart::Comm3dPointCloud> *threadScan3dHandler;

public:
	// component
	CHS::SmartComponent *component;

	// create mutex
	CHS::SmartMutex ParameterMutex;
	CHS::SmartMutex EncoderMutex;
	CHS::SmartMutex KatanaMutex;
	CHS::SmartMutex PointCloudMutex;

	// create condition mutex


	// instantiate tasks


	// ports
	CHS::EventServer<Smart::CommVoid, Smart::CommManipulatorId,
			Smart::ScanEventState> *scan3dEventServer;
	CHS::SendServer<Smart::CommManipulatorTrajectory> *trajectorySendServer;
	CHS::SendServer<Smart::CommManipulatorRequestScan3d>
			*requestScan3dSendServer;
	CHS::PushTimedClient<Smart::CommBaseState> *basePushTimedClient;
	CHS::SmartStateServer *stateServer;
	CHS::QueryServer<Smart::CommManipulatorId, Smart::Comm3dPointCloud>
			*scan3dQueryServer;
	CHS::EventServer<Smart::CommManipulatorEventParameter,
			Smart::CommManipulatorEventResult, Smart::ManipulatorEventState>
			*eventServer;
	CHS::QueryClient<Smart::CommVoid, Smart::CommMobileLaserScan>
			*laserQueryClient;
	CHS::SmartStateClient *laserStateClient;
	CHS::SendServer<Smart::CommManipulatorParameter> *paramServer;
	CHS::PushTimedServer<Smart::CommMobileManipulatorState>
			*posePushTimedServer;

	void init(int argc, char *argv[]);
	void run();

	// return singleton instance
	static SmartKatanaServer* instance()
	{
		return (SmartKatanaServer*) &_smartKatanaServer;
	}

	// ini parameter
	struct ini_ini
	{

		struct ini_eventServer
		{
			std::string serviceName;
		} eventServer;

		struct ini_paramServer
		{
			std::string serviceName;
		} paramServer;

		struct ini_posePushTimedServer
		{
			std::string serviceName;
			double cycle;
		} posePushTimedServer;

		struct ini_requestScan3dSendServer
		{
			std::string serviceName;
		} requestScan3dSendServer;

		struct ini_scan3dEventServer
		{
			std::string serviceName;
		} scan3dEventServer;

		struct ini_scan3dQueryServer
		{
			std::string serviceName;
		} scan3dQueryServer;

		struct ini_stateServer
		{
			std::string serviceName;
		} stateServer;

		struct ini_trajectorySendServer
		{
			std::string serviceName;
		} trajectorySendServer;

		struct ini_basePushTimedClient
		{
			std::string serverName;
			std::string serviceName;
			long interval;
		} basePushTimedClient;

		struct ini_laserQueryClient
		{
			std::string serverName;
			std::string serviceName;
		} laserQueryClient;

		struct ini_laserStateClient
		{
			std::string serverName;
			std::string serviceName;
		} laserStateClient;

		struct ini_base
		{
			double base_a;
			bool on_base;
			double steer_a;
			double turret_a;
			long x;
			long y;
			long z;
		} base;
		struct ini_katana
		{
			double azimuth;
			double elevation;
			bool fast_calibration;
			double goal_angle_approach;
			double goal_position_approach;
			std::string katana_config_file;
			std::string katana_device;
			double roll;
			bool verbose;
			long x;
			long y;
			long z;
		} katana;
		struct ini_laser
		{
			double azimuth;
			double elevation;
			bool high_precision;
			bool laser_is_mounted;
			double roll;
			long x;
			long y;
			long z;
		} laser;
		struct ini_network
		{
			std::string ip_adress;
			unsigned long port;
		} network;
		struct ini_serial_port
		{
			std::string device;
		} serial_port;
	} ini;

};
#endif
