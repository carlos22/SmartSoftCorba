//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2003 Boris Kluge
//
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this program; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//
// --------------------------------------------------------------------------





#include "SpeechTask.hh"
#include "gen/SmartTTS.hh"

#include <iostream>

#include <CommBasicObjects/commTimeStamp.hh>

SpeechTask::SpeechTask()
{
	std::cout << "constructor SpeechTask\n";
}

int SpeechTask::svc()
{
    while(true)
    {
      // wait for queue entry
      COMP->_queue_sem.acquire();

      // pop queue entry
      COMP->_queue_mutex.acquire();
      SmartTTS::QueueEntry entry = COMP->_queue.front();
      COMP->_queue.pop_front();
      COMP->_queue_mutex.release();

      // process queue entry:

      CommBasicObjects::CommPropertySet answer;

      // check time stamp
      if(entry.msg.get_discard_time().is_before(CommBasicObjects::CommTimeStamp::now()))
      {
        answer.set("success",false);
        answer.set("discarded",true);
      }
      else
      {
        // open pipe to text2speech program
        FILE *text2speech_pipe = ::popen(COMP->ini.text2speech.player.c_str(), "w");
        if(text2speech_pipe)
        {
          ::fprintf(text2speech_pipe, "%s\n", entry.msg.get_message().c_str());
          if(::pclose(text2speech_pipe)<0)
          {
            answer.set("success",false);
            answer.set("discarded",false);
            answer.set("error",std::string("Failed to close \"") + COMP->ini.text2speech.player + "\"");
          }
          else
          {
            answer.set("success",true);
            answer.set("discarded",false);
          }
        }
        else
        {
          // pipe open failed
          answer.set("success",false);
          answer.set("discarded",false);
          answer.set("error",std::string("Failed to open \"") + COMP->ini.text2speech.player + "\"");
        }
      }

      // answer query, unless request was plain "send"
      if(entry.query_server)
      {
        entry.query_server->answer(entry.id, answer);
      }
    }

	return 0;
}
