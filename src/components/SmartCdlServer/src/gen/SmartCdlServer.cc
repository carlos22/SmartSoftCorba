//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "SmartCdlServer.hh"

// constructor
SmartCdlServer::SmartCdlServer() :
	CdlTrigger(CdlTriggerLock)
{
	std::cout << "constructor of SmartCdlServer\n";

	ini.component.name = "SmartCdlServer";

	ini.goalEventServer.serviceName = "goalEvent";
	ini.navVelSendServer.serviceName = "navVel";
	ini.paramServer.serviceName = "param";
	ini.stateServer.serviceName = "state";
	ini.laserClient.serverName = "SmartLaserLMS200Server";
	ini.laserClient.serviceName = "scan";
	ini.navVelSendClient.serverName = "SmartPioneerBaseServer";
	ini.navVelSendClient.serviceName = "navigationvelocity";
	ini.plannerClient.serverName = "SmartPlannerBreadthFirstSearch";
	ini.plannerClient.serviceName = "goal";
	ini.trackingClient.serverName = "SmartLaserPersonTracker";
	ini.trackingClient.serviceName = "tracking";
	ini.cdl.accel_default_file = "CDLacc_P3DX.dat";
	ini.cdl.accel_second_file = "CDLacc_P3DX.dat";
	ini.cdl.curvature_default_file = "CDLindex_P3DX.dat";
	ini.cdl.curvature_second_file = "CDLindex_P3DX.dat";
	ini.cdl.dataDir = "data/";
	ini.cdl.delta_t_calc = 0.7;
	ini.cdl.delta_t_trigger = 0.1;
	ini.cdl.followHysteresis = false;
	ini.cdl.goalA = 0.0;
	ini.cdl.goalX = 0.0;
	ini.cdl.goalY = 0.0;
	ini.cdl.lookup_default_file = "CDLdist_P3DX.dat";
	ini.cdl.lookup_second_file = "CDLdist_P3DX.dat";
	ini.cdl.rotation_acc = 100.0;
	ini.cdl.safetyClearance = 200.0;
	ini.cdl.translation_acc = 400.0;
	ini.cdl.vmax = 400.0;
	ini.cdl.vmin = 0.0;
	ini.cdl.wmax = 40.0;
	ini.cdl.wmin = -40.0;
	ini.cdlRotate.error = 5.0;
	ini.server.plannerInit = true;
	ini.server.trackerInit = false;
}

void SmartCdlServer::init(int argc, char *argv[])
{
	try
	{
		loadParameter(argc, argv);
		component = new CHS::SmartComponent(ini.component.name, argc, argv);

		std::cout << "Component SmartCdlServer is named " << ini.component.name
				<< "." << std::endl;

		// create ports
		goalEventServer = new CHS::EventServer<
				CommNavigationObjects::CommCdlGoalEventParameter,
				CommNavigationObjects::CommCdlGoalEventResult,
				CommNavigationObjects::CdlGoalEventState>(component,
				ini.goalEventServer.serviceName, goalTestHandler);
		laserClient = new CHS::PushNewestClient<
				CommBasicObjects::CommMobileLaserScan>(component);
		navVelSendClient = new CHS::SendClient<
				CommBasicObjects::CommNavigationVelocity>(component);

		threadNavVelSendHandler = new CHS::ThreadQueueSendHandler<
				CommBasicObjects::CommNavigationVelocity>(navVelSendHandler);
		navVelSendServer = new CHS::SendServer<
				CommBasicObjects::CommNavigationVelocity>(component,
				ini.navVelSendServer.serviceName, *threadNavVelSendHandler);

		paramServer = new CHS::SendServer<
				CommNavigationObjects::CommCdlParameter>(component,
				ini.paramServer.serviceName, parameterHandler);

		plannerClient = new CHS::PushNewestClient<
				CommNavigationObjects::CommPlannerGoal>(component);
		stateServer = new CHS::SmartStateServer(component,
				ini.stateServer.serviceName, stateChangeHandler);
		// define states for stateServer (CHS::SmartStateServer) 
		if (stateServer->defineStates("moverobot", "moverobot")
				!= CHS::SMART_OK)
			std::cerr << "ERROR: define state" << std::endl;
		trackingClient = new CHS::PushNewestClient<
				CommTrackingObjects::CommTrackingGoal>(component);

		// create timer
		double fractpart, intpart;
		// setup cdlTriggerTimer
		fractpart = modf(0.1, &intpart);
		component->getTimerThread().scheduleTimer(cdlTriggerTimer, (void*) 0,
				ACE_Time_Value(0, 0), ACE_Time_Value(intpart, (int) (fractpart
						* 1000* 1000 )));

	}
	catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	}
	catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void SmartCdlServer::run()
{
	compHandler.onStartup();
	component->run();
	delete component;
}

void SmartCdlServer::loadParameter(int argc, char *argv[])
{
	/* 
	 Parameters can be specified via command line -filename=<filename>
	 
	 With this parameter present:
	 - The component will look for the file in the current working directory, 
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found
	 
	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc   
	 */
	CHS::SmartParameter parameter;

	// load parameters
	try
	{
		// check if paramfile is given as argument
		bool paramFile = false;
		std::string str;
		for (int i = 0; i < argc; i++)
		{
			str = argv[i];
			if (str.find("filename") != std::string::npos)
				paramFile = true;
		}

		// if paramfile is given as argument
		if (paramFile == true)
		{
			std::cout << "load parameter file from argv \n";
			parameter.addFile(argc, argv, "filename", false);
		}
		// else load standard paramfile
		else
		{
			std::cout << "load SmartCdlServer.ini parameter file\n";
			parameter.addFile("SmartCdlServer.ini");
		}

		// than add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLine("", argc, argv);

		// print all known parameters
		parameter.print(); // TODO remove this


		// load parameter
		parameter.getString("component", "name", ini.component.name);

		parameter.getString("goalEventServer", "serviceName",
				ini.goalEventServer.serviceName);
		parameter.getString("navVelSendServer", "serviceName",
				ini.navVelSendServer.serviceName);
		parameter.getString("paramServer", "serviceName",
				ini.paramServer.serviceName);
		parameter.getString("stateServer", "serviceName",
				ini.stateServer.serviceName);
		parameter.getString("laserClient", "serverName",
				ini.laserClient.serverName);
		parameter.getString("laserClient", "serviceName",
				ini.laserClient.serviceName);
		parameter.getString("navVelSendClient", "serverName",
				ini.navVelSendClient.serverName);
		parameter.getString("navVelSendClient", "serviceName",
				ini.navVelSendClient.serviceName);
		parameter.getString("plannerClient", "serverName",
				ini.plannerClient.serverName);
		parameter.getString("plannerClient", "serviceName",
				ini.plannerClient.serviceName);
		parameter.getString("trackingClient", "serverName",
				ini.trackingClient.serverName);
		parameter.getString("trackingClient", "serviceName",
				ini.trackingClient.serviceName);
		parameter.getString("cdl", "accel_default_file",
				ini.cdl.accel_default_file);
		parameter.getString("cdl", "accel_second_file",
				ini.cdl.accel_second_file);
		parameter.getString("cdl", "curvature_default_file",
				ini.cdl.curvature_default_file);
		parameter.getString("cdl", "curvature_second_file",
				ini.cdl.curvature_second_file);
		parameter.getString("cdl", "dataDir", ini.cdl.dataDir);
		parameter.getDouble("cdl", "delta_t_calc", ini.cdl.delta_t_calc);
		parameter.getDouble("cdl", "delta_t_trigger", ini.cdl.delta_t_trigger);
		parameter.getTruthValue("cdl", "followHysteresis",
				ini.cdl.followHysteresis);
		parameter.getDouble("cdl", "goalA", ini.cdl.goalA);
		parameter.getDouble("cdl", "goalX", ini.cdl.goalX);
		parameter.getDouble("cdl", "goalY", ini.cdl.goalY);
		parameter.getString("cdl", "lookup_default_file",
				ini.cdl.lookup_default_file);
		parameter.getString("cdl", "lookup_second_file",
				ini.cdl.lookup_second_file);
		parameter.getDouble("cdl", "rotation_acc", ini.cdl.rotation_acc);
		parameter.getDouble("cdl", "safetyClearance", ini.cdl.safetyClearance);
		parameter.getDouble("cdl", "translation_acc", ini.cdl.translation_acc);
		parameter.getDouble("cdl", "vmax", ini.cdl.vmax);
		parameter.getDouble("cdl", "vmin", ini.cdl.vmin);
		parameter.getDouble("cdl", "wmax", ini.cdl.wmax);
		parameter.getDouble("cdl", "wmin", ini.cdl.wmin);
		parameter.getDouble("cdlRotate", "error", ini.cdlRotate.error);
		parameter.getTruthValue("server", "plannerInit", ini.server.plannerInit);
		parameter.getTruthValue("server", "trackerInit", ini.server.trackerInit);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (const CHS::ParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

