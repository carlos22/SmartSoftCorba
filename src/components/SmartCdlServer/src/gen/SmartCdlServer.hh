//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _SMARTCDLSERVER_HH
#define _SMARTCDLSERVER_HH

#include <iostream>
#include "smartSoft.hh"
#include "../SmartCdlServerCore.hh"
// include communication objects
#include <CommBasicObjects/commMobileLaserScan.hh>

#include <CommBasicObjects/commNavigationVelocity.hh>

#include <CommNavigationObjects/cdlGoalEventState.hh>

#include <CommNavigationObjects/commCdlGoalEventParameter.hh>

#include <CommNavigationObjects/commCdlGoalEventResult.hh>

#include <CommNavigationObjects/commCdlParameter.hh>

#include <CommNavigationObjects/commPlannerGoal.hh>

#include <CommTrackingObjects/commTrackingGoal.hh>

// include tasks	

#include "../CdlTask.hh"
// include handler
#include "../CompHandler.hh"
#include "../CdlTriggerTimer.hh"
#include "../GoalTestHandler.hh"
#include "../NavVelSendHandler.hh"
#include "../ParameterHandler.hh"
#include "../StateChangeHandler.hh"

#define COMP SmartCdlServer::instance()

class SmartCdlServer: public SmartCdlServerCore
{
private:
	static SmartCdlServer _smartCdlServer;

	// constructor
	SmartCdlServer();

	// copy-constructor
	SmartCdlServer(const SmartCdlServer& cc);

	// destructor
	~SmartCdlServer()
	{
	}
	;

	// load parameter from ini file
	void loadParameter(int argc, char *argv[]);

	// instantiate handler
	CompHandler compHandler;
	CdlTriggerTimer cdlTriggerTimer;
	GoalTestHandler goalTestHandler;
	NavVelSendHandler navVelSendHandler;
	ParameterHandler parameterHandler;
	StateChangeHandler stateChangeHandler;

	// ThreadQueueHandler 
	CHS::ThreadQueueSendHandler<CommBasicObjects::CommNavigationVelocity>
			*threadNavVelSendHandler;

public:
	// component
	CHS::SmartComponent *component;

	// create mutex
	CHS::SmartMutex CdlGlobalLock;
	CHS::SmartMutex CdlTriggerLock;

	// create condition mutex
	CHS::SmartConditionMutex CdlTrigger;//(CdlTriggerLock);


	// instantiate tasks

	CdlTask cdlTask;

	// ports
	CHS::EventServer<CommNavigationObjects::CommCdlGoalEventParameter,
			CommNavigationObjects::CommCdlGoalEventResult,
			CommNavigationObjects::CdlGoalEventState> *goalEventServer;
	CHS::PushNewestClient<CommBasicObjects::CommMobileLaserScan> *laserClient;
	CHS::SendClient<CommBasicObjects::CommNavigationVelocity> *navVelSendClient;
	CHS::SendServer<CommBasicObjects::CommNavigationVelocity> *navVelSendServer;
	CHS::SendServer<CommNavigationObjects::CommCdlParameter> *paramServer;
	CHS::PushNewestClient<CommNavigationObjects::CommPlannerGoal>
			*plannerClient;
	CHS::SmartStateServer *stateServer;
	CHS::PushNewestClient<CommTrackingObjects::CommTrackingGoal>
			*trackingClient;

	void init(int argc, char *argv[]);
	void run();

	// return singleton instance
	static SmartCdlServer* instance()
	{
		return (SmartCdlServer*) &_smartCdlServer;
	}

	// ini parameter
	struct ini_ini
	{

		// component struct
		struct ini_component
		{
			// the name of the component
			std::string name;
		} component;

		struct ini_goalEventServer
		{
			std::string serviceName;
		} goalEventServer;

		struct ini_navVelSendServer
		{
			std::string serviceName;
		} navVelSendServer;

		struct ini_paramServer
		{
			std::string serviceName;
		} paramServer;

		struct ini_stateServer
		{
			std::string serviceName;
		} stateServer;

		struct ini_laserClient
		{
			std::string serverName;
			std::string serviceName;
		} laserClient;

		struct ini_navVelSendClient
		{
			std::string serverName;
			std::string serviceName;
		} navVelSendClient;

		struct ini_plannerClient
		{
			std::string serverName;
			std::string serviceName;
		} plannerClient;

		struct ini_trackingClient
		{
			std::string serverName;
			std::string serviceName;
		} trackingClient;

		struct ini_cdl
		{

			std::string accel_default_file;

			std::string accel_second_file;

			std::string curvature_default_file;

			std::string curvature_second_file;

			std::string dataDir;

			double delta_t_calc;

			double delta_t_trigger;

			bool followHysteresis;

			double goalA;

			double goalX;

			double goalY;

			std::string lookup_default_file;

			std::string lookup_second_file;

			double rotation_acc;

			double safetyClearance;

			double translation_acc;

			double vmax;

			double vmin;

			double wmax;

			double wmin;
		} cdl;

		struct ini_cdlRotate
		{

			double error;
		} cdlRotate;

		struct ini_server
		{

			bool plannerInit;

			bool trackerInit;
		} server;
	} ini;

};
#endif
