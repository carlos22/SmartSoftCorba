//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2008 Christian Schlegel, Andreas Steck, Matthias Lutz
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft CDL component".
//  It provides navigation services based on the CDL
//  Curvature Distance Lookup approach.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#ifndef _SMARTCDLSERVERCORE_HH
#define _SMARTCDLSERVERCORE_HH

#include <iostream>
#include "smartCdlLookup.hh"
#include "CommNavigationObjects/commCdlParameter.hh"

struct CdlStateStruct
{
	CommNavigationObjects::CdlTagType strategy;             // strategy used to select v,w
	CommNavigationObjects::CdlTagType goalSpec;             // where to get the goal specification
	CommNavigationObjects::CdlTagType lookupTable;          // indicates which lookup table to use
	CommNavigationObjects::CdlTagType freeBehavior;         // indicates whether to activate free behavior

	bool   plannerClientSubscribed;  // These flags indicate whether that

	bool   plannerInit;              // findServer : planner
	//bool   joystickInit;             // findServer : joystick
	bool   trackerInit;              //

	bool   followHysteresis;

	int    id;                       // used for synchronization

	double ignoreCircleX;            // ignore all laser scan points which are
	double ignoreCircleY;            // inside that circle. If radius is less
	double ignoreCircleR;            // or equal to zero, no points are discarded.

	double approachDistance;         // distance to stop
	double rotateError;              // angular error to stop rotation in place

	double transAcc;                 // translational acceleration
	double rotAcc;                   // rotational acceleration
	double tcalc;                    // time step prediction into future
	double ttrigger;                 // time step execution cycle
	double vmin;                     // current run: minimum allowed velocity
	double vmax;                     // current run: maximum allowed velocity
	double wmin;                     // current run: minimum allowed velocity
	double wmax;                     // current run: maximum allowed velocity

	double goalX;                    // x coordinate of goal
	double goalY;                    // y coordinate of goal
	double goalA;                    // a coordinate of goal
	long   goalId;

	double savedPosX;                // position from which backward manoeuver starts
	double savedPosY;
	double savedPosA;
	int    saveFlag;
	int    count; 		             // used to count over persistent within the cdl loop
};

class SmartCdlServerCore
{
private:

public:
	SmartCdlServerCore();

	struct CdlStateStruct globalState,localState;

	CdlLookupClass cdlLookupDefault;
	CdlLookupClass cdlLookupSecond;
	CdlLookupClass *cdlLookup;
};

#endif
