//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2008 Christian Schlegel, Andreas Steck, Matthias Lutz
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft CDL component".
//  It provides navigation services based on the CDL
//  Curvature Distance Lookup approach.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#include "CompHandler.hh"
#include "gen/SmartCdlServer.hh"

#include <iostream>
#include <sstream>

// include communication objects

void CompHandler::onStartup()
{
	CHS::StatusCode status;
    std::cout << "------------------------------------------------------------------------\n";
    std::cout << "| Curvature Distance Lookup Server                                     |\n";
    std::cout << "| ZAFH Servicerobotik Ulm                                              |\n";
    std::cout << "| Copyright (C) 2008 Christian Schlegel, Andreas Steck                 |\n";
    std::cout << "------------------------------------------------------------------------\n\n";

    // ----------------------------------------------------------
    // global states
    // ----------------------------------------------------------
    COMP->globalState.lookupTable  	= CommNavigationObjects::CdlTagType::CDL_DEFAULT_LOOKUP;
    COMP->globalState.strategy     	= CommNavigationObjects::CdlTagType::CDL_NEUTRAL;
    COMP->globalState.goalSpec     	= CommNavigationObjects::CdlTagType::CDL_NEUTRAL;
    COMP->globalState.freeBehavior 	= CommNavigationObjects::CdlTagType::CDL_NO_FREE_BEHAVIOR;
    COMP->globalState.id           	= 0;

    COMP->globalState.plannerInit  	= COMP->ini.server.plannerInit;
    COMP->globalState.trackerInit   = COMP->ini.server.trackerInit;

    COMP->globalState.followHysteresis = COMP->ini.cdl.followHysteresis;

    COMP->globalState.rotateError   = COMP->ini.cdlRotate.error * M_PI/180.0;

    COMP->globalState.transAcc		= COMP->ini.cdl.translation_acc;
    COMP->globalState.rotAcc		= COMP->ini.cdl.rotation_acc * M_PI/180.0;
    COMP->globalState.ttrigger		= COMP->ini.cdl.delta_t_trigger;
    COMP->globalState.tcalc			= COMP->ini.cdl.delta_t_calc;
    COMP->globalState.vmin			= COMP->ini.cdl.vmin;
    COMP->globalState.vmax			= COMP->ini.cdl.vmax;
    COMP->globalState.wmin			= COMP->ini.cdl.wmin * M_PI/180.0;
    COMP->globalState.wmax			= COMP->ini.cdl.wmax * M_PI/180.0;

    COMP->globalState.goalX         = COMP->ini.cdl.goalX;
    COMP->globalState.goalY         = COMP->ini.cdl.goalY;
    COMP->globalState.goalA         = COMP->ini.cdl.goalA;

    COMP->cdlLookup = &(COMP->cdlLookupDefault);
    COMP->cdlLookup->setSafetyClearance(COMP->ini.cdl.safetyClearance);

    // TODO: seems to be nonfunctional...
    COMP->globalState.plannerClientSubscribed = false;

    COMP->CdlGlobalLock.release();

    // ----------------------------------------------------------
    // Loding lookup tables
    // ----------------------------------------------------------
    cout << "\nLoading lookup tables ...\n";

    std::string temp;
    temp =  COMP->ini.cdl.dataDir;
    temp += COMP->ini.cdl.curvature_default_file;
    if( COMP->cdlLookupDefault.loadCurvatureIndexAscii( const_cast<char*>(temp.c_str()) ) != 0)
    {
      cerr << "Error loading default curvature file\n";
      exit(0);
    }

    temp = COMP->ini.cdl.dataDir;
    temp += COMP->ini.cdl.lookup_default_file;
    if( COMP->cdlLookupDefault.loadDistAngleLookupBin( const_cast<char*>(temp.c_str()) ) != 0 )
    {
      cerr << "Error loading lookup default file\n";
      exit(0);
    }

    temp = COMP->ini.cdl.dataDir;
    temp += COMP->ini.cdl.accel_default_file;
    if( COMP->cdlLookupDefault.loadAccLookupBin( const_cast<char*>(temp.c_str()) ) != 0 )
    {
      cerr << "Error loading acceleration default file\n";
      exit(0);
    }

    temp = COMP->ini.cdl.dataDir;
    temp += COMP->ini.cdl.curvature_second_file;
    if( COMP->cdlLookupSecond.loadCurvatureIndexAscii( const_cast<char*>(temp.c_str()) ) != 0 )
    {
      cerr << "Error loading second curvature file\n";
      exit(0);
    }

    temp = COMP->ini.cdl.dataDir;
    temp += COMP->ini.cdl.lookup_second_file;
    if( COMP->cdlLookupSecond.loadDistAngleLookupBin( const_cast<char*>(temp.c_str()) ) != 0 )
    {
      cerr << "Error loading lookup second file\n";
      exit(0);
    }

    temp = COMP->ini.cdl.dataDir;
    temp += COMP->ini.cdl.accel_second_file;
    if( COMP->cdlLookupSecond.loadAccLookupBin( const_cast<char*>(temp.c_str()) ) != 0 )
    {
      cerr << "Error loading acceleration second file\n";
      exit(0);
    }
    cout << "... lookup tables loaded successfully\n";


    //if(COMP->ini.server.joystickInit)
    //{
		// connect to all services
		std::cout << "connecting to: " << COMP->ini.navVelSendClient.serverName
				<< "; " << COMP->ini.navVelSendClient.serviceName << std::endl;
		status = COMP->navVelSendClient->connect(
				COMP->ini.navVelSendClient.serverName,
				COMP->ini.navVelSendClient.serviceName);
		while (status != CHS::SMART_OK)
		{
			usleep(500000);
			status = COMP->navVelSendClient->connect(
					COMP->ini.navVelSendClient.serverName,
					COMP->ini.navVelSendClient.serviceName);
		}
		std::cout << "connected.\n";
    //}

	std::cout << "connecting to: " << COMP->ini.laserClient.serverName << "; "
			<< COMP->ini.laserClient.serviceName << std::endl;
	status = COMP->laserClient->connect(COMP->ini.laserClient.serverName,
			COMP->ini.laserClient.serviceName);
	while (status != CHS::SMART_OK)
	{
		usleep(500000);
		status = COMP->laserClient->connect(COMP->ini.laserClient.serverName,
				COMP->ini.laserClient.serviceName);
	}
	std::cout << "connected.\n";

	COMP->laserClient->subscribe();

	if(COMP->ini.server.plannerInit)
	{
		std::cout << "connecting to: " << COMP->ini.plannerClient.serverName
					<< "; " << COMP->ini.plannerClient.serviceName << std::endl;
		status = COMP->plannerClient->connect(COMP->ini.plannerClient.serverName,
				COMP->ini.plannerClient.serviceName);
		while (status != CHS::SMART_OK)
		{
			usleep(500000);
			status = COMP->plannerClient->connect(
					COMP->ini.plannerClient.serverName,
					COMP->ini.plannerClient.serviceName);
		}
		std::cout << "connected.\n";
		COMP->plannerClient->subscribe();
	}

	if(COMP->ini.server.trackerInit)
	{
		std::cout << "connecting to: " << COMP->ini.trackingClient.serverName
			<< "; " << COMP->ini.trackingClient.serviceName << std::endl;
		status = COMP->trackingClient->connect(COMP->ini.trackingClient.serverName,
				COMP->ini.trackingClient.serviceName);
		while (status != CHS::SMART_OK)
		{
			usleep(500000);
			status = COMP->trackingClient->connect(
					COMP->ini.trackingClient.serverName,
					COMP->ini.trackingClient.serviceName);
		}
		std::cout << "connected.\n";
		COMP->trackingClient->subscribe();
	}




	// activate state server
	if (COMP->stateServer->activate() != CHS::SMART_OK)
		std::cerr << "ERROR: activate state" << std::endl;

	// run all tasks
	COMP->cdlTask.open();

}
