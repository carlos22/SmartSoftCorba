//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Copyright (C) 2009 Christian Schlegel, Florian Poppa
//
//        schlegel@hs-ulm.de
//        poppa@hs-ulm.de
//
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public License
//  as published by the Free Software Foundation; either version 2.1
//  of the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public License along
//  with this library; if not, write to the Free Software Foundation, Inc.,
//  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
//--------------------------------------------------------------------------

#ifndef _WORKERTASK_HH
#define _WORKERTASK_HH

#include "gen/WorkerTaskCore.hh"

// Xsens SDK related includes
#include <cmtdef.h>
#include <xsens_time.h>
#include <xsens_list.h>
#include <cmtscan.h>
#include <cmt3.h>

#include <iostream>

// helpful stuff for showing which baud rate the IMU is using
#define STRING_B9600      "9k6"
#define STRING_B19200     "19k2"
#define STRING_B38400     "38k4"
#define STRING_B57600     "57k6"
#define STRING_B115200    "115k2"
#define STRING_B230400    "230k4"
#define STRING_B460800    "460k8"
#define STRING_B921600    "921k6"
#define INVALID_SAMPLE_FREQ -1
#define IMU_SAMPLE_RATE   120

class WorkerTask: public WorkerTaskCore
{

public:
	WorkerTask();
	int svc();

	/**
	 * Method to call when it is all done. Does a bit of clean-up.
	 */
	void die();

	//
	// xsens stuff
	//

	/**
	 * Check for errors while using Xsens SDK
	 */
	inline bool checkXsensResultCode(int, const char*);

	/**
	 * This method does the Xsens IMU initialization procedure and connects to the IMU
	 * (This method is based on the Xsens CMT Linux Example Src)
	 */
	unsigned int initAndConnectToXsensIMU(xsens::Cmt3 &);


};

#endif
