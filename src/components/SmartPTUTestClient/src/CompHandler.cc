//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------
//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------
#include "CompHandler.hh"
#include "gen/SmartPTUTestClient.hh"

#include <iostream>

// include communication objects
#include <CommBasicObjects/commDevicePoseState.hh>

#include <CommPTUObjects/commPTUMoveRequest.hh>
#include <CommPTUObjects/commPTUMoveResponse.hh>
#include <CommPTUObjects/commPTUParameter.hh>


void CompHandler::onStartup()
{
	std::cout
			<< "startup - put your startupCode in CompHandler::onStartup()!!!\n";

	CHS::StatusCode status;

	// connect to all services
	std::cout << "connecting to: " << COMP->ini.stateClient.serverName << "; "
			<< COMP->ini.stateClient.serviceName << std::endl;
	status = COMP->stateClient->connect(COMP->ini.stateClient.serverName,
			COMP->ini.stateClient.serviceName);
	while (status != CHS::SMART_OK)
	{
		usleep(500000);
		status = COMP->stateClient->connect(COMP->ini.stateClient.serverName,
				COMP->ini.stateClient.serviceName);
	}
	std::cout << "connected.\n";

	std::cout << "connecting to: " << COMP->ini.moveQueryClient.serverName
			<< "; " << COMP->ini.moveQueryClient.serviceName << std::endl;
	status = COMP->moveQueryClient->connect(
			COMP->ini.moveQueryClient.serverName,
			COMP->ini.moveQueryClient.serviceName);
	while (status != CHS::SMART_OK)
	{
		usleep(500000);
		status = COMP->moveQueryClient->connect(
				COMP->ini.moveQueryClient.serverName,
				COMP->ini.moveQueryClient.serviceName);
	}
	std::cout << "connected.\n";

	std::cout << "connecting to: "
			<< COMP->ini.devicePoseStateClient.serverName << "; "
			<< COMP->ini.devicePoseStateClient.serviceName << std::endl;
	status = COMP->devicePoseStateClient->connect(
			COMP->ini.devicePoseStateClient.serverName,
			COMP->ini.devicePoseStateClient.serviceName);
	while (status != CHS::SMART_OK)
	{
		usleep(500000);
		status = COMP->devicePoseStateClient->connect(
				COMP->ini.devicePoseStateClient.serverName,
				COMP->ini.devicePoseStateClient.serviceName);
	}
	std::cout << "connected.\n";

	COMP->devicePoseStateClient->subscribe();
	std::cout << "connecting to: " << COMP->ini.paramClient.serverName << "; "
			<< COMP->ini.paramClient.serviceName << std::endl;
	status = COMP->paramClient->connect(COMP->ini.paramClient.serverName,
			COMP->ini.paramClient.serviceName);
	while (status != CHS::SMART_OK)
	{
		usleep(500000);
		status = COMP->paramClient->connect(COMP->ini.paramClient.serverName,
				COMP->ini.paramClient.serviceName);
	}
	std::cout << "connected.\n";

	// run all tasks
	COMP->devicePoseStateTask.open();
	COMP->testTask.open();

}
