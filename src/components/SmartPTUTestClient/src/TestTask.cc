//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------
//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------
#include "TestTask.hh"
#include "gen/SmartPTUTestClient.hh"

#include <iostream>

TestTask::TestTask() {
	std::cout << "constructor TestTask\n";
}

int TestTask::svc() {

	std::string paramValue;
	CommPTUObjects::CommPTUParameter param;

	COMP->stateClient->setWaitState("active");

	while (1) {
		CommPTUObjects::CommPTUMoveRequest request;
		CommPTUObjects::CommPTUMoveResponse response;

		request.set_move_mode(CommPTUObjects::PTUMoveFlag::PAN_TILT_ABSOLUTE);

		//		request.set_pan(-M_PI_2);
		//		request.set_tilt(0);
		//		COMP->moveQueryClient->query(request, response);
		//		checkResponse(response);
		//		//		sleep(1);
		//
		//		request.set_pan(M_PI_2);
		//		request.set_tilt(M_PI_4 / 2);
		//		COMP->moveQueryClient->query(request, response);
		//		checkResponse(response);
		//		//		sleep(1);

		request.set_move_mode(CommPTUObjects::PTUMoveFlag::PAN_TILT_ABSOLUTE);
		    	request.set_pan(-M_PI_2);
		    	request.set_tilt(0);
		    	COMP->moveQueryClient->query(request, response);
		    	checkResponse(response);
				sleep(1);
		
		request.set_move_mode(CommPTUObjects::PTUMoveFlag::TILT_ABSOLUTE);
		    	request.set_tilt(-M_PI_4 / 2);
		    	COMP->moveQueryClient->query(request, response);
		    	checkResponse(response);
				sleep(1);


//		paramValue = "SENSOROFFSET(0)(800)(200)(0)(0)(0)";
//		param.set(paramValue);
//		COMP->paramClient->send(param);
//
//		paramValue = "PANACC(2)";
//		param.set(paramValue);
//		COMP->paramClient->send(param);

		//request.set_move_mode(CommPTUObjects::PTUMoveFlag::POSITION_WORLD);
		//request.set_position(2000, 1000, 0);
		//COMP->moveQueryClient->query(request, response);
		//checkResponse(response);
		//		sleep(1);

//		paramValue ="SENSOROFFSET(0)(-400)(-20)(0)(0)(0)";
//		param.set(paramValue);
//		COMP->paramClient->send(param);
//
//		request.set_move_mode(CommPTUObjects::PTUMoveFlag::POSITION_ROBOT);
//		request.set_position(2000, 0, 0);
//		COMP->moveQueryClient->query(request, response);
//		checkResponse(response);
	}
	return 0;
}

void TestTask::checkResponse(const CommPTUObjects::CommPTUMoveResponse& response) const {
	switch (response.get_status()) {
	case CommPTUObjects::PTUMoveStatus::OK: {
		std::cout << "move was successful\n";
		break;
	}
	case CommPTUObjects::PTUMoveStatus::PAN_OUT_OF_RANGE: {
		std::cout << "pan out of range\n";
		break;
	}
	case CommPTUObjects::PTUMoveStatus::TILT_OUT_OF_RANGE: {
		std::cout << "tilt out of range\n";
		break;
	}
	case CommPTUObjects::PTUMoveStatus::PAN_TILT_OUT_OF_RANGE: {
		std::cout << "pan/tilt out of range\n";
		break;
	}
	case CommPTUObjects::PTUMoveStatus::FAILURE: {
		std::cout << "failure\n";
		break;
	}
	case CommPTUObjects::PTUMoveStatus::HALTED: {
		std::cout << "halted\n";
		break;
	}
	}
}
