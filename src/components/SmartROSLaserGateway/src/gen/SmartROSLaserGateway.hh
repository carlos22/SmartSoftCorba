//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.4
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _SMARTROSLASERGATEWAY_HH
#define _SMARTROSLASERGATEWAY_HH

#include <iostream>
#include "smartSoft.hh"
#include "../SmartROSLaserGatewayCore.hh"
// include communication objects
#include <CommBasicObjects/commBaseState.hh>
#include <CommBasicObjects/commMobileLaserScan.hh>
#include <CommBasicObjects/commVoid.hh>
// include tasks	

#include "../ROS_SpinTask.hh"
// include handler
#include "../CompHandler.hh"
#include "../LaserQueryHandler.hh"

#define COMP SmartROSLaserGateway::instance()

class SmartROSLaserGateway: public SmartROSLaserGatewayCore
{
private:
	static SmartROSLaserGateway _smartROSLaserGateway;

	// constructor
	SmartROSLaserGateway();

	// copy-constructor
	SmartROSLaserGateway(const SmartROSLaserGateway& cc);

	// destructor
	~SmartROSLaserGateway()
	{
	}
	;

	// load parameter from ini file
	void loadParameter(int argc, char *argv[]);

	// instantiate handler
	CompHandler compHandler;
	LaserQueryHandler laserQueryHandler;

	// ThreadQueueHandler 


public:
	// component
	CHS::SmartComponent *component;

	// create mutex


	// create condition mutex


	// instantiate tasks

	ROS_SpinTask rOS_SpinTask;

	// ports
	CHS::PushTimedClient<CommBasicObjects::CommBaseState> *baseStateClient;
	CHS::QueryServer<CommBasicObjects::CommVoid,
			CommBasicObjects::CommMobileLaserScan> *laserQueryServer;
	CHS::PushNewestServer<CommBasicObjects::CommMobileLaserScan> *laserServer;
	CHS::WiringSlave *wiringSlave;

	void init(int argc, char *argv[]);
	void run();

	// return singleton instance
	static SmartROSLaserGateway* instance()
	{
		return (SmartROSLaserGateway*) &_smartROSLaserGateway;
	}

	// ini parameter
	struct ini_ini
	{

		// component struct
		struct ini_component
		{
			// the name of the component
			std::string name;
		} component;

		struct ini_laserQueryServer
		{
			std::string serviceName;
		} laserQueryServer;

		struct ini_laserServer
		{
			std::string serviceName;
		} laserServer;

		struct ini_baseStateClient
		{
			std::string serverName;
			std::string serviceName;
			long interval;
		} baseStateClient;

		struct ini_ROS
		{

			/**
			 * Describes whether laser-range-finder is statically mounted on the base device or is mounted on a manipulator.
			 * Thus the offset between base and lrf is either calculated once at the beginning or is determined for each laser scan separatelly.
			 */
			bool is_static_mounted_lrf;

			/**
			 * The name for the laser-publisher topic to subscribe to.
			 */
			std::string laser_subscr_name;

			/**
			 * Is the name for the base-link tf-frame.
			 */
			std::string tf_base_link_name;

			/**
			 * New_Comment
			 */
			std::string tf_laser_base_link_name;
		} ROS;

		struct ini_services
		{

			bool subscribe_base;

			bool verbose;
		} services;
	} ini;

};
#endif
