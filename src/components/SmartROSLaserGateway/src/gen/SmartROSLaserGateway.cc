//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.4
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "SmartROSLaserGateway.hh"

// constructor
SmartROSLaserGateway::SmartROSLaserGateway()
{
	std::cout << "constructor of SmartROSLaserGateway\n";

	ini.component.name = "SmartROSLaserGateway";

	ini.laserQueryServer.serviceName = "scan";
	ini.laserServer.serviceName = "scan";
	ini.baseStateClient.serverName = "SmartROSBaseGateway";
	ini.baseStateClient.serviceName = "basestate";
	ini.baseStateClient.interval = 1;
	ini.ROS.is_static_mounted_lrf = true;
	ini.ROS.laser_subscr_name = "/base_scan/scan";
	ini.ROS.tf_base_link_name = "/base_link";
	ini.ROS.tf_laser_base_link_name = "/laser_base_link";
	ini.services.subscribe_base = true;
	ini.services.verbose = false;
}

void SmartROSLaserGateway::init(int argc, char *argv[])
{
	try
	{
		loadParameter(argc, argv);
		component = new CHS::SmartComponent(ini.component.name, argc, argv);

		std::cout << "Component SmartROSLaserGateway is named "
				<< ini.component.name << "." << std::endl;

		// create ports
		baseStateClient = new CHS::PushTimedClient<
				CommBasicObjects::CommBaseState>(component);
		laserQueryServer = new CHS::QueryServer<CommBasicObjects::CommVoid,
				CommBasicObjects::CommMobileLaserScan>(component,
				ini.laserQueryServer.serviceName, laserQueryHandler);

		laserServer = new CHS::PushNewestServer<
				CommBasicObjects::CommMobileLaserScan>(component,
				ini.laserServer.serviceName);
		wiringSlave = new CHS::WiringSlave(component);

		// add client port to wiring slave
		baseStateClient->add(wiringSlave, "baseStateClient");

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void SmartROSLaserGateway::run()
{
	compHandler.onStartup();
	component->run();
	delete component;
}

void SmartROSLaserGateway::loadParameter(int argc, char *argv[])
{
	/* 
	 Parameters can be specified via command line -filename=<filename>
	 
	 With this parameter present:
	 - The component will look for the file in the current working directory, 
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found
	 
	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc   
	 */
	CHS::SmartParameter parameter;

	// load parameters
	try
	{
		// check if paramfile is given as argument
		bool paramFile = false;
		std::string str;
		for (int i = 0; i < argc; i++)
		{
			str = argv[i];
			if (str.find("filename") != std::string::npos)
				paramFile = true;
		}

		// if paramfile is given as argument
		if (paramFile == true)
		{
			std::cout << "load parameter file from argv \n";
			parameter.addFile(argc, argv, "filename", false);
		}
		// else load standard paramfile
		else
		{
			std::cout << "load SmartROSLaserGateway.ini parameter file\n";
			parameter.addFile("SmartROSLaserGateway.ini");
		}

		// than add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLine("", argc, argv);

		// print all known parameters
		parameter.print(); // TODO remove this


		// load parameter
		parameter.getString("component", "name", ini.component.name);

		parameter.getString("laserQueryServer", "serviceName",
				ini.laserQueryServer.serviceName);
		parameter.getString("laserServer", "serviceName",
				ini.laserServer.serviceName);
		parameter.getString("baseStateClient", "serverName",
				ini.baseStateClient.serverName);
		parameter.getString("baseStateClient", "serviceName",
				ini.baseStateClient.serviceName);
		parameter.getInt("baseStateClient", "interval",
				ini.baseStateClient.interval);
		parameter.getTruthValue("ROS", "is_static_mounted_lrf",
				ini.ROS.is_static_mounted_lrf);
		parameter.getString("ROS", "laser_subscr_name",
				ini.ROS.laser_subscr_name);
		parameter.getString("ROS", "tf_base_link_name",
				ini.ROS.tf_base_link_name);
		parameter.getString("ROS", "tf_laser_base_link_name",
				ini.ROS.tf_laser_base_link_name);
		parameter.getTruthValue("services", "subscribe_base",
				ini.services.subscribe_base);
		parameter.getTruthValue("services", "verbose", ini.services.verbose);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (const CHS::ParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

