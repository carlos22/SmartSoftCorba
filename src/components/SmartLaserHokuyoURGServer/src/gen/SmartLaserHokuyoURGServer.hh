//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _SMARTLASERHOKUYOURGSERVER_HH
#define _SMARTLASERHOKUYOURGSERVER_HH

#include <iostream>
#include "smartSoft.hh"
#include "../SmartLaserHokuyoURGServerCore.hh"
// include communication objects
#include "externalCommObjectHeaders.hh"
#include <commMobileManipulatorState.hh>

// include tasks	

#include "../LaserTask.hh"
// include handler
#include "../CompHandler.hh"
#include "../StateChangeHandler.hh"
#include "../LaserQueryHandler.hh"
#include "../PushTimedHandler.hh"

#define COMP SmartLaserHokuyoURGServer::instance()

class SmartLaserHokuyoURGServer: public SmartLaserHokuyoURGServerCore
{
private:
	static SmartLaserHokuyoURGServer _smartLaserHokuyoURGServer;

	// constructor
	SmartLaserHokuyoURGServer();

	// copy-constructor
	SmartLaserHokuyoURGServer(const SmartLaserHokuyoURGServer& cc);

	// destructor
	~SmartLaserHokuyoURGServer()
	{
	}
	;

	// load parameter from ini file
	void loadParameter(int argc, char *argv[]);

	// instantiate handler
	CompHandler compHandler;
	StateChangeHandler stateChangeHandler;
	LaserQueryHandler laserQueryHandler;
	PushTimedHandler pushTimedHandler;

	// ThreadQueueHandler 


public:
	// component
	CHS::SmartComponent *component;

	// create mutex
	CHS::SmartMutex ScanLock;

	// create condition mutex


	// instantiate tasks

	LaserTask laserTask;

	// ports
	CHS::QueryServer<Smart::CommVoid, Smart::CommMobileLaserScan>
			*laserQueryServer;
	CHS::PushNewestServer<Smart::CommMobileLaserScan> *laserPushNewestServer;
	CHS::PushTimedServer<Smart::CommMobileLaserScan> *laserPushTimedServer;
	CHS::SmartStateServer *stateServer;
	CHS::PushTimedClient<Smart::CommBaseState> *baseTimedClient;
	CHS::PushTimedClient<Smart::CommMobileManipulatorState>
			*manipulatorTimedClient;

	void init(int argc, char *argv[]);
	void run();

	// return singleton instance
	static SmartLaserHokuyoURGServer* instance()
	{
		return (SmartLaserHokuyoURGServer*) &_smartLaserHokuyoURGServer;
	}

	// ini parameter
	struct ini_ini
	{

		struct ini_laserPushNewestServer
		{
			std::string serviceName;
		} laserPushNewestServer;

		struct ini_laserPushTimedServer
		{
			std::string serviceName;
			double cycle;
		} laserPushTimedServer;

		struct ini_laserQueryServer
		{
			std::string serviceName;
		} laserQueryServer;

		struct ini_stateServer
		{
			std::string serviceName;
		} stateServer;

		struct ini_baseTimedClient
		{
			std::string serverName;
			std::string serviceName;
			long interval;
		} baseTimedClient;

		struct ini_manipulatorTimedClient
		{
			std::string serverName;
			std::string serviceName;
			long interval;
		} manipulatorTimedClient;

		struct ini_base_manipulator
		{
			double base_a;
			bool on_base;
			bool on_manipulator;
			bool on_turret;
			double steer_a;
			double turret_a;
			long x;
			long y;
			long z;
		} base_manipulator;
		struct ini_scanner
		{
			double azimuth;
			std::string device;
			double elevation;
			unsigned long max_range;
			unsigned long min_range;
			unsigned long opening_angle;
			double roll;
			unsigned long speed;
			std::string type;
			bool verbose;
			long x;
			long y;
			long z;
		} scanner;
		struct ini_services
		{
			bool activate_push_newest;
			bool activate_push_timed;
		} services;
	} ini;

};
#endif
