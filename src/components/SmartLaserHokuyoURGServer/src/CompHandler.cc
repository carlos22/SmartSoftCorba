//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//------------------------------------------------------------------------
//
//  Copyright (C) 2010 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "SmartLaserHokuyoURGServer component".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------

#include "CompHandler.hh"
#include "gen/SmartLaserHokuyoURGServer.hh"

#include <iostream>

// include communication objects
#include "externalCommObjectHeaders.hh"
#include <commMobileManipulatorState.hh>

void CompHandler::onStartup() {
	std::cout << "startup - put your startupCode in CompHandler::onStartup()!!!\n";

	CHS::StatusCode status;

	// connect to all services
	if (COMP->ini.base_manipulator.on_manipulator) {
		std::cout << "connecting to: " << COMP->ini.manipulatorTimedClient.serverName << "; "
				<< COMP->ini.manipulatorTimedClient.serviceName << std::endl;
		status = COMP->manipulatorTimedClient->connect(COMP->ini.manipulatorTimedClient.serverName,
				COMP->ini.manipulatorTimedClient.serviceName);
		while (status != CHS::SMART_OK) {
			usleep(500000);
			status = COMP->manipulatorTimedClient->connect(COMP->ini.manipulatorTimedClient.serverName,
					COMP->ini.manipulatorTimedClient.serviceName);
		}
		std::cout << "connected.\n";
		COMP->manipulatorTimedClient->subscribe(COMP->ini.manipulatorTimedClient.interval);

	} else if (COMP->ini.base_manipulator.on_base) {
		std::cout << "connecting to: " << COMP->ini.baseTimedClient.serverName << "; "
				<< COMP->ini.baseTimedClient.serviceName << std::endl;
		status = COMP->baseTimedClient->connect(COMP->ini.baseTimedClient.serverName,
				COMP->ini.baseTimedClient.serviceName);
		while (status != CHS::SMART_OK) {
			usleep(500000);
			status = COMP->baseTimedClient->connect(COMP->ini.baseTimedClient.serverName,
					COMP->ini.baseTimedClient.serviceName);
		}
		std::cout << "connected.\n";
		COMP->baseTimedClient->subscribe(COMP->ini.baseTimedClient.interval);
	}

	// activate state server
	if (COMP->stateServer->activate() != CHS::SMART_OK)
		std::cerr << "ERROR: activate state" << std::endl;

	if (COMP->ini.scanner.verbose)
		std::cout << "starting tasks\n";

	// run all tasks
	COMP->laserTask.open();
}
