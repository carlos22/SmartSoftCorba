//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Copyright (C) 2009 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        ZAFH Servicerobotic Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public License
//  as published by the Free Software Foundation; either version 2.1
//  of the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public License along
//  with this library; if not, write to the Free Software Foundation, Inc.,
//  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
//--------------------------------------------------------------------------

#ifndef _IMAGETASK_HH
#define _IMAGETASK_HH

#include "gen/ImageTaskCore.hh"

#include <CommVisionObjects/commToFImage.hh>
#include <CommVisionObjects/commToFParameter.hh>

#include <CommBasicObjects/commPose3d.hh>
#include <CommBasicObjects/commBaseState.hh>

class ImageTask: public ImageTaskCore {

public:
	ImageTask();

	int svc();

	virtual ~ImageTask();

	void setState(CommVisionObjects::CommToFImage &image);

private:
//	/**
//	 * Internal class which is responsible for deleting the invalid images.
//	 */
//	class ImageCleanupThread: public CHS::SmartTask {
//	public:
//		ImageCleanupThread();
//
//		int svc();
//
//		/**
//		 * This method enqueues the image which should be deleted into a queue
//		 * for asynchronous deletion.
//		 */
//		inline void remove_reference_to(CommToFObjects::CommToFImage *image) {
//			if (image)
//				_enqueue(image);
//		}
//		/**
//		 * This method can be used to stop the CleanupThread
//		 */
//		inline void stopThread() {
//			_enqueue(0);
//		}
//
//		virtual ~ImageCleanupThread();
//	private:
//		std::queue<CommToFObjects::CommToFImage*> _queue;
//		CHS::SmartMutex _queue_mutex;
//		CHS::SmartSemaphore _queue_sem;
//
//		void _enqueue(CommToFObjects::CommToFImage* image);
//	};
//	ImageCleanupThread* _cleanupThread;



	unsigned int _ring_buffer_index;
	std::vector<CommVisionObjects::CommToFImage*> _ring_buffer;

};

#endif
