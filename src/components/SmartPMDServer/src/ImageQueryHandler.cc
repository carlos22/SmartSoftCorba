//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Copyright (C) 2009 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        ZAFH Servicerobotic Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public License
//  as published by the Free Software Foundation; either version 2.1
//  of the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public License along
//  with this library; if not, write to the Free Software Foundation, Inc.,
//  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
//--------------------------------------------------------------------------

#include "ImageQueryHandler.hh"
#include "gen/SmartPMDServer.hh"

#include <iostream>

void ImageQueryHandler::handleQuery(CHS::QueryServer<CommBasicObjects::CommVoid, CommVisionObjects::CommToFImage> & server,
		const CHS::QueryId id, const CommBasicObjects::CommVoid & request) throw () {

	try {

		CHS::StatusCode status;
		CommVisionObjects::CommToFImage image(COMP->ini.hardware_properties.width, COMP->ini.hardware_properties.height);
		image.set_data_valid(false);

		if (COMP->ini.general.debug_info) {
			std::cout<<"Query Request received.."<<std::endl;
		}

		// Component Active then get new image
		status = COMP->stateServer->tryAcquire("nonneutral");
		if(status == CHS::SMART_OK)
		{
			// If Newest and Timed active get image from global Reference otherwise get it directly from Unicap
			if (COMP->stateServer->tryAcquire("pushimage")==CHS::SMART_OK)
			{
				COMP->NewestImageMutex.acquire();
				CommVisionObjects::CommToFImage* newestImage = COMP->newestImage;
				COMP->NewestImageMutex.release();

				if (newestImage != NULL) {
					image.set_amplitudes(newestImage->get_amplitudes());
					image.set_coordinates(newestImage->get_coordinates());
					image.set_intensities(newestImage->get_intensities());
					image.set_distances(newestImage->get_distances());

					image.set_sequence_counter((unsigned long int) newestImage->get_sequence_counter());
					image.set_sensor_pose(newestImage->get_sensor_pose());
					image.set_base_state(newestImage->get_base_state());


					image.set_min_distance(newestImage->get_min_distance());
					image.set_max_distance(newestImage->get_max_distance());
					image.set_opening_angle_x_axis(newestImage->get_opening_angle_x_axis());
					image.set_opening_angle_y_axis(newestImage->get_opening_angle_y_axis());
					image.set_integration_time(newestImage->get_integration_time());
					image.set_modulation_frequency(newestImage->get_modulation_frequency());
					image.set_data_valid(newestImage->is_data_valid());

				} else {
					std::cout << "Newest image NULL!" << std::endl;
				}
				COMP->stateServer->release("pushimage");
			}
			else
			{
				COMP->pmd.getImage(image);
				COMP->imageTask.setState(image);
			}

			COMP->stateServer->release("nonneutral");
		}
		else
		{
			image.set_data_valid(false);
			if (COMP->ini.general.debug_info) {
					std::cout << "Query: Set Data invalid!"<< std::endl;
			}

		}

		server.answer(id, image);
		if (COMP->ini.general.debug_info) {
			std::cout << "Query: Answer sent with ID: " << id << std::endl;
		}
	} // try
	 catch (std::exception e) {
		std::cerr << "Error in ImageQueryHandler::handleQuery " << e.what() << "\n";
	} catch (...) {
		std::cerr << "Unknown error in ImageQueryHandler::handleQuery\n";
	}
}
