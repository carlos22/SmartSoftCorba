//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Copyright (C) 2009 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        ZAFH Servicerobotic Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public License
//  as published by the Free Software Foundation; either version 2.1
//  of the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public License along
//  with this library; if not, write to the Free Software Foundation, Inc.,
//  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
//--------------------------------------------------------------------------

#include "CompHandler.hh"
#include "gen/SmartPMDServer.hh"

#include <iostream>

// include communication objects
#include <CommVisionObjects/commToFImage.hh>
#include <CommVisionObjects/commToFParameter.hh>

void CompHandler::onStartup() {
	CHS::StatusCode status;

	// connect to all services
	if (COMP->ini.base.on_ptu) {
		COMP->basePushTimedClient->subscribe(COMP->ini.basePushTimedClient.interval);
		std::cout << "connecting to: " << COMP->ini.ptuDeviceStateServer.serverName << "; "
				<< COMP->ini.ptuDeviceStateServer.serviceName << std::endl;
		status = COMP->ptuDeviceStateServer->connect(COMP->ini.ptuDeviceStateServer.serverName,
				COMP->ini.ptuDeviceStateServer.serviceName);
		while (status != CHS::SMART_OK) {
			usleep(500000);
			status = COMP->ptuDeviceStateServer->connect(COMP->ini.ptuDeviceStateServer.serverName,
					COMP->ini.ptuDeviceStateServer.serviceName);
		}
		std::cout << "connected.\n";

		COMP->ptuDeviceStateServer->subscribe();
	}

	else if (COMP->ini.base.on_base) {
		std::cout << "connecting to: " << COMP->ini.basePushTimedClient.serverName << "; "
				<< COMP->ini.basePushTimedClient.serviceName << std::endl;
		status = COMP->basePushTimedClient->connect(COMP->ini.basePushTimedClient.serverName,
				COMP->ini.basePushTimedClient.serviceName);
		while (status != CHS::SMART_OK) {
			usleep(500000);
			status = COMP->basePushTimedClient->connect(COMP->ini.basePushTimedClient.serverName,
					COMP->ini.basePushTimedClient.serviceName);
		}
		std::cout << "connected.\n";

		COMP->basePushTimedClient->subscribe(COMP->ini.basePushTimedClient.interval);
	}

	// connect to camera
	std::cout << "connecting to camera ... \n";
	COMP->pmd.init(COMP->ini.general.source_plugin, COMP->ini.general.source_parameter,
			COMP->ini.general.processing_plugin, COMP->ini.general.processing_parameter,
			COMP->ini.hardware_properties.width, COMP->ini.hardware_properties.height,
			COMP->ini.hardware_properties.min_distance, COMP->ini.hardware_properties.max_distance,
			COMP->ini.hardware_properties.opening_angle_x_axis, COMP->ini.hardware_properties.opening_angle_y_axis);
	std::cout << "initialized. \n";

	if (COMP->ini.general.initialize_camera) {
		COMP->pmd.setModulationFrequency(COMP->ini.hardware_properties.modulation_frequency);
		COMP->pmd.setIntegrationTime(COMP->ini.hardware_properties.integration_time);
		COMP->pmd.setLenseCalibrationOn(COMP->ini.hardware_properties.activate_lense_calibration);
		COMP->pmd.setSuppressMotionBlur(COMP->ini.hardware_properties.activate_suppress_motion_blur);
	}
	std::cout << "camera connected!\n";

	// activate state server
	if (COMP->stateServer->activate() != CHS::SMART_OK)
		std::cerr << "ERROR: activate state" << std::endl;

	// run all tasks
	COMP->imageTask.open();


}
