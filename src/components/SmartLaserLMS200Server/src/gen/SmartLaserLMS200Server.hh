//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.4
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _SMARTLASERLMS200SERVER_HH
#define _SMARTLASERLMS200SERVER_HH

#include <iostream>
#include "smartSoft.hh"
#include "../SmartLaserLMS200ServerCore.hh"
// include communication objects
#include <CommBasicObjects/commBaseState.hh>
#include <CommBasicObjects/commMobileLaserScan.hh>
#include <CommBasicObjects/commVoid.hh>
// include tasks	

#include "../LaserTask.hh"
// include handler
#include "../CompHandler.hh"
#include "../LaserQueryHandler.hh"

#define COMP SmartLaserLMS200Server::instance()

class SmartLaserLMS200Server: public SmartLaserLMS200ServerCore
{
private:
	static SmartLaserLMS200Server _smartLaserLMS200Server;

	// constructor
	SmartLaserLMS200Server();

	// copy-constructor
	SmartLaserLMS200Server(const SmartLaserLMS200Server& cc);

	// destructor
	~SmartLaserLMS200Server()
	{
	}
	;

	// load parameter from ini file
	void loadParameter(int argc, char *argv[]);

	// instantiate handler
	CompHandler compHandler;
	LaserQueryHandler laserQueryHandler;

	// ThreadQueueHandler 


public:
	// component
	CHS::SmartComponent *component;

	// create mutex
	CHS::SmartMutex ScanLock;

	// create condition mutex


	// instantiate tasks

	LaserTask laserTask;

	// ports
	CHS::PushTimedClient<CommBasicObjects::CommBaseState> *baseClient;
	CHS::QueryServer<CommBasicObjects::CommVoid,
			CommBasicObjects::CommMobileLaserScan> *laserQueryServer;
	CHS::PushNewestServer<CommBasicObjects::CommMobileLaserScan> *laserServer;
	CHS::WiringSlave *wiringSlave;

	void init(int argc, char *argv[]);
	void run();

	// return singleton instance
	static SmartLaserLMS200Server* instance()
	{
		return (SmartLaserLMS200Server*) &_smartLaserLMS200Server;
	}

	// ini parameter
	struct ini_ini
	{

		// component struct
		struct ini_component
		{
			// the name of the component
			std::string name;
		} component;

		struct ini_laserQueryServer
		{
			std::string serviceName;
		} laserQueryServer;

		struct ini_laserServer
		{
			std::string serviceName;
		} laserServer;

		struct ini_baseClient
		{
			std::string serverName;
			std::string serviceName;
			long interval;
		} baseClient;

		struct ini_base
		{

			double base_a;

			double steer_a;

			bool subscribe;

			double turret_a;

			double x;

			double y;

			double z;
		} base;

		/**
		 * possible values are "LMS" (for LMS 200) and "PLS"
		 */
		struct ini_laser
		{

			double azimuth;

			long baudrate;

			std::string device;

			long length_unit;

			bool on_turret;

			long resolution;

			std::string sick_type;

			bool verbose;

			double x;

			double y;

			double z;
		} laser;
	} ini;

};
#endif
