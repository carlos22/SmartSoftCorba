//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "SmartLaserLMS200Server.hh"

// constructor
SmartLaserLMS200Server::SmartLaserLMS200Server()
{
	std::cout << "constructor of SmartLaserLMS200Server\n";

	ini.component.name = "SmartLaserLMS200Server";

	ini.laserQueryServer.serviceName = "scan";
	ini.laserServer.serviceName = "scan";
	ini.baseClient.serverName = "SmartPioneerBaseServer";
	ini.baseClient.serviceName = "basestate";
	ini.baseClient.interval = 1;
	ini.base.base_a = 0;
	ini.base.steer_a = 0;
	ini.base.subscribe = true;
	ini.base.turret_a = 0;
	ini.base.x = 0;
	ini.base.y = 0;
	ini.base.z = 0;
	ini.laser.azimuth = 0;
	ini.laser.baudrate = 500000;
	ini.laser.device = "/dev/sick";
	ini.laser.length_unit = 1;
	ini.laser.on_turret = false;
	ini.laser.resolution = 50;
	ini.laser.sick_type = "LMS";
	ini.laser.verbose = false;
	ini.laser.x = 70;
	ini.laser.y = 0;
	ini.laser.z = 0;
}

void SmartLaserLMS200Server::init(int argc, char *argv[])
{
	try
	{
		loadParameter(argc, argv);
		component = new CHS::SmartComponent(ini.component.name, argc, argv);

		std::cout << "Component SmartLaserLMS200Server is named "
				<< ini.component.name << "." << std::endl;

		// create ports
		baseClient = new CHS::PushTimedClient<CommBasicObjects::CommBaseState>(
				component);
		laserQueryServer = new CHS::QueryServer<CommBasicObjects::CommVoid,
				CommBasicObjects::CommMobileLaserScan>(component,
				ini.laserQueryServer.serviceName, laserQueryHandler);

		laserServer = new CHS::PushNewestServer<
				CommBasicObjects::CommMobileLaserScan>(component,
				ini.laserServer.serviceName);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void SmartLaserLMS200Server::run()
{
	compHandler.onStartup();
	component->run();
	delete component;
}

void SmartLaserLMS200Server::loadParameter(int argc, char *argv[])
{
	/* 
	 Parameters can be specified via command line -filename=<filename>
	 
	 With this parameter present:
	 - The component will look for the file in the current working directory, 
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found
	 
	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc   
	 */
	CHS::SmartParameter parameter;

	// load parameters
	try
	{
		// check if paramfile is given as argument
		bool paramFile = false;
		std::string str;
		for (int i = 0; i < argc; i++)
		{
			str = argv[i];
			if (str.find("filename") != std::string::npos)
				paramFile = true;
		}

		// if paramfile is given as argument
		if (paramFile == true)
		{
			std::cout << "load parameter file from argv \n";
			parameter.addFile(argc, argv, "filename", false);
		}
		// else load standard paramfile
		else
		{
			std::cout << "load SmartLaserLMS200Server.ini parameter file\n";
			parameter.addFile("SmartLaserLMS200Server.ini");
		}

		// than add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLine("", argc, argv);

		// print all known parameters
		parameter.print(); // TODO remove this


		// load parameter
		parameter.getString("component", "name", ini.component.name);

		parameter.getString("laserQueryServer", "serviceName",
				ini.laserQueryServer.serviceName);
		parameter.getString("laserServer", "serviceName",
				ini.laserServer.serviceName);
		parameter.getString("baseClient", "serverName",
				ini.baseClient.serverName);
		parameter.getString("baseClient", "serviceName",
				ini.baseClient.serviceName);
		parameter.getInt("baseClient", "interval", ini.baseClient.interval);
		parameter.getDouble("base", "base_a", ini.base.base_a);
		parameter.getDouble("base", "steer_a", ini.base.steer_a);
		parameter.getTruthValue("base", "subscribe", ini.base.subscribe);
		parameter.getDouble("base", "turret_a", ini.base.turret_a);
		parameter.getDouble("base", "x", ini.base.x);
		parameter.getDouble("base", "y", ini.base.y);
		parameter.getDouble("base", "z", ini.base.z);
		parameter.getDouble("laser", "azimuth", ini.laser.azimuth);
		parameter.getInt("laser", "baudrate", ini.laser.baudrate);
		parameter.getString("laser", "device", ini.laser.device);
		parameter.getInt("laser", "length_unit", ini.laser.length_unit);
		parameter.getTruthValue("laser", "on_turret", ini.laser.on_turret);
		parameter.getInt("laser", "resolution", ini.laser.resolution);
		parameter.getString("laser", "sick_type", ini.laser.sick_type);
		parameter.getTruthValue("laser", "verbose", ini.laser.verbose);
		parameter.getDouble("laser", "x", ini.laser.x);
		parameter.getDouble("laser", "y", ini.laser.y);
		parameter.getDouble("laser", "z", ini.laser.z);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (const CHS::ParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

