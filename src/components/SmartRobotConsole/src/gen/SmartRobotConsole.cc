//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "SmartRobotConsole.hh"

// constructor
SmartRobotConsole::SmartRobotConsole()
{
	std::cout << "constructor of SmartRobotConsole\n";

	ini.component.name = "SmartRobotConsole";

	ini.amclParameterClient.serverName = "SmartAmcl";
	ini.amclParameterClient.serviceName = "param";
	ini.amclStateClient.serverName = "SmartAmcl";
	ini.amclStateClient.serviceName = "state";
	ini.baseParameterClient.serverName = "SmartPioneerBaseServer";
	ini.baseParameterClient.serviceName = "param";
	ini.cdlGoalEventClient.serverName = "SmartCdlServer";
	ini.cdlGoalEventClient.serviceName = "cdlGoalEvent";
	ini.cdlParameterClient.serverName = "SmartCdlServer";
	ini.cdlParameterClient.serviceName = "param";
	ini.cdlStateClient.serverName = "SmartCdlServer";
	ini.cdlStateClient.serviceName = "state";
	ini.forkliftParameterClient.serverName = "SmartForkliftServer";
	ini.forkliftParameterClient.serviceName = "param";
	ini.gmappingParameterClient.serverName = "SmartGMapping";
	ini.gmappingParameterClient.serviceName = "param";
	ini.mapperParameterClient.serverName = "SmartMapperGridMap";
	ini.mapperParameterClient.serviceName = "param";
	ini.mapperStateClient.serverName = "SmartMapperGridMap";
	ini.mapperStateClient.serviceName = "state";
	ini.plannerEventClient.serverName = "SmartPlannerBreadthFirstSearch";
	ini.plannerEventClient.serviceName = "plannerEvent";
	ini.plannerParameterClient.serverName = "SmartPlannerBreadthFirstSearch";
	ini.plannerParameterClient.serviceName = "param";
	ini.plannerStateClient.serverName = "SmartPlannerBreadthFirstSearch";
	ini.plannerStateClient.serviceName = "state";
	ini.ptuQueryClient.serverName = "SmartPTUServer";
	ini.ptuQueryClient.serviceName = "movePTU";
	ini.ptuStateClient.serverName = "SmartPTUServer";
	ini.ptuStateClient.serviceName = "state";
	ini.speechParameterClient.serverName = "SmartTTSLoquendo";
	ini.speechParameterClient.serviceName = "param";
	ini.speechSendClient.serverName = "SmartTTSLoquendo";
	ini.speechSendClient.serviceName = "text2speech";
	ini.speechStateClient.serverName = "SmartTTSLoquendo";
	ini.speechStateClient.serviceName = "text2speech";
}

void SmartRobotConsole::init(int argc, char *argv[])
{
	try
	{
		loadParameter(argc, argv);
		component = new CHS::SmartComponent(ini.component.name, argc, argv);

		std::cout << "Component SmartRobotConsole is named "
				<< ini.component.name << "." << std::endl;

		// create ports
		amclParameterClient = new CHS::SendClient<
				CommNavigationObjects::CommAmclParameter>(component);
		amclStateClient = new CHS::SmartStateClient(component);
		baseParameterClient = new CHS::SendClient<
				CommBasicObjects::CommBaseParameter>(component);

		cdlGoalEventClient = new CHS::EventClient<
				CommNavigationObjects::CommCdlGoalEventParameter,
				CommNavigationObjects::CommCdlGoalEventResult>(component);

		cdlParameterClient = new CHS::SendClient<
				CommNavigationObjects::CommCdlParameter>(component);
		cdlStateClient = new CHS::SmartStateClient(component);
		forkliftParameterClient = new CHS::SendClient<
				CommForkliftObjects::CommForkliftParameter>(component);
		gmappingParameterClient = new CHS::SendClient<
				CommNavigationObjects::CommGMappingParameter>(component);
		mapperParameterClient = new CHS::SendClient<
				CommNavigationObjects::CommMapperParameter>(component);
		mapperStateClient = new CHS::SmartStateClient(component);

		plannerEventClient = new CHS::EventClient<
				CommNavigationObjects::CommPlannerEventParameter,
				CommNavigationObjects::CommPlannerEventResult>(component);

		plannerParameterClient = new CHS::SendClient<
				CommNavigationObjects::CommPlannerParameter>(component);
		plannerStateClient = new CHS::SmartStateClient(component);
		ptuQueryClient = new CHS::QueryClient<
				CommPTUObjects::CommPTUMoveRequest,
				CommPTUObjects::CommPTUMoveResponse>(component);
		ptuStateClient = new CHS::SmartStateClient(component);
		speechParameterClient = new CHS::SendClient<
				CommSpeechObjects::CommSpeechInputParameter>(component);
		speechSendClient = new CHS::SendClient<
				CommSpeechObjects::CommSpeechOutputMessage>(component);
		speechStateClient = new CHS::SmartStateClient(component);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void SmartRobotConsole::run()
{
	compHandler.onStartup();
	component->run();
	delete component;
}

void SmartRobotConsole::loadParameter(int argc, char *argv[])
{
	/* 
	 Parameters can be specified via command line -filename=<filename>
	 
	 With this parameter present:
	 - The component will look for the file in the current working directory, 
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found
	 
	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc   
	 */
	CHS::SmartParameter parameter;

	// load parameters
	try
	{
		// check if paramfile is given as argument
		bool paramFile = false;
		std::string str;
		for (int i = 0; i < argc; i++)
		{
			str = argv[i];
			if (str.find("filename") != std::string::npos)
				paramFile = true;
		}

		// if paramfile is given as argument
		if (paramFile == true)
		{
			std::cout << "load parameter file from argv \n";
			parameter.addFile(argc, argv, "filename", false);
		}
		// else load standard paramfile
		else
		{
			std::cout << "load SmartRobotConsole.ini parameter file\n";
			parameter.addFile("SmartRobotConsole.ini");
		}

		// than add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLine("", argc, argv);

		// print all known parameters
		parameter.print(); // TODO remove this


		// load parameter
		parameter.getString("component", "name", ini.component.name);

		parameter.getString("amclParameterClient", "serverName",
				ini.amclParameterClient.serverName);
		parameter.getString("amclParameterClient", "serviceName",
				ini.amclParameterClient.serviceName);
		parameter.getString("amclStateClient", "serverName",
				ini.amclStateClient.serverName);
		parameter.getString("amclStateClient", "serviceName",
				ini.amclStateClient.serviceName);
		parameter.getString("baseParameterClient", "serverName",
				ini.baseParameterClient.serverName);
		parameter.getString("baseParameterClient", "serviceName",
				ini.baseParameterClient.serviceName);
		parameter.getString("cdlGoalEventClient", "serverName",
				ini.cdlGoalEventClient.serverName);
		parameter.getString("cdlGoalEventClient", "serviceName",
				ini.cdlGoalEventClient.serviceName);
		parameter.getString("cdlParameterClient", "serverName",
				ini.cdlParameterClient.serverName);
		parameter.getString("cdlParameterClient", "serviceName",
				ini.cdlParameterClient.serviceName);
		parameter.getString("cdlStateClient", "serverName",
				ini.cdlStateClient.serverName);
		parameter.getString("cdlStateClient", "serviceName",
				ini.cdlStateClient.serviceName);
		parameter.getString("forkliftParameterClient", "serverName",
				ini.forkliftParameterClient.serverName);
		parameter.getString("forkliftParameterClient", "serviceName",
				ini.forkliftParameterClient.serviceName);
		parameter.getString("gmappingParameterClient", "serverName",
				ini.gmappingParameterClient.serverName);
		parameter.getString("gmappingParameterClient", "serviceName",
				ini.gmappingParameterClient.serviceName);
		parameter.getString("mapperParameterClient", "serverName",
				ini.mapperParameterClient.serverName);
		parameter.getString("mapperParameterClient", "serviceName",
				ini.mapperParameterClient.serviceName);
		parameter.getString("mapperStateClient", "serverName",
				ini.mapperStateClient.serverName);
		parameter.getString("mapperStateClient", "serviceName",
				ini.mapperStateClient.serviceName);
		parameter.getString("plannerEventClient", "serverName",
				ini.plannerEventClient.serverName);
		parameter.getString("plannerEventClient", "serviceName",
				ini.plannerEventClient.serviceName);
		parameter.getString("plannerParameterClient", "serverName",
				ini.plannerParameterClient.serverName);
		parameter.getString("plannerParameterClient", "serviceName",
				ini.plannerParameterClient.serviceName);
		parameter.getString("plannerStateClient", "serverName",
				ini.plannerStateClient.serverName);
		parameter.getString("plannerStateClient", "serviceName",
				ini.plannerStateClient.serviceName);
		parameter.getString("ptuQueryClient", "serverName",
				ini.ptuQueryClient.serverName);
		parameter.getString("ptuQueryClient", "serviceName",
				ini.ptuQueryClient.serviceName);
		parameter.getString("ptuStateClient", "serverName",
				ini.ptuStateClient.serverName);
		parameter.getString("ptuStateClient", "serviceName",
				ini.ptuStateClient.serviceName);
		parameter.getString("speechParameterClient", "serverName",
				ini.speechParameterClient.serverName);
		parameter.getString("speechParameterClient", "serviceName",
				ini.speechParameterClient.serviceName);
		parameter.getString("speechSendClient", "serverName",
				ini.speechSendClient.serverName);
		parameter.getString("speechSendClient", "serviceName",
				ini.speechSendClient.serviceName);
		parameter.getString("speechStateClient", "serverName",
				ini.speechStateClient.serverName);
		parameter.getString("speechStateClient", "serviceName",
				ini.speechStateClient.serviceName);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (const CHS::ParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

