//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2008 Christian Schlegel, Andreas Steck, Matthias Lutz
//                2011 Dennis Stampfer
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft robot console component".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------
//  This component is for testing purposes only!
//
// --------------------------------------------------------------------------


#include "CompHandler.hh"
#include "gen/SmartRobotConsole.hh"

#include <iostream>

// include communication objects
#include <CommBasicObjects/commBaseParameter.hh>

#include <CommNavigationObjects/commCdlGoalEventParameter.hh>

#include <CommNavigationObjects/commCdlParameter.hh>

#include <CommNavigationObjects/commMapperParameter.hh>

#include <CommNavigationObjects/commPlannerEventParameter.hh>

#include <CommNavigationObjects/commPlannerEventResult.hh>

#include <CommNavigationObjects/commPlannerParameter.hh>

void CompHandler::onStartup()
{
	std::cout
			<< "startup - put your startupCode in CompHandler::onStartup()!!!\n";

	CHS::StatusCode status;

	// connect to all services
	// done individually in tasks!



#if 0
	std::cout << "connecting to: " << COMP->ini.stateClient.serverName << "; "
			<< COMP->ini.stateClient.serviceName << std::endl;
	status = COMP->stateClient->connect(COMP->ini.stateClient.serverName,
			COMP->ini.stateClient.serviceName);
	while (status != CHS::SMART_OK)
	{
		usleep(500000);
		status = COMP->stateClient->connect(COMP->ini.stateClient.serverName,
				COMP->ini.stateClient.serviceName);
	}
	std::cout << "connected.\n";
#endif

	// run all tasks
	COMP->consoleTask.open();
	// start from demo: COMP->plannerNoPathEventTask.open();
	// start from demo: COMP->goalEventTask.open();

}
