//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2009-2010 Andreas Steck, Matthias Lutz
//
//        lutz@hs-ulm.de
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#include "ParameterHandler.hh"
#include "gen/SmartLaserPersonTracker.hh"

#include <iostream>

void ParameterHandler::handleSend(
		const CommTrackingObjects::CommFollowMeParameter &r) throw()
{
	CommTrackingObjects::FollowMeTagType tag;
    int                  p1,p2,p3,p4,p5;
    double robotX, robotY, robotA;

    r.get(tag,p1,p2,p3,p4,p5);

    switch (tag)
    {
      case CommTrackingObjects::FollowMeTagType::FOLLOW_RESET:
      {
        CommBasicObjects::CommMobileLaserScan scan;
        CHS::StatusCode status;

        // robot position
        status = COMP->laserClient->getUpdate(scan);
        if (status != CHS::SMART_OK)
        {
          std::cout << "blocking wait  status " << CHS::StatusCodeConversion(status) << " not ok => retry ..." << std::endl;
        }
        else
        {
          robotX = scan.get_base_state().get_base_raw_position().get_x(1);
          robotY = scan.get_base_state().get_base_raw_position().get_y(1);
          robotA = scan.get_base_state().get_base_raw_position().get_base_alpha();
          //std::cout<<"Robot POSE: "<<robotX<<" "<<robotY<<" "<<robotA<<std::endl;
          //std::cout<<"Reset POSE: "<<robotX + cos(robotA)*0.8<<robotY + sin(robotA)*0.8<<endl;
          delete COMP->EKF;

          // person is assumed to be in fron of the robot (0.8 meter)
          //EKF = new CRangeBearing(robotX + cos(robotA)*0.8, robotY + sin(robotA)*0.8);

          // offset
          COMP->EKF = new CRangeBearing(robotX + cos(robotA)*p1/1000.0 + sin(robotA)*p2/1000.0, robotY + sin(robotA)*p1/1000.0 + cos(robotA)*p2/1000.0);

          COMP->EKF->KF_options.verbose = false;
          COMP->EKF->KF_options.method = kfEKFAlaDavison;

          std::cout << "RESET KALMAN !!!!!!!!!!!!!!\n\n";
        }
        break;
      } // case FOLLOW_RESET


      case CommTrackingObjects::FollowMeTagType::SET_MAX_COV:
      {
    	  COMP->EKF->setMaxCov(p1/1000.0);
        std::cout << "SETMAXCOV: " << p1 << std::endl;
        break;
      } // case SET_MAX_COV

    } // switch

}
