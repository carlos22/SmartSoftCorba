//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.4
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "SmartLaserPersonTracker.hh"

// constructor
SmartLaserPersonTracker::SmartLaserPersonTracker()
{
	std::cout << "constructor of SmartLaserPersonTracker\n";

	ini.component.name = "SmartLaserPersonTracker";

	ini.parameterServer.serviceName = "param";
	ini.personLostEventServer.serviceName = "personLostEvent";
	ini.stateServer.serviceName = "state";
	ini.trackingDataServer.serviceName = "tracking";
	ini.trackingGoalServer.serviceName = "trackingGoal";
	ini.trackingPersonDataServer.serviceName = "trackingPerson";
	ini.trackingSegmentsDataServer.serviceName = "trackingSegments";
	ini.laserClient.serverName = "SmartLaserLMS200Server";
	ini.laserClient.serviceName = "scan";
	ini.tracking.segmentation_threshold = 200.0;
}

void SmartLaserPersonTracker::init(int argc, char *argv[])
{
	try
	{
		loadParameter(argc, argv);
		component = new CHS::SmartComponent(ini.component.name, argc, argv);

		std::cout << "Component SmartLaserPersonTracker is named "
				<< ini.component.name << "." << std::endl;

		// create ports
		laserClient = new CHS::PushNewestClient<
				CommBasicObjects::CommMobileLaserScan>(component);

		parameterServer = new CHS::SendServer<
				CommTrackingObjects::CommFollowMeParameter>(component,
				ini.parameterServer.serviceName, parameterHandler);

		personLostEventServer = new CHS::EventServer<
				CommTrackingObjects::CommPersonLostEventParameter,
				CommTrackingObjects::CommPersonLostEventResult,
				CommTrackingObjects::PersonLostEventState>(component,
				ini.personLostEventServer.serviceName, personLostEventHandler);
		stateServer = new CHS::SmartStateServer(component,
				ini.stateServer.serviceName, stateHandler);
		// define states for stateServer (CHS::SmartStateServer) 
		if (stateServer->defineStates("follow", "follow") != CHS::SMART_OK)
			std::cerr << "ERROR: define state" << std::endl;
		trackingDataServer = new CHS::PushNewestServer<
				CommTrackingObjects::CommLaserTrackingData>(component,
				ini.trackingDataServer.serviceName);
		trackingGoalServer = new CHS::PushNewestServer<
				CommTrackingObjects::CommTrackingGoal>(component,
				ini.trackingGoalServer.serviceName);
		trackingPersonDataServer = new CHS::PushNewestServer<
				CommTrackingObjects::CommLaserTrackingData>(component,
				ini.trackingPersonDataServer.serviceName);
		trackingSegmentsDataServer = new CHS::PushNewestServer<
				CommTrackingObjects::CommLaserTrackingData>(component,
				ini.trackingSegmentsDataServer.serviceName);
		wiringSlave = new CHS::WiringSlave(component);

		// add client port to wiring slave
		laserClient->add(wiringSlave, "laserClient");

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void SmartLaserPersonTracker::run()
{
	compHandler.onStartup();
	component->run();
	delete component;
}

void SmartLaserPersonTracker::loadParameter(int argc, char *argv[])
{
	/* 
	 Parameters can be specified via command line -filename=<filename>
	 
	 With this parameter present:
	 - The component will look for the file in the current working directory, 
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found
	 
	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc   
	 */
	CHS::SmartParameter parameter;

	// load parameters
	try
	{
		// check if paramfile is given as argument
		bool paramFile = false;
		std::string str;
		for (int i = 0; i < argc; i++)
		{
			str = argv[i];
			if (str.find("filename") != std::string::npos)
				paramFile = true;
		}

		// if paramfile is given as argument
		if (paramFile == true)
		{
			std::cout << "load parameter file from argv \n";
			parameter.addFile(argc, argv, "filename", false);
		}
		// else load standard paramfile
		else
		{
			std::cout << "load SmartLaserPersonTracker.ini parameter file\n";
			parameter.addFile("SmartLaserPersonTracker.ini");
		}

		// than add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLine("", argc, argv);

		// print all known parameters
		parameter.print(); // TODO remove this


		// load parameter
		parameter.getString("component", "name", ini.component.name);

		parameter.getString("parameterServer", "serviceName",
				ini.parameterServer.serviceName);
		parameter.getString("personLostEventServer", "serviceName",
				ini.personLostEventServer.serviceName);
		parameter.getString("stateServer", "serviceName",
				ini.stateServer.serviceName);
		parameter.getString("trackingDataServer", "serviceName",
				ini.trackingDataServer.serviceName);
		parameter.getString("trackingGoalServer", "serviceName",
				ini.trackingGoalServer.serviceName);
		parameter.getString("trackingPersonDataServer", "serviceName",
				ini.trackingPersonDataServer.serviceName);
		parameter.getString("trackingSegmentsDataServer", "serviceName",
				ini.trackingSegmentsDataServer.serviceName);
		parameter.getString("laserClient", "serverName",
				ini.laserClient.serverName);
		parameter.getString("laserClient", "serviceName",
				ini.laserClient.serviceName);
		parameter.getDouble("tracking", "segmentation_threshold",
				ini.tracking.segmentation_threshold);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (const CHS::ParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

