//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.4
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _SMARTLASERPERSONTRACKER_HH
#define _SMARTLASERPERSONTRACKER_HH

#include <iostream>
#include "smartSoft.hh"
#include "../SmartLaserPersonTrackerCore.hh"
// include communication objects
#include <CommBasicObjects/commMobileLaserScan.hh>
#include <CommTrackingObjects/commFollowMeParameter.hh>
#include <CommTrackingObjects/commLaserTrackingData.hh>
#include <CommTrackingObjects/commPersonLostEventParameter.hh>
#include <CommTrackingObjects/commPersonLostEventResult.hh>
#include <CommTrackingObjects/commTrackingGoal.hh>
#include <CommTrackingObjects/personLostEventState.hh>
// include tasks	

#include "../TrackingThread.hh"
// include handler
#include "../CompHandler.hh"
#include "../ParameterHandler.hh"
#include "../PersonLostEventHandler.hh"
#include "../StateHandler.hh"

#define COMP SmartLaserPersonTracker::instance()

class SmartLaserPersonTracker: public SmartLaserPersonTrackerCore
{
private:
	static SmartLaserPersonTracker _smartLaserPersonTracker;

	// constructor
	SmartLaserPersonTracker();

	// copy-constructor
	SmartLaserPersonTracker(const SmartLaserPersonTracker& cc);

	// destructor
	~SmartLaserPersonTracker()
	{
	}
	;

	// load parameter from ini file
	void loadParameter(int argc, char *argv[]);

	// instantiate handler
	CompHandler compHandler;
	ParameterHandler parameterHandler;
	PersonLostEventHandler personLostEventHandler;
	StateHandler stateHandler;

	// ThreadQueueHandler 


public:
	// component
	CHS::SmartComponent *component;

	// create mutex


	// create condition mutex


	// instantiate tasks

	TrackingThread trackingThread;

	// ports
	CHS::PushNewestClient<CommBasicObjects::CommMobileLaserScan> *laserClient;
	CHS::SendServer<CommTrackingObjects::CommFollowMeParameter>
			*parameterServer;
	CHS::EventServer<CommTrackingObjects::CommPersonLostEventParameter,
			CommTrackingObjects::CommPersonLostEventResult,
			CommTrackingObjects::PersonLostEventState> *personLostEventServer;
	CHS::SmartStateServer *stateServer;
	CHS::PushNewestServer<CommTrackingObjects::CommLaserTrackingData>
			*trackingDataServer;
	CHS::PushNewestServer<CommTrackingObjects::CommTrackingGoal>
			*trackingGoalServer;
	CHS::PushNewestServer<CommTrackingObjects::CommLaserTrackingData>
			*trackingPersonDataServer;
	CHS::PushNewestServer<CommTrackingObjects::CommLaserTrackingData>
			*trackingSegmentsDataServer;
	CHS::WiringSlave *wiringSlave;

	void init(int argc, char *argv[]);
	void run();

	// return singleton instance
	static SmartLaserPersonTracker* instance()
	{
		return (SmartLaserPersonTracker*) &_smartLaserPersonTracker;
	}

	// ini parameter
	struct ini_ini
	{

		// component struct
		struct ini_component
		{
			// the name of the component
			std::string name;
		} component;

		struct ini_parameterServer
		{
			std::string serviceName;
		} parameterServer;

		struct ini_personLostEventServer
		{
			std::string serviceName;
		} personLostEventServer;

		struct ini_stateServer
		{
			std::string serviceName;
		} stateServer;

		struct ini_trackingDataServer
		{
			std::string serviceName;
		} trackingDataServer;

		struct ini_trackingGoalServer
		{
			std::string serviceName;
		} trackingGoalServer;

		struct ini_trackingPersonDataServer
		{
			std::string serviceName;
		} trackingPersonDataServer;

		struct ini_trackingSegmentsDataServer
		{
			std::string serviceName;
		} trackingSegmentsDataServer;

		struct ini_laserClient
		{
			std::string serverName;
			std::string serviceName;
		} laserClient;

		struct ini_tracking
		{

			float segmentation_threshold;
		} tracking;
	} ini;

};
#endif
