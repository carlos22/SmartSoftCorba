//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the workflow.
//--------------------------------------------------------------------------

#ifndef _SMARTKATANA_HH
#define _SMARTKATANA_HH

#include <iostream>
#include "smartSoft.hh"
#include "../SmartKatanaCore.hh"
// include communication objects
#include "externalCommObjectHeaders.hh"
#include <commManipulatorEventParameter.hh>

#include <commManipulatorParameter.hh>

#include <commManipulatorTrajectory.hh>

#include <commMobileManipulatorState.hh>

// include tasks	
// include handler
#include "../CompHandler.hh"
#include "../StateChangeHandler.hh"
#include "../ParamHandler.hh"
#include "../TrajectorySendHandler.hh"
#include "../EventTestHandler.hh"
#include "../PosePushTimedHandler.hh"

#define COMP SmartKatana::instance()

class SmartKatana: public SmartKatanaCore
{
private:
	static SmartKatana _smartKatana;

	// constructor
	SmartKatana();

	// copy-constructor
	SmartKatana(const SmartKatana& cc);

	// destructor
	~SmartKatana()
	{
	}
	;

	// load parameter from ini file
	void loadParameter(int argc, char *argv[]);

	// instantiate handler
	CompHandler compHandler;
	StateChangeHandler stateChangeHandler;
	ParamHandler paramHandler;
	TrajectorySendHandler trajectorySendHandler;
	EventTestHandler eventTestHandler;
	PosePushTimedHandler posePushTimedHandler;

	// ThreadQueueHandler 

	CHS::ThreadQueueSendHandler<Smart::CommManipulatorTrajectory>
			*threadTrajectorySendHandler;

public:
	// component
	CHS::SmartComponent *component;

	// create mutex
	CHS::SmartMutex ParameterMutex;
	CHS::SmartMutex KatanaMutex;

	// create condition mutex


	// instantiate tasks

	// ports
	CHS::EventServer<Smart::CommManipulatorEventParameter,
			Smart::CommManipulatorEventResult, Smart::CommManipulatorEventState>
			*eventServer;
	CHS::SmartStateServer *stateServer;
	CHS::PushTimedServer<Smart::CommMobileManipulatorState>
			*posePushTimedServer;
	CHS::SendServer<Smart::CommManipulatorTrajectory> *trajectorySendServer;
	CHS::PushTimedClient<Smart::CommBaseState> *basePushTimedClient;
	CHS::SendServer<Smart::CommManipulatorParameter> *paramServer;

	void init(int argc, char *argv[]);
	void run();

	// return singleton instance
	static SmartKatana* instance()
	{
		return (SmartKatana*) &_smartKatana;
	}

	// ini parameter
	struct
	{

		struct
		{
			std::string serviceName;
		} eventServer;

		struct
		{
			std::string serviceName;
		} paramServer;

		struct
		{
			std::string serviceName;
			double cycle;
		} posePushTimedServer;

		struct
		{
			std::string serviceName;
		} stateServer;

		struct
		{
			std::string serviceName;
		} trajectorySendServer;

		struct
		{
			std::string serverName;
			std::string serviceName;
			long interval;
		} basePushTimedClient;

		struct
		{
			bool BaseInit;
			double GoalAngleApproach;
			double GoalPositionApproach;
			std::string KatanaConfigFile;
			std::string KatanaDevice;
		} Katana;
		struct
		{
			std::string IpAdress;
			unsigned long Port;
		} Network;
		struct
		{
			std::string Device;
		} SerialPort;
	} ini;

};
#endif
