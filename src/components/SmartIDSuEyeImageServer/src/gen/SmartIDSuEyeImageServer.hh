//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.4
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _SMARTIDSUEYEIMAGESERVER_HH
#define _SMARTIDSUEYEIMAGESERVER_HH

#include <iostream>
#include "smartSoft.hh"
#include "../SmartIDSuEyeImageServerCore.hh"
// include communication objects
#include <CommBasicObjects/commBaseState.hh>
#include <CommBasicObjects/commDevicePoseState.hh>
#include <CommBasicObjects/commVoid.hh>
#include <CommManipulatorObjects/commMobileManipulatorState.hh>
#include <CommVisionObjects/commVideoImage.hh>
// include tasks	

#include "../ImageTask.hh"
// include handler
#include "../CompHandler.hh"
#include "../ImagePushTimedHandler.hh"
#include "../ImageQueryHandler.hh"
#include "../StateChangeHandler.hh"

#define COMP SmartIDSuEyeImageServer::instance()

class SmartIDSuEyeImageServer: public SmartIDSuEyeImageServerCore
{
private:
	static SmartIDSuEyeImageServer _smartIDSuEyeImageServer;

	// constructor
	SmartIDSuEyeImageServer();

	// copy-constructor
	SmartIDSuEyeImageServer(const SmartIDSuEyeImageServer& cc);

	// destructor
	~SmartIDSuEyeImageServer()
	{
	}
	;

	// load parameter from ini file
	void loadParameter(int argc, char *argv[]);

	// instantiate handler
	CompHandler compHandler;
	ImagePushTimedHandler imagePushTimedHandler;
	ImageQueryHandler imageQueryHandler;
	StateChangeHandler stateChangeHandler;

	// ThreadQueueHandler 


public:
	// component
	CHS::SmartComponent *component;

	// create mutex
	CHS::SmartMutex NewestImageMutex;

	// create condition mutex


	// instantiate tasks

	ImageTask imageTask;

	// ports
	CHS::PushNewestClient<CommBasicObjects::CommDevicePoseState>
			*actuatorPushTimedClient;
	CHS::PushTimedClient<CommBasicObjects::CommBaseState> *basePushTimedClient;
	CHS::PushNewestServer<CommVisionObjects::CommVideoImage>
			*imagePushNewestServer;
	CHS::PushTimedServer<CommVisionObjects::CommVideoImage>
			*imagePushTimedServer;
	CHS::QueryServer<CommBasicObjects::CommVoid,
			CommVisionObjects::CommVideoImage> *imageQueryServer;
	CHS::PushTimedClient<CommManipulatorObjects::CommMobileManipulatorState>
			*manipulatorPushTimedClient;
	CHS::SmartStateServer *stateServer;

	void init(int argc, char *argv[]);
	void run();

	// return singleton instance
	static SmartIDSuEyeImageServer* instance()
	{
		return (SmartIDSuEyeImageServer*) &_smartIDSuEyeImageServer;
	}

	// ini parameter
	struct ini_ini
	{

		// component struct
		struct ini_component
		{
			// the name of the component
			std::string name;
		} component;

		struct ini_imagePushNewestServer
		{
			std::string serviceName;
		} imagePushNewestServer;

		struct ini_imagePushTimedServer
		{
			std::string serviceName;
			double cycle;
		} imagePushTimedServer;

		struct ini_imageQueryServer
		{
			std::string serviceName;
		} imageQueryServer;

		struct ini_stateServer
		{
			std::string serviceName;
		} stateServer;

		struct ini_actuatorPushTimedClient
		{
			std::string serverName;
			std::string serviceName;
		} actuatorPushTimedClient;

		struct ini_basePushTimedClient
		{
			std::string serverName;
			std::string serviceName;
			long interval;
		} basePushTimedClient;

		struct ini_manipulatorPushTimedClient
		{
			std::string serverName;
			std::string serviceName;
			long interval;
		} manipulatorPushTimedClient;

		struct ini_base
		{

			/**
			 * If on_base = false this represents the base angle of the robot. [mm] Default = 0
			 */
			double base_a;

			/**
			 * Flag which indicates if the camera is on an actuator. Default = false
			 */
			bool on_actuator;

			/**
			 * Flag which indicates if the camera is on a robot. Default = true
			 */
			bool on_base;

			bool on_manipulator;

			/**
			 * If on_base = false this represents the steering angle of the robot. [mm] Default = 0
			 */
			double steer_a;

			/**
			 * If on_base = false this represents the turret angle of the robot. [mm] Default = 0
			 */
			double turret_a;

			/**
			 * If on_base = false this represents the x position of the robot. [mm] Default = 0
			 */
			long x;

			/**
			 * If on_base = false this represents the y position of the robot. [mm] Default = 0
			 */
			long y;

			/**
			 * If on_base = false this represents the z position of the robot. [mm] Default = 0
			 */
			long z;
		} base;

		struct ini_hardware
		{

			/**
			 * 0: The first available camera will be initialized .
			 * 1-254: The camera with the specified camera ID will be initialized.
			 */
			long camera_id;

			/**
			 * You can either pass an absolute or a relative path. 
			 * For the internal camera parameter sets, these would be
			 * "/cam/set1", "/cam/set2"
			 */
			std::string parameter_file;
		} hardware;

		struct ini_hardware_properties
		{

			double distortionK1;

			double distortionK2;

			double distortionK3;

			double distortionP1;

			double distortionP2;

			double intrinsicCx;

			double intrinsicCy;

			double intrinsicFx;

			double intrinsicFy;
		} hardware_properties;

		struct ini_sensor_pose
		{

			/**
			 * The azimuth angle of the camera on the robot/actuator. [rad] Default = 0
			 */
			double azimuth;

			/**
			 * The elevation angle of the camera on the robot/actuator. [rad] Default = 0
			 */
			double elevation;

			/**
			 * The roll angle of the camera on the robot/actuator. [rad] Default = 0
			 */
			double roll;

			/**
			 * The x position of the camera on the robot/actuator. [mm] Default = 0
			 */
			long x;

			/**
			 * The y position of the camera on the robot/actuator. [mm] Default = 0
			 */
			long y;

			/**
			 * The z position of the camera on the robot/actuator. [mm] Default = 0
			 */
			long z;
		} sensor_pose;

		struct ini_settings
		{

			/**
			 * activate or deactivate the output of debug informaton.
			 */
			bool debug_info;

			bool undistort_image;
		} settings;
	} ini;

};
#endif
