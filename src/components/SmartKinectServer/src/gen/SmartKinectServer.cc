//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.4
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "SmartKinectServer.hh"

// constructor
SmartKinectServer::SmartKinectServer() :
	ImageTaskCondMutex(ImageTaskMutex)
{
	std::cout << "constructor of SmartKinectServer\n";

	ini.component.name = "SmartKinectServer";

	ini.colorImagePushNewestServer.serviceName = "colorImageNewest";
	ini.colorImagePushTimedServer.serviceName = "colorImageTimed";
	ini.colorImagePushTimedServer.cycle = 0.5;
	ini.colorImageQueryServer.serviceName = "colorImageQuery";
	ini.imagePushNewestServer.serviceName = "imageNewest";
	ini.imageQueryServer.serviceName = "imageQuery";
	ini.stateServer.serviceName = "state";
	ini.basePushTimedClient.serverName = "SmartPioneerBaseServer";
	ini.basePushTimedClient.serviceName = "basestate";
	ini.basePushTimedClient.interval = 1;
	ini.ptuPosePushNewestClient.serverName = "SmartPTUServer";
	ini.ptuPosePushNewestClient.serviceName = "devicePoseState";
	ini.base.base_a = 0;
	ini.base.on_base = true;
	ini.base.on_ptu = true;
	ini.base.steer_a = 0;
	ini.base.turret_a = 0;
	ini.base.x = 0;
	ini.base.y = 0;
	ini.base.z = 0;
	ini.hardware_properties.colorDistortionK1 = 1.406372e-01;
	ini.hardware_properties.colorDistortionK2 = -2.137613e-01;
	ini.hardware_properties.colorDistortionK3 = 0;
	ini.hardware_properties.colorDistortionP1 = 6.352749e-04;
	ini.hardware_properties.colorDistortionP2 = 3.400957e-03;
	ini.hardware_properties.colorIntrinsicCx = 6.383035e+02;
	ini.hardware_properties.colorIntrinsicCy = 5.456973e+02;
	ini.hardware_properties.colorIntrinsicFx = 1.087641e+03;
	ini.hardware_properties.colorIntrinsicFy = 1.093983e+03;
	ini.hardware_properties.distIntrinsicCx = 0;
	ini.hardware_properties.distIntrinsicCy = 0;
	ini.hardware_properties.distIntrinsicFx = 0;
	ini.hardware_properties.distIntrinsicFy = 0;
	ini.hardware_properties.max_distance = 8000;
	ini.hardware_properties.min_distance = 200;
	ini.sensor_pose.azimuth = 1.5707963;
	ini.sensor_pose.elevation = 3.14159265;
	ini.sensor_pose.roll = 1.5707963;
	ini.sensor_pose.x = 21;
	ini.sensor_pose.y = -7;
	ini.sensor_pose.z = 85;
	ini.settings.debug_info = true;
	ini.settings.valid_image_time = 1.0;
}

void SmartKinectServer::init(int argc, char *argv[])
{
	try
	{
		loadParameter(argc, argv);
		component = new CHS::SmartComponent(ini.component.name, argc, argv);

		std::cout << "Component SmartKinectServer is named "
				<< ini.component.name << "." << std::endl;

		// create ports
		basePushTimedClient = new CHS::PushTimedClient<
				CommBasicObjects::CommBaseState>(component);
		colorImagePushNewestServer = new CHS::PushNewestServer<
				CommVisionObjects::CommVideoImage>(component,
				ini.colorImagePushNewestServer.serviceName);
		colorImagePushTimedServer
				= new CHS::PushTimedServer<CommVisionObjects::CommVideoImage>(
						component, ini.colorImagePushTimedServer.serviceName,
						colorImagePushTimedHandler,
						ini.colorImagePushTimedServer.cycle);

		colorImageQueryServer = new CHS::QueryServer<
				CommBasicObjects::CommVoid, CommVisionObjects::CommVideoImage>(
				component, ini.colorImageQueryServer.serviceName,
				colorImageQueryHandler);

		imagePushNewestServer = new CHS::PushNewestServer<
				CommVisionObjects::CommKinectImage>(component,
				ini.imagePushNewestServer.serviceName);
		imageQueryServer = new CHS::QueryServer<CommBasicObjects::CommVoid,
				CommVisionObjects::CommKinectImage>(component,
				ini.imageQueryServer.serviceName, imageQueryHandler);

		ptuPosePushNewestClient = new CHS::PushNewestClient<
				CommBasicObjects::CommDevicePoseState>(component);
		stateServer = new CHS::SmartStateServer(component,
				ini.stateServer.serviceName, stateChangeHandler);
		// define states for stateServer (CHS::SmartStateServer) 
		if (stateServer->defineStates("pushimage", "queryonly")
				!= CHS::SMART_OK)
			std::cerr << "ERROR: define state" << std::endl;
		if (stateServer->defineStates("pushimage", "pushimage")
				!= CHS::SMART_OK)
			std::cerr << "ERROR: define state" << std::endl;
		if (stateServer->defineStates("queryonly", "queryonly")
				!= CHS::SMART_OK)
			std::cerr << "ERROR: define state" << std::endl;
		wiringSlave = new CHS::WiringSlave(component);

		// add client port to wiring slave
		basePushTimedClient->add(wiringSlave, "basePushTimedClient");
		ptuPosePushNewestClient->add(wiringSlave, "ptuPosePushNewestClient");

		// create timer
		double fractpart, intpart;
		// setup imageTaskTimer
		fractpart = modf(0.25, &intpart);
		component->getTimerThread().scheduleTimer(imageTaskTimer, (void*) 0,
				ACE_Time_Value(0, 0), ACE_Time_Value(intpart, (int) (fractpart
						* 1000* 1000 )));

	}
	catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	}
	catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void SmartKinectServer::run()
{
	compHandler.onStartup();
	component->run();
	delete component;
}

void SmartKinectServer::loadParameter(int argc, char *argv[])
{
	/* 
	 Parameters can be specified via command line -filename=<filename>
	 
	 With this parameter present:
	 - The component will look for the file in the current working directory, 
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found
	 
	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc   
	 */
	CHS::SmartParameter parameter;

	// load parameters
	try
	{
		// check if paramfile is given as argument
		bool paramFile = false;
		std::string str;
		for (int i = 0; i < argc; i++)
		{
			str = argv[i];
			if (str.find("filename") != std::string::npos)
				paramFile = true;
		}

		// if paramfile is given as argument
		if (paramFile == true)
		{
			std::cout << "load parameter file from argv \n";
			parameter.addFile(argc, argv, "filename", false);
		}
		// else load standard paramfile
		else
		{
			std::cout << "load SmartKinectServer.ini parameter file\n";
			parameter.addFile("SmartKinectServer.ini");
		}

		// than add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLine("", argc, argv);

		// print all known parameters
		parameter.print(); // TODO remove this


		// load parameter
		parameter.getString("component", "name", ini.component.name);

		parameter.getString("colorImagePushNewestServer", "serviceName",
				ini.colorImagePushNewestServer.serviceName);
		parameter.getString("colorImagePushTimedServer", "serviceName",
				ini.colorImagePushTimedServer.serviceName);
		parameter.getDouble("colorImagePushTimedServer", "cycle",
				ini.colorImagePushTimedServer.cycle);
		parameter.getString("colorImageQueryServer", "serviceName",
				ini.colorImageQueryServer.serviceName);
		parameter.getString("imagePushNewestServer", "serviceName",
				ini.imagePushNewestServer.serviceName);
		parameter.getString("imageQueryServer", "serviceName",
				ini.imageQueryServer.serviceName);
		parameter.getString("stateServer", "serviceName",
				ini.stateServer.serviceName);
		parameter.getString("basePushTimedClient", "serverName",
				ini.basePushTimedClient.serverName);
		parameter.getString("basePushTimedClient", "serviceName",
				ini.basePushTimedClient.serviceName);
		parameter.getInt("basePushTimedClient", "interval",
				ini.basePushTimedClient.interval);
		parameter.getString("ptuPosePushNewestClient", "serverName",
				ini.ptuPosePushNewestClient.serverName);
		parameter.getString("ptuPosePushNewestClient", "serviceName",
				ini.ptuPosePushNewestClient.serviceName);
		parameter.getDouble("base", "base_a", ini.base.base_a);
		parameter.getTruthValue("base", "on_base", ini.base.on_base);
		parameter.getTruthValue("base", "on_ptu", ini.base.on_ptu);
		parameter.getDouble("base", "steer_a", ini.base.steer_a);
		parameter.getDouble("base", "turret_a", ini.base.turret_a);
		parameter.getInt("base", "x", ini.base.x);
		parameter.getInt("base", "y", ini.base.y);
		parameter.getInt("base", "z", ini.base.z);
		parameter.getDouble("hardware_properties", "colorDistortionK1",
				ini.hardware_properties.colorDistortionK1);
		parameter.getDouble("hardware_properties", "colorDistortionK2",
				ini.hardware_properties.colorDistortionK2);
		parameter.getDouble("hardware_properties", "colorDistortionK3",
				ini.hardware_properties.colorDistortionK3);
		parameter.getDouble("hardware_properties", "colorDistortionP1",
				ini.hardware_properties.colorDistortionP1);
		parameter.getDouble("hardware_properties", "colorDistortionP2",
				ini.hardware_properties.colorDistortionP2);
		parameter.getDouble("hardware_properties", "colorIntrinsicCx",
				ini.hardware_properties.colorIntrinsicCx);
		parameter.getDouble("hardware_properties", "colorIntrinsicCy",
				ini.hardware_properties.colorIntrinsicCy);
		parameter.getDouble("hardware_properties", "colorIntrinsicFx",
				ini.hardware_properties.colorIntrinsicFx);
		parameter.getDouble("hardware_properties", "colorIntrinsicFy",
				ini.hardware_properties.colorIntrinsicFy);
		parameter.getDouble("hardware_properties", "distIntrinsicCx",
				ini.hardware_properties.distIntrinsicCx);
		parameter.getDouble("hardware_properties", "distIntrinsicCy",
				ini.hardware_properties.distIntrinsicCy);
		parameter.getDouble("hardware_properties", "distIntrinsicFx",
				ini.hardware_properties.distIntrinsicFx);
		parameter.getDouble("hardware_properties", "distIntrinsicFy",
				ini.hardware_properties.distIntrinsicFy);
		parameter.getDouble("hardware_properties", "max_distance",
				ini.hardware_properties.max_distance);
		parameter.getDouble("hardware_properties", "min_distance",
				ini.hardware_properties.min_distance);
		parameter.getDouble("sensor_pose", "azimuth", ini.sensor_pose.azimuth);
		parameter.getDouble("sensor_pose", "elevation",
				ini.sensor_pose.elevation);
		parameter.getDouble("sensor_pose", "roll", ini.sensor_pose.roll);
		parameter.getDouble("sensor_pose", "x", ini.sensor_pose.x);
		parameter.getDouble("sensor_pose", "y", ini.sensor_pose.y);
		parameter.getDouble("sensor_pose", "z", ini.sensor_pose.z);
		parameter.getTruthValue("settings", "debug_info",
				ini.settings.debug_info);
		parameter.getDouble("settings", "valid_image_time",
				ini.settings.valid_image_time);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (const CHS::ParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

