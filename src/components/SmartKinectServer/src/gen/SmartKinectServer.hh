//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.4
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _SMARTKINECTSERVER_HH
#define _SMARTKINECTSERVER_HH

#include <iostream>
#include "smartSoft.hh"
#include "../SmartKinectServerCore.hh"
// include communication objects
#include <CommBasicObjects/commBaseState.hh>
#include <CommBasicObjects/commDevicePoseState.hh>
#include <CommBasicObjects/commVoid.hh>
#include <CommVisionObjects/commKinectImage.hh>
#include <CommVisionObjects/commVideoImage.hh>
// include tasks	

#include "../ImageTask.hh"
// include handler
#include "../CompHandler.hh"
#include "../ColorImagePushTimedHandler.hh"
#include "../ColorImageQueryHandler.hh"
#include "../ImageQueryHandler.hh"
#include "ImageTaskTimer.hh"
#include "../StateChangeHandler.hh"

#define COMP SmartKinectServer::instance()

class SmartKinectServer: public SmartKinectServerCore
{
private:
	static SmartKinectServer _smartKinectServer;

	// constructor
	SmartKinectServer();

	// copy-constructor
	SmartKinectServer(const SmartKinectServer& cc);

	// destructor
	~SmartKinectServer()
	{
	}
	;

	// load parameter from ini file
	void loadParameter(int argc, char *argv[]);

	// instantiate handler
	CompHandler compHandler;
	ColorImagePushTimedHandler colorImagePushTimedHandler;
	ColorImageQueryHandler colorImageQueryHandler;
	ImageQueryHandler imageQueryHandler;
	ImageTaskTimer imageTaskTimer;
	StateChangeHandler stateChangeHandler;

	// ThreadQueueHandler 


public:
	// component
	CHS::SmartComponent *component;

	// create mutex
	CHS::SmartMutex ImageTaskMutex;
	CHS::SmartMutex NewestImageMutex;

	// create condition mutex
	CHS::SmartConditionMutex ImageTaskCondMutex;//(ImageTaskMutex);


	// instantiate tasks

	ImageTask imageTask;

	// ports
	CHS::PushTimedClient<CommBasicObjects::CommBaseState> *basePushTimedClient;
	CHS::PushNewestServer<CommVisionObjects::CommVideoImage>
			*colorImagePushNewestServer;
	CHS::PushTimedServer<CommVisionObjects::CommVideoImage>
			*colorImagePushTimedServer;
	CHS::QueryServer<CommBasicObjects::CommVoid,
			CommVisionObjects::CommVideoImage> *colorImageQueryServer;
	CHS::PushNewestServer<CommVisionObjects::CommKinectImage>
			*imagePushNewestServer;
	CHS::QueryServer<CommBasicObjects::CommVoid,
			CommVisionObjects::CommKinectImage> *imageQueryServer;
	CHS::PushNewestClient<CommBasicObjects::CommDevicePoseState>
			*ptuPosePushNewestClient;
	CHS::SmartStateServer *stateServer;
	CHS::WiringSlave *wiringSlave;

	void init(int argc, char *argv[]);
	void run();

	// return singleton instance
	static SmartKinectServer* instance()
	{
		return (SmartKinectServer*) &_smartKinectServer;
	}

	// ini parameter
	struct ini_ini
	{

		// component struct
		struct ini_component
		{
			// the name of the component
			std::string name;
		} component;

		struct ini_colorImagePushNewestServer
		{
			std::string serviceName;
		} colorImagePushNewestServer;

		struct ini_colorImagePushTimedServer
		{
			std::string serviceName;
			double cycle;
		} colorImagePushTimedServer;

		struct ini_colorImageQueryServer
		{
			std::string serviceName;
		} colorImageQueryServer;

		struct ini_imagePushNewestServer
		{
			std::string serviceName;
		} imagePushNewestServer;

		struct ini_imageQueryServer
		{
			std::string serviceName;
		} imageQueryServer;

		struct ini_stateServer
		{
			std::string serviceName;
		} stateServer;

		struct ini_basePushTimedClient
		{
			std::string serverName;
			std::string serviceName;
			long interval;
		} basePushTimedClient;

		struct ini_ptuPosePushNewestClient
		{
			std::string serverName;
			std::string serviceName;
		} ptuPosePushNewestClient;

		struct ini_base
		{

			double base_a;

			bool on_base;

			bool on_ptu;

			double steer_a;

			double turret_a;

			long x;

			long y;

			long z;
		} base;

		struct ini_hardware_properties
		{

			double colorDistortionK1;

			double colorDistortionK2;

			double colorDistortionK3;

			double colorDistortionP1;

			double colorDistortionP2;

			double colorIntrinsicCx;

			double colorIntrinsicCy;

			double colorIntrinsicFx;

			double colorIntrinsicFy;

			/**
			 * Dist intrinsic. ATTENTION: this is unused yet! We receive them from MRPT!
			 */
			double distIntrinsicCx;

			/**
			 * Dist intrinsic. ATTENTION: this is unused yet! We receive them from MRPT!
			 */
			double distIntrinsicCy;

			/**
			 * Dist intrinsic. ATTENTION: this is unused yet! We receive them from MRPT!
			 */
			double distIntrinsicFx;

			/**
			 * Dist intrinsic. ATTENTION: this is unused yet! We receive them from MRPT!
			 */
			double distIntrinsicFy;

			double max_distance;

			double min_distance;
		} hardware_properties;

		/**
		 * How sensor is mounted relative to robot or ptu
		 */
		struct ini_sensor_pose
		{

			double azimuth;

			double elevation;

			double roll;

			double x;

			double y;

			double z;
		} sensor_pose;

		struct ini_settings
		{

			bool debug_info;

			double valid_image_time;
		} settings;
	} ini;

};
#endif
