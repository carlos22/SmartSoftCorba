//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

#include "ImageQueryHandler.hh"
#include "gen/SmartKinectServer.hh"

#include <iostream>

void ImageQueryHandler::handleQuery(
		CHS::QueryServer<CommBasicObjects::CommVoid,
				CommVisionObjects::CommKinectImage> & server,
		const CHS::QueryId id, const CommBasicObjects::CommVoid & request) throw ()
{
	std::cout<<"Query Request received.."<<std::endl;

	CHS::StatusCode status;
	CommVisionObjects::CommKinectImage answer;
	//(COMP->ini.hardware_properties.width,COMP->ini.hardware_properties.height);
	answer.set_data_valid(false);

	///////////////////
	// Component Active then get new image
		status = COMP->stateServer->tryAcquire("nonneutral");
		if(status == CHS::SMART_OK)
		{

			// If Newest and Timed active get image from global Reference otherwise get it directly from Unicap
			if (COMP->stateServer->tryAcquire("pushimage")==CHS::SMART_OK)
			{
				if (COMP->ini.settings.debug_info) {
								std::cout << "Push image mode"<<std::endl;
				}

					COMP->NewestImageMutex.acquire();
					if(COMP->newestImage != NULL){
						answer = *(COMP->newestImage);
					}
					COMP->NewestImageMutex.release();

				COMP->stateServer->release("pushimage");
			}
			else
			{

				if (COMP->ini.settings.debug_info) {
						std::cout << "Query only mode"<<std::endl;
				}

				//////////////////////

				CommBasicObjects::CommBasePosition default_base_position;
				default_base_position.set_x(COMP->ini.base.x);
				default_base_position.set_y(COMP->ini.base.y);
				default_base_position.set_z(COMP->ini.base.z);
				default_base_position.set_base_alpha(COMP->ini.base.base_a);
				default_base_position.set_steer_alpha(COMP->ini.base.steer_a);
				default_base_position.set_turret_alpha(COMP->ini.base.turret_a);

				CommBasicObjects::CommBaseVelocity zero_velocity;
				zero_velocity.set_v(0);
				zero_velocity.set_omega_base(0);
				zero_velocity.set_omega_steer(0);
				zero_velocity.set_omega_turret(0);


				{
				// get newest image from Kinect
				CHS::SmartGuard guard(COMP->kinectMutex);
				COMP->device->getImage(answer);
				guard.release();
				}

				answer.set_min_distance(COMP->ini.hardware_properties.min_distance);
				answer.set_max_distance(COMP->ini.hardware_properties.max_distance);

				arma::mat sensorMat;
				EulerTransformationMatrices::create_zyx_matrix(COMP->ini.sensor_pose.x, COMP->ini.sensor_pose.y,
						COMP->ini.sensor_pose.z, COMP->ini.sensor_pose.azimuth, COMP->ini.sensor_pose.elevation,
						COMP->ini.sensor_pose.roll, sensorMat);

				// set base state
				CommBasicObjects::CommBaseState base_state;
				//std::cout<<__FILE__<<__LINE__<<std::endl;

				//////////////
				if (COMP->ini.base.on_ptu) {
					CommBasicObjects::CommDevicePoseState devicePoseState;
					CHS::StatusCode status = COMP->ptuPosePushNewestClient->getUpdate(devicePoseState);

					base_state = devicePoseState.get_base_state();
					CommBasicObjects::CommPose3d ptuPose = devicePoseState.get_device_pose3d_robot();
					arma::mat ptuMat = ptuPose.getHomogeneousMatrix();

					sensorMat = ptuMat * sensorMat;

					if (status != CHS::SMART_OK) {
						std::cerr << "[Image Task] WARNING: failed to get current ptu device state ("
						<< CHS::StatusCodeConversion(status) << "), pushing invalid image" << std::endl;
						answer.set_data_valid(false);
					}
				}
				//////////////


				//std::cout<<__FILE__<<__LINE__<<std::endl;
				// read base state from base server
				if (COMP->ini.base.on_base) {
					CHS::StatusCode status = COMP->basePushTimedClient->getUpdate(base_state);

					if (status != CHS::SMART_OK) {
						std::cerr << "[Image Task] WARNING: failed to get current base state ("
						<< CHS::StatusCodeConversion(status) << "), pushing invalid image" << std::endl;
						answer.set_data_valid(false);
					}
				}
				// default base state
				else {
					base_state.set_time_stamp(CommBasicObjects::CommTimeStamp::now());
					base_state.set_base_position(default_base_position);
					base_state.set_base_velocity(zero_velocity);
				}
				CommBasicObjects::CommPose3d sensorPose(sensorMat);
				answer.set_sensor_pose(sensorPose);
				answer.set_base_state(base_state);


				///////////////////////
			}
			COMP->stateServer->release("nonneutral");
		}
		else
		{
			answer.set_data_valid(false);
			if (COMP->ini.settings.debug_info) {
				    std::cout << "Query: StatusCode: "<<CHS::StatusCodeConversion(status)<<std::endl;
					std::cout << "Query: Set Data invalid!"<< std::endl;

			}

		}

		server.answer(id, answer);
		if (COMP->ini.settings.debug_info) {
			std::cout << "Query: Answer sent: "<<answer.is_data_valid()<<" with ID: " << id << std::endl;
		}



	//////////////////

}
