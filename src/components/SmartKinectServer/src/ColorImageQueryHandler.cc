//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.3
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2011 Matthias Lutz, Dennis Stampfer
//
//        lutz@hs-ulm.de
//        stampfer@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Mapper/GridMapper component".
//  It provides mapping services based on grid maps. The current map
//  represents the latest snapshot of the local surrounding based on
//  laserscans. The current map can be preoccupied by the longterm map.
//  The longterm map is a simple occupancy grid map.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------


#include "ColorImageQueryHandler.hh"
#include "gen/SmartKinectServer.hh"

#include <iostream>

void ColorImageQueryHandler::handleQuery(
		CHS::QueryServer<CommBasicObjects::CommVoid,
				CommVisionObjects::CommVideoImage> & server,
		const CHS::QueryId id, const CommBasicObjects::CommVoid & request) throw ()
{
	std::cout<<"Query Request ColorImage received.."<<std::endl;

	CHS::StatusCode status;
	CommVisionObjects::CommVideoImage answer;

	//(COMP->ini.hardware_properties.width,COMP->ini.hardware_properties.height);
	answer.set_data_invalid();

	///////////////////
	// Component Active then get new image
	status = COMP->stateServer->tryAcquire("nonneutral");
	if(status == CHS::SMART_OK)
	{

		// If Newest and Timed active get image from global Reference otherwise get it directly from Unicap
		if (COMP->stateServer->tryAcquire("pushimage")==CHS::SMART_OK)
		{
			if (COMP->ini.settings.debug_info) {
				std::cout << "Push image mode"<<std::endl;
			}

			COMP->NewestImageMutex.acquire();
			if(COMP->newestImage != NULL){
				answer.set_parameters(COMP->newestImage->get_rgb_width(),COMP->newestImage->get_rgb_height(), CommVisionObjects::FormatType::RGB24);
				answer.set_data(COMP->newestImage->get_rgb_image());
				answer.set_sequence_counter(COMP->newestImage->get_sequence_counter());
			}
			COMP->NewestImageMutex.release();

			COMP->stateServer->release("pushimage");
		}
		else
		{

			if (COMP->ini.settings.debug_info) {
				std::cout << "Query only mode"<<std::endl;
			}

			//////////////////////
			CommBasicObjects::CommBasePosition default_base_position;
			default_base_position.set_x(COMP->ini.base.x);
			default_base_position.set_y(COMP->ini.base.y);
			default_base_position.set_z(COMP->ini.base.z);
			default_base_position.set_base_alpha(COMP->ini.base.base_a);
			default_base_position.set_steer_alpha(COMP->ini.base.steer_a);
			default_base_position.set_turret_alpha(COMP->ini.base.turret_a);

			CommBasicObjects::CommBaseVelocity zero_velocity;
			zero_velocity.set_v(0);
			zero_velocity.set_omega_base(0);
			zero_velocity.set_omega_steer(0);
			zero_velocity.set_omega_turret(0);

			CommVisionObjects::CommKinectImage answer_kinect;

			{
			// get newest image from Kinect
			CHS::SmartGuard guard(COMP->kinectMutex);
			COMP->device->getImage(answer_kinect);
			guard.release();
			}

			answer_kinect.set_min_distance(COMP->ini.hardware_properties.min_distance);
			answer_kinect.set_max_distance(COMP->ini.hardware_properties.max_distance);

					arma::mat sensorMat;
					EulerTransformationMatrices::create_zyx_matrix(COMP->ini.sensor_pose.x, COMP->ini.sensor_pose.y,
							COMP->ini.sensor_pose.z, COMP->ini.sensor_pose.azimuth, COMP->ini.sensor_pose.elevation,
							COMP->ini.sensor_pose.roll, sensorMat);

					// set base state
					CommBasicObjects::CommBaseState base_state;
					//std::cout<<__FILE__<<__LINE__<<std::endl;

					//////////////
					if (COMP->ini.base.on_ptu) {
						CommBasicObjects::CommDevicePoseState devicePoseState;
						CHS::StatusCode status = COMP->ptuPosePushNewestClient->getUpdate(devicePoseState);

						base_state = devicePoseState.get_base_state();
						CommBasicObjects::CommPose3d ptuPose = devicePoseState.get_device_pose3d_robot();
						arma::mat ptuMat = ptuPose.getHomogeneousMatrix();

						sensorMat = ptuMat * sensorMat;

						if (status != CHS::SMART_OK) {
							std::cerr << "[Image Task] WARNING: failed to get current ptu device state ("
							<< CHS::StatusCodeConversion(status) << "), pushing invalid image" << std::endl;
							answer.set_data_invalid();
						}
					}
					//////////////


					//std::cout<<__FILE__<<__LINE__<<std::endl;
					// read base state from base server
					if (COMP->ini.base.on_base) {
						CHS::StatusCode status = COMP->basePushTimedClient->getUpdate(base_state);

						if (status != CHS::SMART_OK) {
							std::cerr << "[Image Task] WARNING: failed to get current base state ("
							<< CHS::StatusCodeConversion(status) << "), pushing invalid image" << std::endl;
							answer.set_data_invalid();
						}
					}
					// default base state
					else {
						base_state.set_time_stamp(CommBasicObjects::CommTimeStamp::now());
						base_state.set_base_position(default_base_position);
						base_state.set_base_velocity(zero_velocity);
					}
					CommBasicObjects::CommPose3d sensorPose(sensorMat);
					answer_kinect.set_sensor_pose(sensorPose);
					answer_kinect.set_base_state(base_state);

					answer.set_parameters(answer_kinect.get_rgb_width(),answer_kinect.get_rgb_height(), CommVisionObjects::FormatType::RGB24);
					answer.set_data(answer_kinect.get_rgb_image());
					answer.set_sequence_counter(answer_kinect.get_sequence_counter());

					///////////////////////
				}
				COMP->stateServer->release("nonneutral");
			}
			else
			{
				answer.set_data_invalid();
				if (COMP->ini.settings.debug_info) {
					    std::cout << "Query: StatusCode: "<<CHS::StatusCodeConversion(status)<<std::endl;
						std::cout << "Query: Set Data invalid!"<< std::endl;

				}

			}

			server.answer(id, answer);
			if (COMP->ini.settings.debug_info) {
				std::cout << "Query: Answer sent: "<<answer.is_data_valid()<<" with ID: " << id << std::endl;
			}


		//////////////////
}
