//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.8.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

#include "CompHandler.hh"
#include "gen/SmartKinectServer.hh"

#include <iostream>

// include communication objects
#include "externalCommObjectHeaders.hh"
#include <CommKinectObjects/commKinectImage.hh>

#include <CommKinectObjects/commKinectParameter.hh>

#include <CommKinectObjects/commMutableKinectImage.hh>

void CompHandler::onStartup() {
	std::cout << "startup - put your startupCode in CompHandler::onStartup()!!!\n";

	CHS::StatusCode status;

	// connect to all services
	if (COMP->ini.base.on_base) {
		std::cout << "connecting to: " << COMP->ini.basePushTimedClient.serverName << "; "
				<< COMP->ini.basePushTimedClient.serviceName << std::endl;
		status = COMP->basePushTimedClient->connect(COMP->ini.basePushTimedClient.serverName,
				COMP->ini.basePushTimedClient.serviceName);
		while (status != CHS::SMART_OK) {
			usleep(500000);
			status = COMP->basePushTimedClient->connect(COMP->ini.basePushTimedClient.serverName,
					COMP->ini.basePushTimedClient.serviceName);
		}
		std::cout << "connected.\n";

		COMP->basePushTimedClient->subscribe(COMP->ini.basePushTimedClient.interval);
	}

	// activate state server
	if (COMP->stateServer->activate() != CHS::SMART_OK)
		std::cerr << "ERROR: activate state" << std::endl;

	// run all tasks
	COMP->imageTask.open();

}
