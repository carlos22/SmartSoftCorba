//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _SMARTUNICAPIMAGESERVER_HH
#define _SMARTUNICAPIMAGESERVER_HH

#include <iostream>
#include "smartSoft.hh"
#include "../SmartUnicapImageServerCore.hh"
// include communication objects
#include <CommBasicObjects/commBaseState.hh>

#include <CommBasicObjects/commDevicePoseState.hh>

#include <CommBasicObjects/commVoid.hh>

#include <CommVisionObjects/commVideoImage.hh>

// include tasks	

#include "../ImageTask.hh"
// include handler
#include "../CompHandler.hh"
#include "../ImagePushTimedHandler.hh"
#include "../ImageQueryHandler.hh"
#include "../StateChangeHandler.hh"

#define COMP SmartUnicapImageServer::instance()

class SmartUnicapImageServer: public SmartUnicapImageServerCore
{
private:
	static SmartUnicapImageServer _smartUnicapImageServer;

	// constructor
	SmartUnicapImageServer();

	// copy-constructor
	SmartUnicapImageServer(const SmartUnicapImageServer& cc);

	// destructor
	~SmartUnicapImageServer()
	{
	}
	;

	// load parameter from ini file
	void loadParameter(int argc, char *argv[]);

	// instantiate handler
	CompHandler compHandler;
	ImagePushTimedHandler imagePushTimedHandler;
	ImageQueryHandler imageQueryHandler;
	StateChangeHandler stateChangeHandler;

	// ThreadQueueHandler 


public:
	// component
	CHS::SmartComponent *component;

	// create mutex
	CHS::SmartMutex NewestImageMutex;

	// create condition mutex


	// instantiate tasks

	ImageTask imageTask;

	// ports
	CHS::PushTimedClient<CommBasicObjects::CommBaseState> *basePushTimedClient;
	CHS::PushNewestServer<CommVisionObjects::CommVideoImage>
			*imagePushNewestServer;
	CHS::PushTimedServer<CommVisionObjects::CommVideoImage>
			*imagePushTimedServer;
	CHS::QueryServer<CommBasicObjects::CommVoid,
			CommVisionObjects::CommVideoImage> *imageQueryServer;
	CHS::PushNewestClient<CommBasicObjects::CommDevicePoseState>
			*ptuPushTimedClient;
	CHS::SmartStateServer *stateServer;

	void init(int argc, char *argv[]);
	void run();

	// return singleton instance
	static SmartUnicapImageServer* instance()
	{
		return (SmartUnicapImageServer*) &_smartUnicapImageServer;
	}

	// ini parameter
	struct ini_ini
	{

		// component struct
		struct ini_component
		{
			// the name of the component
			std::string name;
		} component;

		struct ini_imagePushNewestServer
		{
			std::string serviceName;
		} imagePushNewestServer;

		struct ini_imagePushTimedServer
		{
			std::string serviceName;
			double cycle;
		} imagePushTimedServer;

		struct ini_imageQueryServer
		{
			std::string serviceName;
		} imageQueryServer;

		struct ini_stateServer
		{
			std::string serviceName;
		} stateServer;

		struct ini_basePushTimedClient
		{
			std::string serverName;
			std::string serviceName;
			long interval;
		} basePushTimedClient;

		struct ini_ptuPushTimedClient
		{
			std::string serverName;
			std::string serviceName;
		} ptuPushTimedClient;

		struct ini_base
		{

			double base_a;

			bool on_base;

			bool on_ptu;

			double steer_a;

			double turret_a;

			long x;

			long y;

			long z;
		} base;

		struct ini_component
		{

			bool debug_info;

			std::string name;
		} component;

		struct ini_hardware
		{

			std::string camera_type;

			bool debug_info;

			std::string device;

			std::string identifier;
		} hardware;

		struct ini_hardware_properties
		{

			/**
			 * Range: 90 - 115
			 */
			double auto_exposure;

			bool autoflag_shutter;

			bool autoflag_white_balance_mode;

			/**
			 * Range: 0 - 127
			 */
			double brightness;

			std::string format;

			/**
			 * Range: 1.875 | 3.750 | 7.500 | 15.000
			 */
			double framerate;

			/**
			 * Range: 70 - 551
			 */
			double gain;

			/**
			 * Range: 128 - 130
			 */
			double gamma;

			unsigned long height;

			/**
			 * Range: 83 - 173
			 */
			double hue;

			/**
			 * Range: 0 - 511
			 */
			double saturation;

			/**
			 * Range: 0 - 7
			 */
			double sharpness;

			/**
			 * Range: 0.000010 - 17.500000
			 */
			double shutter;

			/**
			 * 0 : free running
			 * 1 : mode 0
			 * 2 : mode 1
			 */
			unsigned long trigger_mode;

			/**
			 * 0 : falling edge
			 * 1 : rising edge
			 */
			unsigned long trigger_polarity;

			/**
			 * Range: 0 - 7
			 */
			double white_balance_mode;

			/**
			 * Range: 1792 - 2304
			 */
			double white_balance_u;

			/**
			 * Range: 1792 - 2304
			 */
			double white_balance_v;

			unsigned long width;
		} hardware_properties;

		struct ini_image
		{

			bool debug_info;

			std::string smart_format;

			float valid_time_in_sec;
		} image;

		struct ini_push_newest
		{

			bool debug_info;
		} push_newest;

		struct ini_push_timed
		{

			bool debug_info;
		} push_timed;

		struct ini_sensor_pose
		{

			double azimuth;

			double elevation;

			double roll;

			long x;

			long y;

			long z;
		} sensor_pose;
	} ini;

};
#endif
