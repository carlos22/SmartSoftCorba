//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.4
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "SmartUnicapImageServer.hh"

// constructor
SmartUnicapImageServer::SmartUnicapImageServer()
{
	std::cout << "constructor of SmartUnicapImageServer\n";

	ini.component.name = "SmartUnicapImageServer";

	ini.imagePushNewestServer.serviceName = "imageNewest";
	ini.imagePushTimedServer.serviceName = "imageTimed";
	ini.imagePushTimedServer.cycle = 0.06;
	ini.imageQueryServer.serviceName = "imageQuery";
	ini.stateServer.serviceName = "state";
	ini.basePushTimedClient.serverName = "SmartPlayerStageSimulator";
	ini.basePushTimedClient.serviceName = "basestate";
	ini.basePushTimedClient.interval = 1;
	ini.ptuPushTimedClient.serverName = "SmartPTUServer";
	ini.ptuPushTimedClient.serviceName = "devicePoseState";
	ini.base.base_a = 0;
	ini.base.on_base = true;
	ini.base.on_ptu = false;
	ini.base.steer_a = 0;
	ini.base.turret_a = 0;
	ini.base.x = 0;
	ini.base.y = 0;
	ini.base.z = 0;
	ini.hardware.camera_type = "FireWire";
	ini.hardware.debug_info = false;
	ini.hardware.device = "/dev/raw1394";
	ini.hardware.identifier = "SONY DFW-X710 v1.03A 2917744";
	ini.hardware_properties.auto_exposure = 100;
	ini.hardware_properties.autoflag_shutter = false;
	ini.hardware_properties.autoflag_white_balance_mode = false;
	ini.hardware_properties.brightness = 16;
	ini.hardware_properties.format = "Y(Mono)";
	ini.hardware_properties.framerate = 15;
	ini.hardware_properties.gain = 100;
	ini.hardware_properties.gamma = 128;
	ini.hardware_properties.height = 768;
	ini.hardware_properties.hue = 128;
	ini.hardware_properties.saturation = 128;
	ini.hardware_properties.sharpness = 3;
	ini.hardware_properties.shutter = 0.014300;
	ini.hardware_properties.trigger_mode = 0;
	ini.hardware_properties.trigger_polarity = 0;
	ini.hardware_properties.white_balance_mode = 3;
	ini.hardware_properties.white_balance_u = 2000;
	ini.hardware_properties.white_balance_v = 2000;
	ini.hardware_properties.width = 1024;
	ini.image.debug_info = false;
	ini.image.smart_format = "grey";
	ini.image.valid_time_in_sec = 1.0;
	ini.push_newest.debug_info = false;
	ini.push_timed.debug_info = false;
	ini.sensor_pose.azimuth = 0;
	ini.sensor_pose.elevation = 0;
	ini.sensor_pose.roll = 0;
	ini.sensor_pose.x = 0;
	ini.sensor_pose.y = 0;
	ini.sensor_pose.z = 0;
	ini.settings.debug_info = false;
}

void SmartUnicapImageServer::init(int argc, char *argv[])
{
	try
	{
		loadParameter(argc, argv);
		component = new CHS::SmartComponent(ini.component.name, argc, argv);

		std::cout << "Component SmartUnicapImageServer is named "
				<< ini.component.name << "." << std::endl;

		// create ports
		basePushTimedClient = new CHS::PushTimedClient<
				CommBasicObjects::CommBaseState>(component);
		imagePushNewestServer = new CHS::PushNewestServer<
				CommVisionObjects::CommVideoImage>(component,
				ini.imagePushNewestServer.serviceName);
		imagePushTimedServer = new CHS::PushTimedServer<
				CommVisionObjects::CommVideoImage>(component,
				ini.imagePushTimedServer.serviceName, imagePushTimedHandler,
				ini.imagePushTimedServer.cycle);

		imageQueryServer = new CHS::QueryServer<CommBasicObjects::CommVoid,
				CommVisionObjects::CommVideoImage>(component,
				ini.imageQueryServer.serviceName, imageQueryHandler);

		ptuPushTimedClient = new CHS::PushNewestClient<
				CommBasicObjects::CommDevicePoseState>(component);
		stateServer = new CHS::SmartStateServer(component,
				ini.stateServer.serviceName, stateChangeHandler);
		// define states for stateServer (CHS::SmartStateServer) 
		if (stateServer->defineStates("pushimage", "queryonly")
				!= CHS::SMART_OK)
			std::cerr << "ERROR: define state" << std::endl;
		if (stateServer->defineStates("pushimage", "pushimage")
				!= CHS::SMART_OK)
			std::cerr << "ERROR: define state" << std::endl;
		if (stateServer->defineStates("queryonly", "queryonly")
				!= CHS::SMART_OK)
			std::cerr << "ERROR: define state" << std::endl;
		wiringSlave = new CHS::WiringSlave(component);

		// add client port to wiring slave
		basePushTimedClient->add(wiringSlave, "basePushTimedClient");
		ptuPushTimedClient->add(wiringSlave, "ptuPushTimedClient");

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void SmartUnicapImageServer::run()
{
	compHandler.onStartup();
	component->run();
	delete component;
}

void SmartUnicapImageServer::loadParameter(int argc, char *argv[])
{
	/* 
	 Parameters can be specified via command line -filename=<filename>
	 
	 With this parameter present:
	 - The component will look for the file in the current working directory, 
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found
	 
	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc   
	 */
	CHS::SmartParameter parameter;

	// load parameters
	try
	{
		// check if paramfile is given as argument
		bool paramFile = false;
		std::string str;
		for (int i = 0; i < argc; i++)
		{
			str = argv[i];
			if (str.find("filename") != std::string::npos)
				paramFile = true;
		}

		// if paramfile is given as argument
		if (paramFile == true)
		{
			std::cout << "load parameter file from argv \n";
			parameter.addFile(argc, argv, "filename", false);
		}
		// else load standard paramfile
		else
		{
			std::cout << "load SmartUnicapImageServer.ini parameter file\n";
			parameter.addFile("SmartUnicapImageServer.ini");
		}

		// than add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLine("", argc, argv);

		// print all known parameters
		parameter.print(); // TODO remove this


		// load parameter
		parameter.getString("component", "name", ini.component.name);

		parameter.getString("imagePushNewestServer", "serviceName",
				ini.imagePushNewestServer.serviceName);
		parameter.getString("imagePushTimedServer", "serviceName",
				ini.imagePushTimedServer.serviceName);
		parameter.getDouble("imagePushTimedServer", "cycle",
				ini.imagePushTimedServer.cycle);
		parameter.getString("imageQueryServer", "serviceName",
				ini.imageQueryServer.serviceName);
		parameter.getString("stateServer", "serviceName",
				ini.stateServer.serviceName);
		parameter.getString("basePushTimedClient", "serverName",
				ini.basePushTimedClient.serverName);
		parameter.getString("basePushTimedClient", "serviceName",
				ini.basePushTimedClient.serviceName);
		parameter.getInt("basePushTimedClient", "interval",
				ini.basePushTimedClient.interval);
		parameter.getString("ptuPushTimedClient", "serverName",
				ini.ptuPushTimedClient.serverName);
		parameter.getString("ptuPushTimedClient", "serviceName",
				ini.ptuPushTimedClient.serviceName);
		parameter.getDouble("base", "base_a", ini.base.base_a);
		parameter.getTruthValue("base", "on_base", ini.base.on_base);
		parameter.getTruthValue("base", "on_ptu", ini.base.on_ptu);
		parameter.getDouble("base", "steer_a", ini.base.steer_a);
		parameter.getDouble("base", "turret_a", ini.base.turret_a);
		parameter.getInt("base", "x", ini.base.x);
		parameter.getInt("base", "y", ini.base.y);
		parameter.getInt("base", "z", ini.base.z);
		parameter.getString("hardware", "camera_type", ini.hardware.camera_type);
		parameter.getTruthValue("hardware", "debug_info",
				ini.hardware.debug_info);
		parameter.getString("hardware", "device", ini.hardware.device);
		parameter.getString("hardware", "identifier", ini.hardware.identifier);
		parameter.getDouble("hardware_properties", "auto_exposure",
				ini.hardware_properties.auto_exposure);
		parameter.getTruthValue("hardware_properties", "autoflag_shutter",
				ini.hardware_properties.autoflag_shutter);
		parameter.getTruthValue("hardware_properties",
				"autoflag_white_balance_mode",
				ini.hardware_properties.autoflag_white_balance_mode);
		parameter.getDouble("hardware_properties", "brightness",
				ini.hardware_properties.brightness);
		parameter.getString("hardware_properties", "format",
				ini.hardware_properties.format);
		parameter.getDouble("hardware_properties", "framerate",
				ini.hardware_properties.framerate);
		parameter.getDouble("hardware_properties", "gain",
				ini.hardware_properties.gain);
		parameter.getDouble("hardware_properties", "gamma",
				ini.hardware_properties.gamma);
		parameter.getInt("hardware_properties", "height",
				ini.hardware_properties.height);
		parameter.getDouble("hardware_properties", "hue",
				ini.hardware_properties.hue);
		parameter.getDouble("hardware_properties", "saturation",
				ini.hardware_properties.saturation);
		parameter.getDouble("hardware_properties", "sharpness",
				ini.hardware_properties.sharpness);
		parameter.getDouble("hardware_properties", "shutter",
				ini.hardware_properties.shutter);
		parameter.getInt("hardware_properties", "trigger_mode",
				ini.hardware_properties.trigger_mode);
		parameter.getInt("hardware_properties", "trigger_polarity",
				ini.hardware_properties.trigger_polarity);
		parameter.getDouble("hardware_properties", "white_balance_mode",
				ini.hardware_properties.white_balance_mode);
		parameter.getDouble("hardware_properties", "white_balance_u",
				ini.hardware_properties.white_balance_u);
		parameter.getDouble("hardware_properties", "white_balance_v",
				ini.hardware_properties.white_balance_v);
		parameter.getInt("hardware_properties", "width",
				ini.hardware_properties.width);
		parameter.getTruthValue("image", "debug_info", ini.image.debug_info);
		parameter.getString("image", "smart_format", ini.image.smart_format);
		parameter.getDouble("image", "valid_time_in_sec",
				ini.image.valid_time_in_sec);
		parameter.getTruthValue("push_newest", "debug_info",
				ini.push_newest.debug_info);
		parameter.getTruthValue("push_timed", "debug_info",
				ini.push_timed.debug_info);
		parameter.getDouble("sensor_pose", "azimuth", ini.sensor_pose.azimuth);
		parameter.getDouble("sensor_pose", "elevation",
				ini.sensor_pose.elevation);
		parameter.getDouble("sensor_pose", "roll", ini.sensor_pose.roll);
		parameter.getInt("sensor_pose", "x", ini.sensor_pose.x);
		parameter.getInt("sensor_pose", "y", ini.sensor_pose.y);
		parameter.getInt("sensor_pose", "z", ini.sensor_pose.z);
		parameter.getTruthValue("settings", "debug_info",
				ini.settings.debug_info);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (const CHS::ParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

