//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

#include "SmartUnicapImageClientCore.hh"

// constructor
SmartUnicapImageClientCore::SmartUnicapImageClientCore()
{
	std::cout << "constructor SmartUnicapImageClientCore\n";
}

IplImage* SmartUnicapImageClientCore::convertDataArrayToIplImage(CommVisionObjects::CommVideoImage &query_image, CvSize size)
{
	IplImage* ipl_image = NULL;

	if (query_image.get_format() == CommVisionObjects::FormatType::UYVY || query_image.get_format() == CommVisionObjects::FormatType::RGB24)
	{
		unsigned char* arr_image = new unsigned char[query_image.get_size_as_rgb24()];
		query_image.get_as_rgb24(arr_image);

		ipl_image = OpenCVHelpers::copyRGBToIplImage(arr_image, query_image.get_height(), query_image.get_width());
		delete arr_image;

	} else if (query_image.get_format() == CommVisionObjects::FormatType::GREY)
	{
		CvMat mat;
		cvInitMatHeader(&mat, size.height, size.width, CV_8UC1, const_cast<unsigned char *> (query_image.get_data()));
		ipl_image = cvCreateImage(size, IPL_DEPTH_8U, 1);

		// copy matrix data into image
		cvCopy(&mat, ipl_image);

	} else if (query_image.get_format() == CommVisionObjects::FormatType::YUV422)
	{
		unsigned char* arr_image = new unsigned char[query_image.get_size_as_rgb24()];
		query_image.get_as_rgb24(arr_image);

		ipl_image = OpenCVHelpers::copyRGBToIplImage(arr_image, query_image.get_height(), query_image.get_width());
		delete arr_image;

	} else
	{
		std::cout << "Image Format: " << query_image.get_format() << " not supported!" << std::endl;
	}

	return ipl_image;

}
