//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.2.1
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// http://smart-robotics.sourceforge.net/
// 
// Please do not modify this file. It will be re-generated
// running the workflow.
//--------------------------------------------------------------------------

#ifndef _MOBILEMANIPULATIONSERVER_HH
#define _MOBILEMANIPULATIONSERVER_HH

#include <iostream>
#include "smartSoft.hh"
#include "../MobileManipulationServerCore.hh"
// include communication objects
#include <commMoMaManipulateState.hh>
#include <commMoMaObjectList.hh>
#include <commMoMaPose.hh>
#include <commMoMaScanEnvironment.hh>
// include tasks	
// include handler
#include "../CompHandler.hh"
#include "../OpenRave.hh"
#include "../ObjectRecognition.hh"
#include "../HandleMoveToPoint.hh"
#include "../HandleGetNewPoint.hh"

#define COMP MobileManipulationServer::instance()

class MobileManipulationServer: public MobileManipulationServerCore
{
private:
	static MobileManipulationServer _mobileManipulationServer;

	// constructor
	MobileManipulationServer();

	// copy-constructor
	MobileManipulationServer(const MobileManipulationServer& cc);

	// destructor
	~MobileManipulationServer()
	{
	}
	;

	// load parameter from ini file
	void loadParameter(int argc, char *argv[]);

	// instantiate handler
	CompHandler compHandler;
	OpenRave openRave;
	ObjectRecognition objectRecognition;
	HandleMoveToPoint handleMoveToPoint;
	HandleGetNewPoint handleGetNewPoint;

	// ThreadQueueHandler 


public:
	// component
	CHS::SmartComponent *component;

	// create mutex


	// instantiate tasks

	// ports
	CHS::QueryServer<Smart::CommMoMaScanEnvironment, Smart::CommMoMaObjectList>
			*scanEnvironment;
	CHS::QueryServer<Smart::CommMoMaPose, Smart::CommMoMaPose> *getNewPoint;
	CHS::SendServer<Smart::CommMoMaPose> *moveToPoint;
	CHS::QueryServer<Smart::CommMoMaObjectList, Smart::CommMoMaManipulateState>
			*manipulateObject;

	void init(int argc, char *argv[]);
	void run();

	// return singleton instance
	static MobileManipulationServer* instance()
	{
		return (MobileManipulationServer*) &_mobileManipulationServer;
	}

	// ini parameter
	struct
	{

		struct
		{
			std::string serviceName;
		} scanEnvironment;

		struct
		{
			std::string serviceName;
		} getNewPoint;

		struct
		{
			std::string serviceName;
		} moveToPoint;

		struct
		{
			std::string serviceName;
		} manipulateObject;

		struct
		{
			std::string laserPort;
			std::string objectDatabase;
			std::string tempData;
			unsigned char katanaComPortNr;
			std::string katanaConfig;
		} general;
	} ini;

};
#endif
