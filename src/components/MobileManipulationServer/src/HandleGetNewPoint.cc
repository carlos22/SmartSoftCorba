//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.2.1
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// http://smart-robotics.sourceforge.net/
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//
//------------------------------------------------------------------------
//
//  Copyright (C) 2009 Manuel Wopfner
//
//        wopfner@hs-ulm.de
//
//        Christian Schlegel (schlegel@hs-ulm.de)
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm (Germany)
//
//  This file is part of the "Katana Mobile Manipulation component".
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//--------------------------------------------------------------------------

// this include must be the first one
#include "controller/MainController.hh"

#include "HandleGetNewPoint.hh"
#include "gen/MobileManipulationServer.hh"

#include <iostream>

void HandleGetNewPoint::handleQuery(CHS::QueryServer<Smart::CommMoMaPose,
		Smart::CommMoMaPose> & server, const CHS::QueryId id,
		const Smart::CommMoMaPose & request) throw ()
{
	// change this code to your needs !!!
	Smart::CommMoMaPose answer;

	KatanaAPI::MotorAngles startAngles(request.getMotor1(), request.getMotor2(), request.getMotor3(), request.getMotor4(), request.getMotor5());
	KatanaAPI::MotorAngles newAngles = mmp::MainController::getInstance().getNewPoint(startAngles);

	answer.setMotor1(newAngles.motor1);
	answer.setMotor2(newAngles.motor2);
	answer.setMotor3(newAngles.motor3);
	answer.setMotor4(newAngles.motor4);
	answer.setMotor5(newAngles.motor5);

	server.answer(id, answer);
}
