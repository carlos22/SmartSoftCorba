//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _SMARTVISUALIZATION_HH
#define _SMARTVISUALIZATION_HH

#include <iostream>
#include "smartSoft.hh"
#include "../SmartVisualizationCore.hh"
// include communication objects
#include <CommBasicObjects/commBaseState.hh>

#include <CommBasicObjects/commMobileLaserScan.hh>

#include <CommNavigationObjects/commGridMap.hh>

#include <CommNavigationObjects/commGridMapRequest.hh>

#include <CommVisionObjects/commToFImage.hh>

// include tasks	

#include "../BaseTask.hh"
#include "../CurMapTask.hh"
#include "../Laser1Task.hh"
#include "../Laser2Task.hh"
#include "../Laser3Task.hh"
#include "../LtmTask.hh"
#include "../TofTask.hh"
// include handler
#include "../CompHandler.hh"

#define COMP SmartVisualization::instance()

class SmartVisualization: public SmartVisualizationCore
{
private:
	static SmartVisualization _smartVisualization;

	// constructor
	SmartVisualization();

	// copy-constructor
	SmartVisualization(const SmartVisualization& cc);

	// destructor
	~SmartVisualization()
	{
	}
	;

	// load parameter from ini file
	void loadParameter(int argc, char *argv[]);

	// instantiate handler
	CompHandler compHandler;

	// ThreadQueueHandler 

public:
	// component
	CHS::SmartComponent *component;

	// create mutex


	// create condition mutex


	// instantiate tasks

	BaseTask baseTask;
	CurMapTask curMapTask;
	Laser1Task laser1Task;
	Laser2Task laser2Task;
	Laser3Task laser3Task;
	LtmTask ltmTask;
	TofTask tofTask;

	// ports
	CHS::PushTimedClient<CommBasicObjects::CommBaseState> *baseClient;
	CHS::PushNewestClient<CommNavigationObjects::CommGridMap> *curPushClient;
	CHS::PushNewestClient<CommBasicObjects::CommMobileLaserScan> *laserClient1;
	CHS::PushNewestClient<CommBasicObjects::CommMobileLaserScan> *laserClient2;
	CHS::PushNewestClient<CommBasicObjects::CommMobileLaserScan> *laserClient3;
	CHS::QueryClient<CommNavigationObjects::CommGridMapRequest,
			CommNavigationObjects::CommGridMap> *lmtQueryClient;
	CHS::PushNewestClient<CommVisionObjects::CommToFImage> *tofImageClient;

	void init(int argc, char *argv[]);
	void run();

	// return singleton instance
	static SmartVisualization* instance()
	{
		return (SmartVisualization*) &_smartVisualization;
	}

	// ini parameter
	struct ini_ini
	{

		// component struct
		struct ini_component
		{
			// the name of the component
			std::string name;
		} component;

		struct ini_baseClient
		{
			std::string serverName;
			std::string serviceName;
			long interval;
		} baseClient;

		struct ini_curPushClient
		{
			std::string serverName;
			std::string serviceName;
		} curPushClient;

		struct ini_laserClient1
		{
			std::string serverName;
			std::string serviceName;
		} laserClient1;

		struct ini_laserClient2
		{
			std::string serverName;
			std::string serviceName;
		} laserClient2;

		struct ini_laserClient3
		{
			std::string serverName;
			std::string serviceName;
		} laserClient3;

		struct ini_lmtQueryClient
		{
			std::string serverName;
			std::string serviceName;
		} lmtQueryClient;

		struct ini_tofImageClient
		{
			std::string serverName;
			std::string serviceName;
		} tofImageClient;

		struct ini_services
		{

			bool show_base;

			bool show_cur_map;

			bool show_laser_1;

			bool show_laser_2;

			bool show_laser_3;

			bool show_ltm;

			bool show_tof_image;
		} services;
	} ini;

};
#endif
