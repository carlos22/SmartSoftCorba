//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef _SMARTMAPPERGRIDMAP_HH
#define _SMARTMAPPERGRIDMAP_HH

#include <iostream>
#include "smartSoft.hh"
#include "../SmartMapperGridMapCore.hh"
// include communication objects
#include <CommBasicObjects/commMobileLaserScan.hh>

#include <CommNavigationObjects/commGridMap.hh>

#include <CommNavigationObjects/commGridMapRequest.hh>

#include <CommNavigationObjects/commMapperParameter.hh>

// include tasks	

#include "../CurMapTask.hh"
#include "../LtmMapTask.hh"
// include handler
#include "../CompHandler.hh"
#include "../CurQueryHandler.hh"
#include "../LtmQueryHandler.hh"
#include "../LtmTriggerTimer.hh"
#include "../ParameterHandler.hh"
#include "../StateChangeHandler.hh"

#define COMP SmartMapperGridMap::instance()

class SmartMapperGridMap: public SmartMapperGridMapCore
{
private:
	static SmartMapperGridMap _smartMapperGridMap;

	// constructor
	SmartMapperGridMap();

	// copy-constructor
	SmartMapperGridMap(const SmartMapperGridMap& cc);

	// destructor
	~SmartMapperGridMap()
	{
	}
	;

	// load parameter from ini file
	void loadParameter(int argc, char *argv[]);

	// instantiate handler
	CompHandler compHandler;
	CurQueryHandler curQueryHandler;
	LtmQueryHandler ltmQueryHandler;
	LtmTriggerTimer ltmTriggerTimer;
	ParameterHandler parameterHandler;
	StateChangeHandler stateChangeHandler;

	// ThreadQueueHandler 
	CHS::ThreadQueueQueryHandler<CommNavigationObjects::CommGridMapRequest,
			CommNavigationObjects::CommGridMap> *threadCurQueryHandler;

public:
	// component
	CHS::SmartComponent *component;

	// create mutex
	CHS::SmartMutex CurLock;
	CHS::SmartMutex LtmLock;
	CHS::SmartMutex LtmTriggerLock;
	CHS::SmartMutex MapperStateLock;

	// create condition mutex
	CHS::SmartConditionMutex MapperLtmTrigger;//(LtmTriggerLock);


	// instantiate tasks

	CurMapTask curMapTask;
	LtmMapTask ltmMapTask;

	// ports
	CHS::PushNewestServer<CommNavigationObjects::CommGridMap> *curPushServer;
	CHS::QueryServer<CommNavigationObjects::CommGridMapRequest,
			CommNavigationObjects::CommGridMap> *curQueryServer;
	CHS::PushNewestClient<CommBasicObjects::CommMobileLaserScan> *laserClient;
	CHS::QueryServer<CommNavigationObjects::CommGridMapRequest,
			CommNavigationObjects::CommGridMap> *ltmQueryServer;
	CHS::SendServer<CommNavigationObjects::CommMapperParameter> *paramServer;
	CHS::SmartStateServer *stateServer;

	void init(int argc, char *argv[]);
	void run();

	// return singleton instance
	static SmartMapperGridMap* instance()
	{
		return (SmartMapperGridMap*) &_smartMapperGridMap;
	}

	// ini parameter
	struct ini_ini
	{

		// component struct
		struct ini_component
		{
			// the name of the component
			std::string name;
		} component;

		struct ini_curPushServer
		{
			std::string serviceName;
		} curPushServer;

		struct ini_curQueryServer
		{
			std::string serviceName;
		} curQueryServer;

		struct ini_ltmQueryServer
		{
			std::string serviceName;
		} ltmQueryServer;

		struct ini_paramServer
		{
			std::string serviceName;
		} paramServer;

		struct ini_stateServer
		{
			std::string serviceName;
		} stateServer;

		struct ini_laserClient
		{
			std::string serverName;
			std::string serviceName;
		} laserClient;

		struct ini_currentMap
		{

			/**
			 * [0,1]   accumulate/clear map each cycle
			 */
			bool empty;

			/**
			 * type of growing {star16,star12,circle16,circle8,no}
			 */
			std::string growing;

			/**
			 * take every nth laserscan
			 */
			unsigned long interval;

			/**
			 * disable/enable ltm preoccupation
			 */
			bool ltm_state;

			/**
			 * [0-255] ltm obstacle threshold // asteck: [0-128]
			 */
			unsigned long ltm_threshold;

			/**
			 * default map id
			 */
			unsigned long map_id;

			/**
			 * offset relative to world in mm
			 */
			long offset_x;

			/**
			 * offset relative to world in mm
			 */
			long offset_y;

			/**
			 * size of x current in mm
			 */
			unsigned long size_x;

			/**
			 * size of y current in mm
			 */
			unsigned long size_y;
		} currentMap;

		struct ini_general
		{

			/**
			 * cellsize in mm
			 */
			unsigned long cellsize;

			bool verbose;
		} general;

		struct ini_ltmMap
		{

			/**
			 * [0,255] adaptation rate //100
			 */
			long kalman;

			/**
			 * default map id
			 */
			unsigned long map_id;

			/**
			 * offset relative to world in mm
			 */
			long offset_x;

			/**
			 * offset relative to world in mm
			 */
			long offset_y;

			/**
			 * size of x ltm in mm
			 */
			unsigned long size_x;

			/**
			 * size of y ltm in mm
			 */
			unsigned long size_y;
		} ltmMap;
	} ini;

};
#endif
