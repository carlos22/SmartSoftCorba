//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.10.2
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "SmartMapperGridMap.hh"

// constructor
SmartMapperGridMap::SmartMapperGridMap() :
	MapperLtmTrigger(LtmTriggerLock)
{
	std::cout << "constructor of SmartMapperGridMap\n";

	ini.component.name = "SmartMapperGridMap";

	ini.curPushServer.serviceName = "currentGridMap";
	ini.curQueryServer.serviceName = "curGridMapQuery";
	ini.ltmQueryServer.serviceName = "ltmGridMapQuery";
	ini.paramServer.serviceName = "param";
	ini.stateServer.serviceName = "state";
	ini.laserClient.serverName = "SmartLaserLMS200Server";
	ini.laserClient.serviceName = "scan";
	ini.currentMap.empty = false;
	ini.currentMap.growing = "star16";
	ini.currentMap.interval = 10;
	ini.currentMap.ltm_state = false;
	ini.currentMap.ltm_threshold = 20;
	ini.currentMap.map_id = 0;
	ini.currentMap.offset_x = -10000;
	ini.currentMap.offset_y = -10000;
	ini.currentMap.size_x = 20000;
	ini.currentMap.size_y = 20000;
	ini.general.cellsize = 50;
	ini.general.verbose = false;
	ini.ltmMap.kalman = 100;
	ini.ltmMap.map_id = 0;
	ini.ltmMap.offset_x = -15000;
	ini.ltmMap.offset_y = -15000;
	ini.ltmMap.size_x = 60000;
	ini.ltmMap.size_y = 60000;
}

void SmartMapperGridMap::init(int argc, char *argv[])
{
	try
	{
		loadParameter(argc, argv);
		component = new CHS::SmartComponent(ini.component.name, argc, argv);

		std::cout << "Component SmartMapperGridMap is named "
				<< ini.component.name << "." << std::endl;

		// create ports
		curPushServer = new CHS::PushNewestServer<
				CommNavigationObjects::CommGridMap>(component,
				ini.curPushServer.serviceName);
		threadCurQueryHandler = new CHS::ThreadQueueQueryHandler<
				CommNavigationObjects::CommGridMapRequest,
				CommNavigationObjects::CommGridMap>(curQueryHandler);
		curQueryServer = new CHS::QueryServer<
				CommNavigationObjects::CommGridMapRequest,
				CommNavigationObjects::CommGridMap>(component,
				ini.curQueryServer.serviceName, *threadCurQueryHandler);

		laserClient = new CHS::PushNewestClient<
				CommBasicObjects::CommMobileLaserScan>(component);
		ltmQueryServer = new CHS::QueryServer<
				CommNavigationObjects::CommGridMapRequest,
				CommNavigationObjects::CommGridMap>(component,
				ini.ltmQueryServer.serviceName, ltmQueryHandler);

		paramServer = new CHS::SendServer<
				CommNavigationObjects::CommMapperParameter>(component,
				ini.paramServer.serviceName, parameterHandler);

		stateServer = new CHS::SmartStateServer(component,
				ini.stateServer.serviceName, stateChangeHandler);
		// define states for stateServer (CHS::SmartStateServer) 
		if (stateServer->defineStates("buildbothmaps", "buildcurrentmap")
				!= CHS::SMART_OK)
			std::cerr << "ERROR: define state" << std::endl;
		if (stateServer->defineStates("buildbothmaps", "buildltmmap")
				!= CHS::SMART_OK)
			std::cerr << "ERROR: define state" << std::endl;
		if (stateServer->defineStates("buildcurrentmap", "buildcurrentmap")
				!= CHS::SMART_OK)
			std::cerr << "ERROR: define state" << std::endl;
		if (stateServer->defineStates("buildltmmap", "buildltmmap")
				!= CHS::SMART_OK)
			std::cerr << "ERROR: define state" << std::endl;

		// create timer
		double fractpart, intpart;
		// setup ltmTriggerTimer
		fractpart = modf(0.5, &intpart);
		component->getTimerThread().scheduleTimer(ltmTriggerTimer, (void*) 0,
				ACE_Time_Value(0, 0), ACE_Time_Value(intpart, (int) (fractpart
						* 1000* 1000 )));

	}
	catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	}
	catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void SmartMapperGridMap::run()
{
	compHandler.onStartup();
	component->run();
	delete component;
}

void SmartMapperGridMap::loadParameter(int argc, char *argv[])
{
	/* 
	 Parameters can be specified via command line -filename=<filename>
	 
	 With this parameter present:
	 - The component will look for the file in the current working directory, 
	 a path relative to the current directory or any absolute path
	 - The component will use the default values if the file cannot be found
	 
	 With this parameter absent:
	 - <Name of Component>.ini will be read from current working directory, if found there
	 - $SMART_ROOT/etc/<Name of Component>.ini will be read otherwise
	 - Default values will be used if neither found in working directory or /etc   
	 */
	CHS::SmartParameter parameter;

	// load parameters
	try
	{
		// check if paramfile is given as argument
		bool paramFile = false;
		std::string str;
		for (int i = 0; i < argc; i++)
		{
			str = argv[i];
			if (str.find("filename") != std::string::npos)
				paramFile = true;
		}

		// if paramfile is given as argument
		if (paramFile == true)
		{
			std::cout << "load parameter file from argv \n";
			parameter.addFile(argc, argv, "filename", false);
		}
		// else load standard paramfile
		else
		{
			std::cout << "load SmartMapperGridMap.ini parameter file\n";
			parameter.addFile("SmartMapperGridMap.ini");
		}

		// than add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLine("", argc, argv);

		// print all known parameters
		parameter.print(); // TODO remove this


		// load parameter
		parameter.getString("component", "name", ini.component.name);

		parameter.getString("curPushServer", "serviceName",
				ini.curPushServer.serviceName);
		parameter.getString("curQueryServer", "serviceName",
				ini.curQueryServer.serviceName);
		parameter.getString("ltmQueryServer", "serviceName",
				ini.ltmQueryServer.serviceName);
		parameter.getString("paramServer", "serviceName",
				ini.paramServer.serviceName);
		parameter.getString("stateServer", "serviceName",
				ini.stateServer.serviceName);
		parameter.getString("laserClient", "serverName",
				ini.laserClient.serverName);
		parameter.getString("laserClient", "serviceName",
				ini.laserClient.serviceName);
		parameter.getTruthValue("currentMap", "empty", ini.currentMap.empty);
		parameter.getString("currentMap", "growing", ini.currentMap.growing);
		parameter.getInt("currentMap", "interval", ini.currentMap.interval);
		parameter.getTruthValue("currentMap", "ltm_state",
				ini.currentMap.ltm_state);
		parameter.getInt("currentMap", "ltm_threshold",
				ini.currentMap.ltm_threshold);
		parameter.getInt("currentMap", "map_id", ini.currentMap.map_id);
		parameter.getInt("currentMap", "offset_x", ini.currentMap.offset_x);
		parameter.getInt("currentMap", "offset_y", ini.currentMap.offset_y);
		parameter.getInt("currentMap", "size_x", ini.currentMap.size_x);
		parameter.getInt("currentMap", "size_y", ini.currentMap.size_y);
		parameter.getInt("general", "cellsize", ini.general.cellsize);
		parameter.getTruthValue("general", "verbose", ini.general.verbose);
		parameter.getInt("ltmMap", "kalman", ini.ltmMap.kalman);
		parameter.getInt("ltmMap", "map_id", ini.ltmMap.map_id);
		parameter.getInt("ltmMap", "offset_x", ini.ltmMap.offset_x);
		parameter.getInt("ltmMap", "offset_y", ini.ltmMap.offset_y);
		parameter.getInt("ltmMap", "size_x", ini.ltmMap.size_x);
		parameter.getInt("ltmMap", "size_y", ini.ltmMap.size_y);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (const CHS::ParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

