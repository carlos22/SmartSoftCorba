//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.6.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the workflow to re-generate this file, please
// delete it before running the workflow.
//--------------------------------------------------------------------------

// --------------------------------------------------------------------------
//
//  Copyright (C) 2008 Christian Schlegel, Andreas Steck, Matthias Lutz
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//
//        ZAFH Servicerobotik Ulm
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//  This file is part of the "SmartSoft Mapper/GridMapper component".
//  It provides mapping services based on grid maps. The current map
//  represents the latest snapshot of the local surrounding based on
//  laserscans. The current map can be preoccupied by the longterm map.
//  The longterm map is a simple occupancy grid map.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------

#include "CurQueryHandler.hh"
#include "gen/SmartMapperGridMap.hh"

#include <iostream>

void CurQueryHandler::handleQuery(CHS::QueryServer<CommNavigationObjects::CommGridMapRequest,
		CommNavigationObjects::CommGridMap> & server, const CHS::QueryId id,
		const CommNavigationObjects::CommGridMapRequest & request) throw ()
{
	CommNavigationObjects::CommGridMap answer;

	struct MapperStateStruct localState;
	CommBasicObjects::CommMobileLaserScan laserscan;
	//GridMapRequestQueueEntry   entry;

	Smart::SmartCurrentGridMap *resultMap;
	int                        offsetXmm,offsetYmm;
	unsigned int               sizeXmm,sizeYmm;
	unsigned int               curLtmThreshold,mapId;
	bool                       curLtmState;
	int                        status;
	CHS::StatusCode            stateValue;

	// process the request depending on the module state
	stateValue = COMP->stateServer->tryAcquire("buildcurrentmap");
	if (stateValue == CHS::SMART_OK)
	{
		// module is active, therefore generate requested map
		COMP->MapperStateLock.acquire();
		localState = COMP->globalState;
		COMP->MapperStateLock.release();

		status = request.get_parameter(mapId,offsetXmm,offsetYmm,sizeXmm,sizeYmm,
				curLtmState,curLtmThreshold);

		resultMap = new Smart::SmartCurrentGridMap(sizeXmm,sizeYmm,
				offsetXmm,offsetYmm,
				localState.cellSize,
				localState.growingType,
				mapId);

		if(COMP->ini.general.verbose == true)
		{
			std::cout << "MAPPER: Request current Map: generate cur map\n";
			std::cout << "  sizeXmm sizeYmm      " << sizeXmm << " " << sizeYmm << "\n";
			std::cout << "  offsetXmm offsetYmm  " << offsetXmm << " " << offsetYmm << "\n";
			std::cout << "  cellSize             " << localState.cellSize << "\n";
			std::cout << "  growingType          " << localState.growingType << "\n";
			std::cout << "  mapId                " << mapId << "\n";
		}

		// wait for the next laserscan
		status = COMP->laserClient->getUpdateWait(laserscan);

		if (status==CHS::SMART_OK)
		{
			// received laser scan
	        // delete actual map for each cycle
	        status = resultMap->clearMap();

	        if (curLtmState==0)
	        {
	        	// don't use the ltm for preoccupation
	        }
	        else
	        {
	        	// use ltm for preoccupation
	        	COMP->LtmLock.acquire();
	        	status = resultMap->setLtmOccupation(localState.curLtmThreshold, *(COMP->ltmGridMap));
	        	COMP->LtmLock.release();
	        }

	        // now update map with current laserscan
	        status = resultMap->update(laserscan);
	        answer = (CommNavigationObjects::CommGridMap)(*resultMap);
	      }
		else
		{
			// canceled laser scan query, no current map available
	        answer = (CommNavigationObjects::CommGridMap)(*resultMap);
		}
		std::cout<<"MAPPER: Request currentmap module is active"<<endl;
	} // if (stateValue == CHS::SMART_OK)
	else
	{
		// module is not active
		resultMap = new Smart::SmartCurrentGridMap();
		answer = (CommNavigationObjects::CommGridMap)(*resultMap);
		std::cout<<"MAPPER: Request currentmap module is not active"<<endl;
	}

	//answer.set(result);
	server.answer(id, answer);

	// delete the map of the current request
	delete resultMap;

	// check whether one has to unlock state
	if (stateValue == CHS::SMART_OK)
	{
		// got state, therefore release
		COMP->stateServer->release("buildcurrentmap");
	}
}
