//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.2.1
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// http://smart-robotics.sourceforge.net/
// 
// Please do not modify this file. It will be re-generated
// running the workflow.
//--------------------------------------------------------------------------

#include "MobileManipulationClient.hh"

// constructor
MobileManipulationClient::MobileManipulationClient()
{
	std::cout << "constructor MobileManipulationClient\n";

	ini.moveToPoint.serverName = "MobileManipulationServer";
	ini.moveToPoint.serviceName = "moveToPoint";
	ini.getNewPoint.serverName = "MobileManipulationServer";
	ini.getNewPoint.serviceName = "getNewPoint";
	ini.scanEnvironment.serverName = "MobileManipulationServer";
	ini.scanEnvironment.serviceName = "scanEnvironment";
	ini.manipulateObject.serverName = "MobileManipulationServer";
	ini.manipulateObject.serviceName = "manipulateObject";
}

void MobileManipulationClient::init(int argc, char *argv[])
{
	try
	{
		component = new CHS::SmartComponent("MobileManipulationClient", argc,
				argv);
		loadParameter(argc, argv);

		// create ports
		moveToPoint = new CHS::SendClient<Smart::CommMoMaPose>(component);
		getNewPoint = new CHS::QueryClient<Smart::CommMoMaPose,
				Smart::CommMoMaPose>(component);
		scanEnvironment = new CHS::QueryClient<Smart::CommMoMaScanEnvironment,
				Smart::CommMoMaObjectList>(component);
		manipulateObject = new CHS::QueryClient<Smart::CommMoMaObjectList,
				Smart::CommMoMaManipulateState>(component);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

// run the component
void MobileManipulationClient::run()
{
	compHandler.onStartup();
	component->run();
	delete component;
}

void MobileManipulationClient::loadParameter(int argc, char *argv[])
{
	CHS::SmartParameter parameter;

	// load parameters
	try
	{
		// check if paramfile is given as argument
		bool paramFile = false;
		std::string str;
		for (int i = 0; i < argc; i++)
		{
			str = argv[i];
			if (str.find("filename") != std::string::npos)
				paramFile = true;
		}

		// if paramfile is given as argument
		if (paramFile == true)
		{
			std::cout << "load parameter file from argv \n";
			parameter.addFile(argc, argv, "filename", false);
		}
		// else load standard paramfile
		else
		{
			std::cout << "load MobileManipulationClient.ini parameter file\n";
			parameter.addFile("MobileManipulationClient.ini");
		}

		// than add command line arguments to allow overwriting of parameters
		// from file
		parameter.addCommandLine("", argc, argv);

		// print all known parameters
		parameter.print(); // TODO remove this


		// load parameter
		parameter.getString("moveToPoint", "serverName",
				ini.moveToPoint.serverName);
		parameter.getString("moveToPoint", "serviceName",
				ini.moveToPoint.serviceName);
		parameter.getString("getNewPoint", "serverName",
				ini.getNewPoint.serverName);
		parameter.getString("getNewPoint", "serviceName",
				ini.getNewPoint.serviceName);
		parameter.getString("scanEnvironment", "serverName",
				ini.scanEnvironment.serverName);
		parameter.getString("scanEnvironment", "serviceName",
				ini.scanEnvironment.serviceName);
		parameter.getString("manipulateObject", "serverName",
				ini.manipulateObject.serverName);
		parameter.getString("manipulateObject", "serviceName",
				ini.manipulateObject.serviceName);

	} catch (const CORBA::Exception &)
	{
		std::cerr << "Uncaught CORBA exception" << std::endl;
	} catch (const CHS::ParameterError & e)
	{
		std::cerr << "Exception from parameter handling: " << e << std::endl;
	} catch (...)
	{
		std::cerr << "Uncaught exception" << std::endl;
	}
}

