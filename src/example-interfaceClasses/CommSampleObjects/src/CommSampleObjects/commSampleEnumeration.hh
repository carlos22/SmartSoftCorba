//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.8.0
// The SmartSoft Toolchain has been developed by:
//
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
//
// This file is generated once. Modify this file to your needs.
// If you want the toolchain to re-generate this file, please
// delete it before running the code generator.
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
//
//  Copyright (C) 2010 Andreas Steck, Dennis Stampfer
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//        stampfer@hs-ulm.de
//
//        ZAFH Servicerobotic Ulm
//        Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This file is part of the SmartSoft MDSD Toolchain demonstration workspace.
//  It is based on the collection of smartExampleComponents included in the
//  SmartSoft distribution.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//--------------------------------------------------------------------------


#ifndef _COMM_COMMSAMPLEENUMERATION_HH
#define _COMM_COMMSAMPLEENUMERATION_HH

#include <string>

// include files of classes

// include header-files of included communication objects

// include enums
#include <CommSampleObjects/gen/enumSampleEnumeration.hh>

// include client-side file generated by IDL compiler
#include "CommSampleObjects/gen/smartCommSampleEnumerationC.hh"

namespace CommSampleObjects
{

class CommSampleEnumeration
{
protected:
	CommSampleObjectsIDL::CommSampleEnumeration idl_CommSampleEnumeration;

public:
	CommSampleEnumeration()
	{
	}

	CommSampleEnumeration(
			const CommSampleObjectsIDL::CommSampleEnumeration &obj) :
		idl_CommSampleEnumeration(obj)
	{
	}

	virtual ~CommSampleEnumeration()
	{
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);

	inline const CommSampleObjectsIDL::CommSampleEnumeration &get() const
	{
		return idl_CommSampleEnumeration;
	}

	inline void set(const CommSampleObjectsIDL::CommSampleEnumeration &obj)
	{
		idl_CommSampleEnumeration = obj;
	}

	static inline std::string identifier(void)
	{
		return "CommSampleObjects::CommSampleEnumeration";
	}

	//
	// user interfaces
	inline void set_value(CommSampleObjects::SampleEnumeration e) {
		idl_CommSampleEnumeration.value =  (CommSampleObjectsIDL::ENUM_SampleEnumeration) e.get_value();
		//or: idl_CommSampleEnumeration.value = e.get_value_idl();
	}

	inline CommSampleObjects::SampleEnumeration get_value() const {
		return (CommSampleObjects::SampleEnumeration) idl_CommSampleEnumeration.value;
	}

};

}
#endif
