//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain Version 0.8.0
// The SmartSoft Toolchain has been developed by:
//  
// ZAFH Servicerobotic Ulm
// Christian Schlegel (schlegel@hs-ulm.de)
// University of Applied Sciences
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// smart-robotics.sourceforge.net
// 
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
//
//  Copyright (C) 2009 Andreas Steck, Dennis Stampfer
//
//        schlegel@hs-ulm.de
//        steck@hs-ulm.de
//        stampfer@hs-ulm.de
//
//        ZAFH Servicerobotic Ulm
//        Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        89075 Ulm
//        Germany
//
//  This file is part of the SmartSoft MDSD Toolchain demonstration workspace.
//  It is based on the collection of smartExampleComponents included in the
//  SmartSoft distribution.
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
//--------------------------------------------------------------------------

#ifndef _COMM_COMMSAMPLEOBJECTS_COMMSAMPLEEVENT1RESULT_HH
#define _COMM_COMMSAMPLEOBJECTS_COMMSAMPLEEVENT1RESULT_HH

#include <string>
#include <iostream>

// include files of classes

// include header-files of included communication objects

// include enums


// include client-side file generated by IDL compiler
#include "CommSampleObjects/gen/smartCommSampleEvent1ResultC.hh"

namespace CommSampleObjects
{

class CommSampleEvent1Result
{
protected:
	CommSampleObjectsIDL::CommSampleEvent1Result idl_CommSampleEvent1Result;

public:
	CommSampleEvent1Result()
	{
	}

	CommSampleEvent1Result(
			const CommSampleObjectsIDL::CommSampleEvent1Result &obj) :
		idl_CommSampleEvent1Result(obj)
	{
	}

	virtual ~CommSampleEvent1Result()
	{
	}

	void get(CORBA::Any &a) const;
	void set(const CORBA::Any &a);

	inline const CommSampleObjectsIDL::CommSampleEvent1Result &get() const
	{
		return idl_CommSampleEvent1Result;
	}

	inline void set(const CommSampleObjectsIDL::CommSampleEvent1Result &obj)
	{
		idl_CommSampleEvent1Result = obj;
	}

	static inline std::string identifier(void)
	{
		return "CommSampleObjects::CommSampleEvent1Result";
	}

	//
	// user interfaces
	void set(long);
	void get(long&) const;
	void print(std::ostream &os = std::cout) const;
};

inline std::ostream &operator<< (std::ostream &os, const CommSampleEvent1Result &c) {
  c.print(os);
  return os;
};

}
#endif
